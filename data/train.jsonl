{"text": "<s>[INST] \nInsert a new record for a song by artist 'Aya Nakamura' from genre 'R&B' released in 2022\nCREATE TABLE songs (song_name VARCHAR(255), artist VARCHAR(255), genre VARCHAR(255), release_year INT); INSERT INTO songs (song_name, artist, genre, release_year) VALUES ('Djadja', 'Aya Nakamura', 'R&B', 2018), ('Pookie', 'Aya Nakamura', 'R&B', 2019); \n[/INST]\nINSERT INTO songs (song_name, artist, genre, release_year) VALUES ('Bemba', 'Aya Nakamura', 'R&B', 2022);\nThis query inserts a new record into the songs table for a song by Aya Nakamura from the R&B genre released in 2022. The new record is specified in the VALUES clause.</s>"}
{"text": "<s>[INST] \nInsert a record into 'technology_accessibility_stats' table\nCREATE TABLE technology_accessibility_stats (id INT PRIMARY KEY, country VARCHAR(255), internet_users INT, broadband_penetration DECIMAL(5,2), mobile_users INT, disabled_population INT); \n[/INST]\nINSERT INTO technology_accessibility_stats (id, country, internet_users, broadband_penetration, mobile_users, disabled_population) VALUES (1, 'India', 750000000, 45.67, 870000000, 100000000);\nA new record is inserted into the 'technology_accessibility_stats' table with the specified column values.</s>"}
{"text": "<s>[INST] \nWhat is the average annual climate finance committed by each country for adaptation projects?\nCREATE TABLE country (country_code VARCHAR(3), country_name VARCHAR(50)); INSERT INTO country VALUES ('USA', 'United States'), ('CHN', 'China'), ('IND', 'India');   CREATE TABLE project (project_id INT, project_name VARCHAR(50), country_code VARCHAR(3), mitigation BOOLEAN); INSERT INTO project VALUES (1, 'Solar Farm', 'USA', false), (2, 'Wind Turbines', 'CHN', false), (3, 'Energy Efficiency', 'IND', true);   CREATE TABLE finance (project_id INT, year INT, amount INT); INSERT INTO finance VALUES (1, 2020, 500000), (2, 2020, 1000000), (3, 2020, 200000), (1, 2019, 600000), (2, 2019, 800000), (3, 2019, 300000); \n[/INST]\nSELECT c.country_name, AVG(f.amount/5)   FROM country c   JOIN project p ON c.country_code = p.country_code   JOIN finance f ON p.project_id = f.project_id   WHERE p.adaptation = true   GROUP BY c.country_name;\nThis query first joins the country, project, and finance tables based on the country_code and project_id columns. It then filters for adaptation projects and calculates the average annual climate finance committed by each country by dividing the total amount of climate finance committed by the number of years (5 in this case) for each country.</s>"}
{"text": "<s>[INST] \nHow many size 14 dresses were sold in the last quarter?\nCREATE TABLE sales (sale_id INT, dress_size INT, sale_date DATE); INSERT INTO sales (sale_id, dress_size, sale_date) VALUES (1, 8, '2021-01-05'), (2, 14, '2021-02-10'), (3, 12, '2021-03-15'), (4, 10, '2021-04-20'), (5, 14, '2021-05-01'); \n[/INST]\nSELECT COUNT(*) FROM sales WHERE dress_size = 14 AND sale_date >= DATE_SUB(CURRENT_DATE, INTERVAL 3 MONTH);\nThis query counts the number of size 14 dresses sold in the last quarter by finding the number of rows with a 'dress_size' of 14 and a 'sale_date' within the last 3 months using the DATE_SUB function.</s>"}
{"text": "<s>[INST] \nWhat is the total amount of research grants awarded to female faculty in the Computer Science department?\nCREATE TABLE faculty (id INT, name VARCHAR(50), department VARCHAR(50), gender VARCHAR(10)); INSERT INTO faculty (id, name, department, gender) VALUES (1, 'Alice', 'Computer Science', 'Female'); \n[/INST]\nSELECT SUM(amount) FROM research_grants WHERE faculty_id IN (SELECT id FROM faculty WHERE department = 'Computer Science' AND gender = 'Female');\nThis query calculates the total amount of research grants for female faculty members in the Computer Science department by summing the 'amount' column in the 'research_grants' table, but only for records where the 'faculty_id' is in the list of IDs obtained from the 'faculty' table for the specified department and gender.</s>"}
{"text": "<s>[INST] \nHow many circular economy initiatives were launched by country from 2018 to 2022?\nCREATE TABLE circular_economy_initiatives (country VARCHAR(255), year INT, initiative_id INT); INSERT INTO circular_economy_initiatives (country, year, initiative_id) VALUES ('Denmark', 2018, 1), ('Denmark', 2019, 2), ('Denmark', 2020, 3), ('Denmark', 2021, 4), ('Denmark', 2022, 5), ('Netherlands', 2019, 1), ('Netherlands', 2020, 2), ('Netherlands', 2021, 3), ('Netherlands', 2022, 4), ('Switzerland', 2020, 1), ('Switzerland', 2021, 2), ('Switzerland', 2022, 3); \n[/INST]\nSELECT country, COUNT(DISTINCT initiative_id) FROM circular_economy_initiatives WHERE year BETWEEN 2018 AND 2022 GROUP BY country;\nThe SQL query counts the number of distinct circular economy initiatives for each country in the circular_economy_initiatives table where the year is between 2018 and 2022. It groups the results by country.</s>"}
{"text": "<s>[INST] \nHow many municipalities in France have a recycling rate below 30%?\nCREATE TABLE FrenchMunicipalities (municipality VARCHAR(50), recycling_rate FLOAT); INSERT INTO FrenchMunicipalities (municipality, recycling_rate) VALUES ('Paris', 28.5), ('Lyon', 35.7), ('Marseille', 29.6), ('Toulouse', 32.8), ('Nice', 31.2); \n[/INST]\nSELECT COUNT(*) FROM FrenchMunicipalities WHERE recycling_rate < 30;\nCount the number of municipalities in France with a recycling rate below 30% by filtering the recycling_rate column and counting the number of rows that meet the condition.</s>"}
{"text": "<s>[INST] \nHow many traffic violations were reported in the 'Downtown' area in July 2021?\nCREATE TABLE Violations(Date DATE, Location VARCHAR(20), Type VARCHAR(20), Quantity INT); INSERT INTO Violations(Date, Location, Type, Quantity) VALUES ('2021-07-01', 'Downtown', 'Speeding', 50), ('2021-07-01', 'Downtown', 'Running Red Light', 30), ('2021-07-02', 'Downtown', 'Speeding', 40), ('2021-07-02', 'Downtown', 'Running Red Light', 25); \n[/INST]\nSELECT SUM(Quantity) FROM Violations WHERE Location = 'Downtown' AND Date BETWEEN '2021-07-01' AND '2021-07-31';\nThis query calculates the total number of traffic violations reported in the 'Downtown' area in July 2021 by summing the 'Quantity' column where the 'Location' is 'Downtown' and the 'Date' is between '2021-07-01' and '2021-07-31'.</s>"}
{"text": "<s>[INST] \nWhat is the minimum diversity score for startups founded by immigrants in the e-commerce sector?\nCREATE TABLE company (id INT, name TEXT, industry TEXT, founder_country TEXT, diversity_score INT); INSERT INTO company (id, name, industry, founder_country, diversity_score) VALUES (1, 'EcomGlobal', 'E-commerce', 'Brazil', 75), (2, 'ShopEasy', 'E-commerce', 'China', 80); \n[/INST]\nSELECT MIN(company.diversity_score) FROM company WHERE company.industry = 'E-commerce' AND company.founder_country IS NOT NULL;\nThis SQL query calculates the minimum diversity score for startups founded by immigrants in the e-commerce sector. It does this by filtering the company table to only include rows where the industry is 'E-commerce' and the founder_country is not NULL. It then uses the MIN function to find the lowest value in the diversity_score column for these rows.</s>"}
{"text": "<s>[INST] \nList all chemical categories and their total production costs.\nCREATE TABLE chemical_production_costs_v2 (chemical_id INT, category VARCHAR(255), production_costs INT); INSERT INTO chemical_production_costs_v2 (chemical_id, category, production_costs) VALUES (1, 'Solvents', 12000), (2, 'Acids', 8500), (3, 'Gases', 9800), (4, 'Solvents', 11000); \n[/INST]\nSELECT category, SUM(production_costs) FROM chemical_production_costs_v2 GROUP BY category;\nThis SQL query calculates the total production costs for each chemical category by using the SUM function and grouping by category.</s>"}
{"text": "<s>[INST] \nAdd a new network investment to the 'network_investments' table\nCREATE TABLE network_investments (investment_id INT, investment_name VARCHAR(255), investment_type VARCHAR(255), investment_amount DECIMAL(10,2), date DATE); \n[/INST]\nINSERT INTO network_investments (investment_id, investment_name, investment_type, investment_amount, date) VALUES (4001, '5G Network Upgrade', 'Infrastructure', 5000000.00, '2023-01-01');\nThis SQL query inserts a new network investment into the 'network_investments' table with a unique investment_id, investment_name, investment_type, investment_amount, and date.</s>"}
{"text": "<s>[INST] \nWhat is the total biomass of all marine species in the Arctic region, grouped by conservation status?\"\nCREATE TABLE marine_species_biomass (species_name VARCHAR(255), region VARCHAR(255), biomass FLOAT, conservation_status VARCHAR(255)); INSERT INTO marine_species_biomass (species_name, region, biomass, conservation_status) VALUES ('Polar Bear', 'Arctic', 500, 'Fully Protected'), ('Narwhal', 'Arctic', 300, 'Partially Protected'), ('Ringed Seal', 'Arctic', 200, 'Fully Protected'); \n[/INST]\nSELECT conservation_status, SUM(biomass) as total_biomass FROM marine_species_biomass WHERE region = 'Arctic' GROUP BY conservation_status;\nThis query calculates the total biomass of all marine species in the Arctic region, grouped by their conservation status. It first filters the data to only include records from the Arctic region. Then, it groups the data by conservation status and calculates the total biomass for each group.</s>"}
{"text": "<s>[INST] \nWhat is the average cultural competency score for mental health facilities in California?\nCREATE TABLE mental_health_facilities (id INT, name VARCHAR, state VARCHAR, cultural_competency_score INT); INSERT INTO mental_health_facilities (id, name, state, cultural_competency_score) VALUES (1, 'Facility One', 'California', 85); INSERT INTO mental_health_facilities (id, name, state, cultural_competency_score) VALUES (2, 'Facility Two', 'California', 90); \n[/INST]\nSELECT state, AVG(cultural_competency_score) as avg_score FROM mental_health_facilities WHERE state = 'California' GROUP BY state;\nThe SQL query calculates the average cultural competency score for mental health facilities in California. It uses the AVG function to find the average score and the GROUP BY clause to group the results by state. The WHERE clause is used to filter the results to only include facilities in California.</s>"}
{"text": "<s>[INST] \nWhat is the average temperature recorded by each sensor in the 'field1' during the month of June 2021?\nCREATE TABLE sensor_data (sensor_id INT, record_date DATE, temperature FLOAT); INSERT INTO sensor_data (sensor_id, record_date, temperature) VALUES (1, '2021-06-01', 25.3), (1, '2021-06-02', 26.1), (2, '2021-06-01', 24.9), (2, '2021-06-02', 25.7); \n[/INST]\n SELECT sensor_id, AVG(temperature) as avg_temperature FROM sensor_data WHERE record_date BETWEEN '2021-06-01' AND '2021-06-30' GROUP BY sensor_id;\nThe SQL query groups the temperature data by sensor_id and calculates the average temperature for each sensor during June 2021.</s>"}
{"text": "<s>[INST] \nWhat is the total cost (in USD) of water conservation measures per building in each city?\nCREATE TABLE water_conservation_measures (building_id INT, building_name VARCHAR(255), city VARCHAR(255), cost_USD INT); INSERT INTO water_conservation_measures (building_id, building_name, city, cost_USD) VALUES (1, 'Green Building 1', 'NYC', 20000); INSERT INTO water_conservation_measures (building_id, building_name, city, cost_USD) VALUES (2, 'Green Building 2', 'LA', 30000); INSERT INTO water_conservation_measures (building_id, building_name, city, cost_USD) VALUES (3, 'Green Building 3', 'NYC', 40000); \n[/INST]\nSELECT city, SUM(cost_USD) as total_cost_USD FROM water_conservation_measures GROUP BY city;\nThis SQL query calculates the total cost (in USD) of water conservation measures per building in each city. It uses the SUM() function to add up the cost_USD values for each city, and the GROUP BY clause to group the results by city.</s>"}
{"text": "<s>[INST] \nWhat is the total amount of funds donated by each organization for the healthcare sector in the Middle East in 2020?\nCREATE TABLE donors (donor_id INT, donor_name TEXT, donation_amount DECIMAL, donation_date DATE, sector TEXT, country TEXT); INSERT INTO donors (donor_id, donor_name, donation_amount, donation_date, sector, country) VALUES (1, 'WHO', 100000, '2020-01-01', 'healthcare', 'Middle East'); \n[/INST]\nSELECT donor_name, SUM(donation_amount) as total_donation FROM donors WHERE country = 'Middle East' AND sector = 'healthcare' GROUP BY donor_name;\nThe SQL query groups the donations by donor name and calculates the total donation amount for each donor in the healthcare sector in the Middle East for the year 2020.</s>"}
{"text": "<s>[INST] \nFind mining operations that have a higher than average environmental impact\nCREATE TABLE environmental_impact_rates (id INT, operation VARCHAR(255), environmental_impact DECIMAL(10,2)); \n[/INST]\nSELECT operation FROM environmental_impact_rates WHERE environmental_impact > (SELECT AVG(environmental_impact) FROM environmental_impact_rates);\nThis query finds mining operations that have a higher than average environmental impact by selecting records from the environmental_impact_rates table where the environmental_impact is greater than the average environmental_impact. It uses a subquery to calculate the average environmental_impact.</s>"}
{"text": "<s>[INST] \nWhat is the total renewable energy production in MWh for the state of New York in 2021?\nCREATE TABLE renewable_energy (state VARCHAR(20), production DECIMAL(10,2), year INT); INSERT INTO renewable_energy (state, production, year) VALUES ('New York', 2500.00, 2021), ('New York', 2700.00, 2021), ('New York', 2900.00, 2021); \n[/INST]\nSELECT SUM(production) FROM renewable_energy WHERE state = 'New York' AND year = 2021;\nThis SQL query calculates the total renewable energy production in MWh for the state of New York in 2021 by summing up the 'production' column where the 'state' is New York and the year is 2021.</s>"}
{"text": "<s>[INST] \nList the total production of oil and gas for all fields in the North Sea in 2019.\nCREATE TABLE north_sea_fields (field_id INT, field_name VARCHAR(50), oil_production FLOAT, gas_production FLOAT, datetime DATETIME); INSERT INTO north_sea_fields (field_id, field_name, oil_production, gas_production, datetime) VALUES (1, 'North Sea Field A', 1500000, 2000000, '2019-01-01 00:00:00'), (2, 'North Sea Field B', 1800000, 2500000, '2019-01-01 00:00:00'); \n[/INST]\nSELECT field_name, SUM(oil_production) + SUM(gas_production) FROM north_sea_fields WHERE YEAR(datetime) = 2019 GROUP BY field_name;\nThis query calculates the sum of oil and gas production for each field in the North Sea during 2019 by summing up the oil_production and gas_production column values where the year is 2019, grouped by the field_name.</s>"}
{"text": "<s>[INST] \nWhat is the maximum 'habitat_area' (in square kilometers) for the 'habitat_preservation' table?\nCREATE TABLE habitat_preservation(id INT, habitat_name VARCHAR(50), habitat_area FLOAT); INSERT INTO habitat_preservation(id, habitat_name, habitat_area) VALUES (1, 'Rainforest', 10000), (2, 'Mangrove Forest', 1200), (3, 'Coral Reef', 300); \n[/INST]\nSELECT MAX(habitat_area) FROM habitat_preservation;\nThe query finds the maximum 'habitat_area' (in square kilometers) for the 'habitat_preservation' table.</s>"}
{"text": "<s>[INST] \nHow many pollution incidents have been reported in the Mediterranean sea?\nCREATE TABLE Pollution_reports (report_id INTEGER, incident_location TEXT, reported_date DATE); INSERT INTO Pollution_reports (report_id, incident_location, reported_date) VALUES (1, 'Mediterranean Sea', '2021-01-01'), (2, 'Mediterranean Sea', '2021-02-15'), (3, 'Atlantic Ocean', '2021-03-12'); \n[/INST]\nSELECT COUNT(*) FROM Pollution_reports WHERE incident_location = 'Mediterranean Sea';\nCounts the number of pollution incidents reported in the Mediterranean sea.</s>"}
{"text": "<s>[INST] \nFind the average military equipment sales price for each type of equipment\nCREATE TABLE Equipment (EquipmentID INT, EquipmentType VARCHAR(255), TotalSales DECIMAL(10,2), Quantity INT); INSERT INTO Equipment (EquipmentID, EquipmentType, TotalSales, Quantity) VALUES (1, 'Tank', 5000000, 10), (2, 'Fighter Jet', 20000000, 5), (3, 'Helicopter', 12000000, 8); \n[/INST]\nSELECT EquipmentType, AVG(TotalSales/Quantity) as 'Average Price' FROM Equipment GROUP BY EquipmentType;\nThis query creates a table named Equipment with columns for EquipmentID, EquipmentType, TotalSales, and Quantity. It then inserts 3 rows of data into the table. The SQL query then finds the average military equipment sales price for each type of equipment by dividing the TotalSales by the Quantity and grouping by EquipmentType.</s>"}
{"text": "<s>[INST] \nInsert new cargo records for 'rare earth minerals' with IDs 300, 301, and 302, arrived at port on Jun 15, 2022, Jun 16, 2022, and Jun 17, 2022 respectively\nCREATE SCHEMA if not exists ocean_shipping;CREATE TABLE if not exists ocean_shipping.cargo (id INT, cargo_type VARCHAR(255), arrived_at DATE); \n[/INST]\nINSERT INTO ocean_shipping.cargo (id, cargo_type, arrived_at) VALUES (300, 'rare earth minerals', '2022-06-15'), (301, 'rare earth minerals', '2022-06-16'), (302, 'rare earth minerals', '2022-06-17');\nThe SQL query inserts new records into the cargo table for cargos with the specified IDs and cargo_type, and the given arrived_at dates. This is done using the INSERT INTO statement.</s>"}
{"text": "<s>[INST] \nHow many concerts were held in each city in the last year?\nCREATE TABLE Concerts (location VARCHAR(50), year INT); INSERT INTO Concerts (location, year) VALUES ('Los Angeles', 2021), ('New York', 2021), ('Chicago', 2021); \n[/INST]\nSELECT location, COUNT(*) FROM Concerts WHERE year = (SELECT MAX(year) FROM Concerts) GROUP BY location;\nThis query counts the number of concerts held in each city in the last year by counting the number of records in the Concerts table where the year is equal to the maximum year, and grouping the results by the location column.</s>"}
{"text": "<s>[INST] \nWhat is the most recent delivery date for each vendor in the APAC region, ordered by delivery date?\nCREATE TABLE Vendor (id INT, name VARCHAR, country VARCHAR, last_delivery_date DATE); INSERT INTO Vendor (id, name, country, last_delivery_date) VALUES (1, 'ABC Corp', 'Japan', '2022-01-15'); INSERT INTO Vendor (id, name, country, last_delivery_date) VALUES (2, 'XYZ Inc', 'China', '2022-01-20'); \n[/INST]\nSELECT name, country, MAX(last_delivery_date) as max_delivery_date FROM Vendor WHERE country LIKE 'APAC%' GROUP BY name, country ORDER BY max_delivery_date DESC;\nThis query calculates the most recent delivery date for each vendor in the APAC region, while grouping the data by vendor name and country. It uses the MAX() function with the GROUP BY clause to achieve this.</s>"}
{"text": "<s>[INST] \nUpdate the job title for employee 45 to 'Senior Software Engineer' in the Employee table\nCREATE TABLE Employee (EmployeeID INT PRIMARY KEY, FirstName VARCHAR(50), LastName VARCHAR(50), Department VARCHAR(50), JobTitle VARCHAR(50), LastActivity DATETIME); \n[/INST]\nUPDATE Employee SET JobTitle = 'Senior Software Engineer' WHERE EmployeeID = 45;\nThis query updates the JobTitle field for the record with EmployeeID 45 to 'Senior Software Engineer' in the Employee table.</s>"}
{"text": "<s>[INST] \nGet the top 5 countries with the most players who have earned the most virtual currency in VR games.\nCREATE TABLE Players (PlayerID INT PRIMARY KEY, PlayerName VARCHAR(100), Country VARCHAR(50)); CREATE TABLE VR_Games (GameID INT PRIMARY KEY, PlayerID INT, VirtualCurrency INT); INSERT INTO Players VALUES (1, 'Alice', 'USA'); INSERT INTO VR_Games VALUES (1, 1, 1000); \n[/INST]\nSELECT P.Country, SUM(V.VirtualCurrency) as TotalCurrencyEarned, ROW_NUMBER() OVER (ORDER BY SUM(V.VirtualCurrency) DESC) as Rank FROM Players P JOIN VR_Games V ON P.PlayerID = V.PlayerID GROUP BY P.Country ORDER BY TotalCurrencyEarned DESC, P.Country LIMIT 5;\nThis query selects the country, sums the virtual currency earned from the VR_Games table, and assigns a rank to each country based on the sum of virtual currency earned, joining it with the Players table. It then orders the results by the sum of virtual currency earned and country, and limits the results to the top 5 countries.</s>"}
{"text": "<s>[INST] \nWhat is the minimum donation amount in the \"library_donors\" table?\nCREATE TABLE library_donors (donor_id INT, donation_amount FLOAT, donation_date DATE); INSERT INTO library_donors (donor_id, donation_amount, donation_date) VALUES (1, 50.00, '2021-01-01'), (2, 75.00, '2021-02-01'), (3, 100.00, '2021-03-01'); \n[/INST]\nSELECT MIN(donation_amount) FROM library_donors;\nFind the minimum donation amount in the \"library_donors\" table by using the MIN aggregation function.</s>"}
{"text": "<s>[INST] \nWhat was the maximum cargo weight for vessels in the South Pacific in Q4 of 2022?\nCREATE TABLE Vessels (id INT, name VARCHAR(255), region VARCHAR(255), cargo_weight FLOAT); INSERT INTO Vessels (id, name, region, cargo_weight) VALUES (1, 'VesselA', 'South Pacific', 5000); INSERT INTO Vessels (id, name, region, cargo_weight) VALUES (2, 'VesselB', 'South Pacific', 7000); CREATE TABLE Cargo (vessel_id INT, cargo_weight FLOAT, cargo_date DATE); INSERT INTO Cargo (vessel_id, cargo_weight, cargo_date) VALUES (1, 3000, '2022-10-01'); INSERT INTO Cargo (vessel_id, cargo_weight, cargo_date) VALUES (2, 4000, '2022-11-01'); \n[/INST]\nSELECT MAX(Cargo.cargo_weight) FROM Vessels INNER JOIN Cargo ON Vessels.id = Cargo.vessel_id WHERE Vessels.region = 'South Pacific' AND QUARTER(Cargo.cargo_date) = 4;\nThis query calculates the maximum cargo weight for vessels in the South Pacific in Q4 of 2022. It does this by joining the Vessels table and Cargo table on the vessel_id column, filtering for vessels in the South Pacific and cargo in Q4 of 2022, and then finding the maximum cargo weight.</s>"}
{"text": "<s>[INST] \nWhat is the total number of consumers who prefer cruelty-free cosmetics in the database?\nCREATE TABLE Consumer_Preference (id INT, consumer_id INT, product VARCHAR(255), preference BOOLEAN); INSERT INTO Consumer_Preference (id, consumer_id, product, preference) VALUES (1, 1001, 'Lush Soak Stimulant Bath Bomb', true), (2, 1002, 'The Body Shop Born Lippy Strawberry Lip Balm', true), (3, 1003, 'Estee Lauder Advanced Night Repair', false), (4, 1004, 'Lush Soak Stimulant Bath Bomb', true), (5, 1005, 'The Body Shop Born Lippy Strawberry Lip Balm', false); \n[/INST]\nSELECT COUNT(DISTINCT consumer_id) as total_consumers FROM Consumer_Preference WHERE preference = true;\nThis query calculates the total number of unique consumers who prefer cruelty-free cosmetics in the Consumer_Preference table. It filters the rows where the preference column is true, and calculates the count of distinct consumer_id for the filtered rows.</s>"}
{"text": "<s>[INST] \nWhat is the total number of multimodal trips in the transportation system of Seoul, South Korea?\nCREATE TABLE multimodal_trips (id INT, city VARCHAR(255), country VARCHAR(255), trip_type VARCHAR(255), quantity INT); INSERT INTO multimodal_trips (id, city, country, trip_type, quantity) VALUES (1, 'Seoul', 'South Korea', 'Bike-Subway', 15000), (2, 'Seoul', 'South Korea', 'Bus-Bike', 20000); \n[/INST]\nSELECT SUM(quantity) FROM multimodal_trips WHERE city = 'Seoul' AND country = 'South Korea';\nThis query calculates the total number of multimodal trips in the transportation system of Seoul, South Korea by summing up the quantity column in the multimodal_trips table where the city is Seoul and the country is South Korea.</s>"}
{"text": "<s>[INST] \nFind the minimum height of an astronaut.\nCREATE TABLE MedicalProfiles(astronaut_id INT, height INT, weight INT); \n[/INST]\nSELECT MIN(height) FROM MedicalProfiles;\nThis query finds the minimum height of an astronaut by selecting the minimum 'height' value from the 'MedicalProfiles' table.</s>"}
{"text": "<s>[INST] \nWhat is the total CO2 emission in tons for companies with a revenue over 1 billion in the last 5 years?\nCREATE TABLE CO2Emissions (company VARCHAR(255), revenue INT, year INT, co2_emission FLOAT); INSERT INTO CO2Emissions (company, revenue, year, co2_emission) VALUES ('ABC Corp', 2000000000, 2018, 5000), ('XYZ Inc', 3000000000, 2019, 7000), ('DEF Industries', 1500000000, 2020, 3000); \n[/INST]\nSELECT SUM(co2_emission) FROM CO2Emissions WHERE revenue > 1000000000 AND year >= 2016 GROUP BY year;\nThis query calculates the total CO2 emission in tons for companies in the CO2Emissions table with a revenue over 1 billion in the last 5 years. It uses the SUM() aggregation function to add up the CO2 emissions and the WHERE clause to filter the results to only include companies with a revenue over 1 billion and years after 2016. The GROUP BY clause is used to group the results by year.</s>"}
{"text": "<s>[INST] \nWhat is the total installed capacity (in MW) of all hydro power projects that were completed after the year 2010?\nCREATE TABLE projects (id INT, name TEXT, completed_year INT, capacity_mw FLOAT); INSERT INTO projects (id, name, completed_year, capacity_mw) VALUES (1, 'Hydro Project 1', 2012, 200.5); INSERT INTO projects (id, name, completed_year, capacity_mw) VALUES (2, 'Hydro Project 2', 2005, 150.3); \n[/INST]\nSELECT SUM(capacity_mw) FROM projects WHERE type = 'hydro' AND completed_year > 2010;\nThe SQL query calculates the total installed capacity of all hydro power projects that were completed after the year 2010 by summing up the capacity_mw values in the projects table where the type is 'hydro' and the completed_year is greater than 2010.</s>"}
{"text": "<s>[INST] \nWhich states have the highest veteran employment rates in the defense industry in Q1 2022?\nCREATE TABLE Veteran_Employment (employment_id INT, industry TEXT, state TEXT, employment_rate FLOAT, quarter INT, year INT); INSERT INTO Veteran_Employment (employment_id, industry, state, employment_rate, quarter, year) VALUES (1, 'Defense', 'California', 0.15, 1, 2022), (2, 'Defense', 'Texas', 0.14, 1, 2022); \n[/INST]\nSELECT state, AVG(employment_rate) as avg_rate FROM Veteran_Employment WHERE industry = 'Defense' AND quarter = 1 AND year = 2022 GROUP BY state ORDER BY avg_rate DESC;\nThe SQL query identifies the states with the highest veteran employment rates in the defense industry in Q1 2022 by grouping by state and averaging employment_rate where the industry is Defense, quarter is 1 and year is 2022 and ordering by the average employment_rate in descending order.</s>"}
{"text": "<s>[INST] \nCalculate the percentage of artworks by each artist in Rome that have a guest rating of 4.5 or higher, and rank them in descending order of percentage.\nCREATE TABLE Artists (id INT, name VARCHAR(30)); CREATE TABLE Works (id INT, artist_id INT, title VARCHAR(50)); CREATE TABLE Exhibitions (id INT, work_id INT, city VARCHAR(20), guest_rating FLOAT, revenue FLOAT); INSERT INTO Exhibitions (id, work_id, city, guest_rating, revenue) VALUES (1, 1, 'Rome', 4.6, 5000), (2, 2, 'Rome', 4.3, 6000), (3, 3, 'Rome', 4.5, 7000); \n[/INST]\nSELECT a.name, COUNT(e.work_id) as total_works, COUNT(CASE WHEN e.guest_rating >= 4.5 THEN e.work_id END) as high_rating_works, 100.0 * COUNT(CASE WHEN e.guest_rating >= 4.5 THEN e.work_id END) / COUNT(e.work_id) as percentage, RANK() OVER (PARTITION BY a.name ORDER BY 100.0 * COUNT(CASE WHEN e.guest_rating >= 4.5 THEN e.work_id END) / COUNT(e.work_id) DESC) as rank FROM Artists a JOIN Works w ON a.id = w.artist_id JOIN Exhibitions e ON w.id = e.work_id WHERE e.city = 'Rome' GROUP BY a.name, rank ORDER BY percentage DESC;\nThis query calculates the percentage of artworks by each artist in Rome that have a guest rating of 4.5 or higher and ranks them in descending order of percentage. It joins the Artists, Works, and Exhibitions tables on their respective IDs, groups the data by artist name and rank, calculates the total number of works and the number of works with a guest rating of 4.5 or higher for each group, and assigns a rank to each group based on the percentage of high-rated works in descending order. The RANK() function is used to assign the same rank to groups with the same percentage of high-rated works.</s>"}
{"text": "<s>[INST] \nPresent community health worker and cultural competency training data\nCREATE TABLE CommunityHealthWorker (WorkerID INT PRIMARY KEY, Name TEXT, Language TEXT, Location TEXT); \n[/INST]\nSELECT CommunityHealthWorker.Name, CulturalCompetencyTraining.TrainingName, CulturalCompetencyTraining.TrainingDate FROM CommunityHealthWorker FULL OUTER JOIN CulturalCompetencyTraining ON CommunityHealthWorker.WorkerID = CulturalCompetencyTraining.MHW_ID;\nJoin 'CommunityHealthWorker' and 'CulturalCompetencyTraining' tables on WorkerID, using a FULL OUTER join to retrieve all names from 'CommunityHealthWorker' and all trainings from 'CulturalCompetencyTraining'.</s>"}
{"text": "<s>[INST] \nHow many humanitarian assistance missions were conducted by each unit in Q1 of 2019?\nCREATE TABLE HumanitarianAssistanceByQuarter (Quarter VARCHAR(10), Unit VARCHAR(50), Missions INT); INSERT INTO HumanitarianAssistanceByQuarter (Quarter, Unit, Missions) VALUES ('Q1 2019', 'Unit A', 4), ('Q1 2019', 'Unit B', 5), ('Q1 2019', 'Unit C', 6); \n[/INST]\nSELECT Unit, SUM(Missions) FROM HumanitarianAssistanceByQuarter WHERE Quarter = 'Q1 2019' GROUP BY Unit;\nThis query calculates the total number of humanitarian assistance missions conducted by each unit in Q1 of 2019. It groups the data by unit and calculates the total number of missions for each group.</s>"}
{"text": "<s>[INST] \nWhat are the names and launch dates of satellites launched by private companies?\nCREATE TABLE private_satellites (id INT, name VARCHAR(255), launch_date DATE, company VARCHAR(255), PRIMARY KEY(id)); INSERT INTO private_satellites (id, name, launch_date, company) VALUES (1, 'Satellite4', '2022-03-20', 'CompanyA'), (2, 'Satellite5', '2023-01-05', 'CompanyB'), (3, 'Satellite6', '2021-12-14', 'CompanyA'); \n[/INST]\nSELECT private_satellites.name, private_satellites.launch_date FROM private_satellites;\nThis query lists the names and launch dates of satellites launched by private companies by simply selecting all rows from the private_satellites table.</s>"}
{"text": "<s>[INST] \nWhat is the cultural competency score of healthcare providers in Texas?\nCREATE TABLE healthcare_providers (provider_id INT, name TEXT, state TEXT, score INT); INSERT INTO healthcare_providers (provider_id, name, state, score) VALUES (1, 'Dr. Smith', 'TX', 90), (2, 'Dr. Johnson', 'CA', 85), (3, 'Dr. Rodriguez', 'TX', 95), (4, 'Dr. Lee', 'NY', 80); \n[/INST]\nSELECT state, AVG(score) FROM healthcare_providers WHERE state = 'TX' GROUP BY state;\nThe SQL query calculates the average cultural competency score of healthcare providers in Texas. It filters the records for the state 'TX' and then calculates the average score for the filtered records using the AVG function.</s>"}
{"text": "<s>[INST] \nIdentify the top 5 volunteers with the most volunteer hours in 2022?\nCREATE TABLE volunteers (id INT, name VARCHAR(50), volunteer_hours INT, volunteer_date DATE); INSERT INTO volunteers (id, name, volunteer_hours, volunteer_date) VALUES (1, 'John Doe', 10, '2022-01-05'), (2, 'Jane Smith', 15, '2022-01-05'), (3, 'Bob Johnson', 8, '2022-01-05'), (4, 'John Doe', 12, '2022-02-10'), (5, 'Jane Smith', 18, '2022-02-10'), (6, 'Bob Johnson', 20, '2022-02-10'); \n[/INST]\nSELECT name, SUM(volunteer_hours) as total_hours FROM volunteers WHERE volunteer_date >= '2022-01-01' GROUP BY name ORDER BY total_hours DESC LIMIT 5;\nThe SQL query identifies the top 5 volunteers with the most volunteer hours in 2022 by filtering records with a volunteer_date greater than or equal to '2022-01-01' and calculating the sum of volunteer_hours for each name using GROUP BY. It then orders the result by total_hours in descending order and limits the result to 5 records.</s>"}
{"text": "<s>[INST] \nHow many art pieces were created by artists from underrepresented communities in the last decade?\nCREATE TABLE art_pieces_identity (id INT, year INT, artist_name VARCHAR(50), art_type VARCHAR(50), underrepresented_community VARCHAR(50)); \n[/INST]\nSELECT COUNT(*) as total_art_pieces FROM art_pieces_identity WHERE year >= 2012 AND underrepresented_community IS NOT NULL;\nThis query counts the number of art pieces created by artists from underrepresented communities in the last decade by selecting the count of records where the year is greater than or equal to 2012 and the underrepresented community field is not null.</s>"}
{"text": "<s>[INST] \nWhat is the maximum donation amount given by any individual in the first quarter of 2022?\nCREATE TABLE donors (donor_id INT, donation_amount DECIMAL(10,2), donation_date DATE); INSERT INTO donors (donor_id, donation_amount, donation_date) VALUES (1, 100, '2022-01-05'), (2, 250, '2022-03-20'), (3, 50, '2021-12-31'), (4, 75, '2022-11-28'); \n[/INST]\nSELECT MAX(donation_amount) FROM donors WHERE donation_date >= '2022-01-01' AND donation_date < '2022-04-01';\nWe filter the records where the donation_date falls within the first quarter of 2022. Then, we calculate the maximum donation amount given by any individual during this period.</s>"}
{"text": "<s>[INST] \nHow many coal mines are there in Germany with productivity above 1200?\nCREATE TABLE mine (id INT, name TEXT, location TEXT, mineral TEXT, productivity INT); INSERT INTO mine (id, name, location, mineral, productivity) VALUES (1, 'Ruhrkohle AG', 'Germany', 'Coal', 1500), (2, 'RAG Anthrazit', 'Germany', 'Coal', 1000); \n[/INST]\nSELECT COUNT(*) FROM mine WHERE mineral = 'Coal' AND location = 'Germany' AND productivity > 1200;\nCount the number of coal mines in Germany having productivity greater than 1200 by filtering the 'mine' table for the given conditions.</s>"}
{"text": "<s>[INST] \nInsert a new record into the 'renewable_energy' table with a 'source' value of 'Wind', 'capacity_mw' value of 50, and 'country' value of 'Germany'\nCREATE TABLE renewable_energy (id INT PRIMARY KEY, source VARCHAR(255), capacity_mw FLOAT, country VARCHAR(255)); \n[/INST]\nINSERT INTO renewable_energy (source, capacity_mw, country) VALUES ('Wind', 50, 'Germany');\nThe SQL query inserts a new record into the 'renewable_energy' table with 'source' value of 'Wind', 'capacity_mw' value of 50, and 'country' value of 'Germany'.</s>"}
{"text": "<s>[INST] \nWhat is the total number of artifacts found in each country?\nCREATE TABLE ArtifactsByCountry (Country TEXT, ArtifactID INT, Quantity INT); INSERT INTO ArtifactsByCountry (Country, ArtifactID, Quantity) VALUES ('Italy', 1, 1), ('Italy', 2, 1), ('France', 3, 1), ('Germany', 4, 1), ('Italy', 5, 1); \n[/INST]\nSELECT Country, SUM(Quantity) FROM ArtifactsByCountry GROUP BY Country;\nGroup ArtifactsByCountry by Country, sum Quantity.</s>"}
{"text": "<s>[INST] \nFind the bottom 2 cuisine types with the lowest average calories per dish, excluding the 'Salad' type.\nCREATE TABLE dishes (dish_id INT, name VARCHAR(255), calories INT, cuisine_type VARCHAR(255)); INSERT INTO dishes (dish_id, name, calories, cuisine_type) VALUES (1, 'Pizza', 300, 'Italian'), (2, 'Pasta', 400, 'Italian'), (3, 'Salad', 200, 'Salad'), (4, 'Burger', 500, 'American'), (5, 'Sushi', 250, 'Japanese'), (6, 'Curry', 350, 'Indian'); \n[/INST]\nSELECT cuisine_type, AVG(calories) AS avg_calories FROM dishes WHERE cuisine_type != 'Salad' GROUP BY cuisine_type ORDER BY avg_calories LIMIT 2;\nFind the bottom 2 cuisine types with the lowest average calories per dish, excluding the 'Salad' type. The query groups the dishes by cuisine type and filters for dishes that are not of the 'Salad' type, then calculates the average calories for each cuisine type, and orders the results by the average calories in ascending order, limiting the results to the bottom 2.</s>"}
{"text": "<s>[INST] \nShow total installed capacity of solar projects in 'africa'\nCREATE TABLE solar_projects (id INT PRIMARY KEY, project_name VARCHAR(255), location VARCHAR(255), capacity_mw FLOAT, completion_date DATE); \n[/INST]\nSELECT SUM(capacity_mw) FROM solar_projects WHERE location = 'africa';\nThis SQL query calculates the sum of 'capacity_mw' values from the 'solar_projects' table where the 'location' column value is 'africa'.</s>"}
{"text": "<s>[INST] \nShow the total data usage for mobile and broadband subscribers in 'rural' areas, excluding those with billing issues in the past 6 months.\nCREATE TABLE Subscribers (SubscriberID int, DataUsage int, Service varchar(10), Area varchar(10), BillingIssue bit); INSERT INTO Subscribers (SubscriberID, DataUsage, Service, Area, BillingIssue) VALUES (1, 20000, 'mobile', 'rural', 0), (2, 30000, 'broadband', 'urban', 1), (3, 15000, 'mobile', 'rural', 1), (4, 25000, 'broadband', 'urban', 0), (5, 35000, 'broadband', 'rural', 0); \n[/INST]\nSELECT DataUsage FROM Subscribers WHERE Area = 'rural' AND BillingIssue = 0 AND Service IN ('mobile', 'broadband');\nSelects DataUsage column values where Area is 'rural', BillingIssue is 0, and Service is either 'mobile' or 'broadband'.</s>"}
{"text": "<s>[INST] \nWhat is the minimum price of organic cosmetic products in Portugal?\nCREATE TABLE OrganicProducts (product VARCHAR(255), country VARCHAR(255), price DECIMAL(10,2)); INSERT INTO OrganicProducts (product, country, price) VALUES ('Lip Balm', 'Portugal', 5), ('Face Mask', 'Portugal', 10), ('Hand Cream', 'Portugal', 15); \n[/INST]\nSELECT MIN(price) FROM OrganicProducts WHERE country = 'Portugal';\nThis query finds the minimum price of organic cosmetic products in Portugal by finding the minimum price values in the OrganicProducts table where the country is 'Portugal'.</s>"}
{"text": "<s>[INST] \nFind the number of unique departments that have employees hired in 2021\nCREATE TABLE hiring (id INT, employee_id INT, hire_date DATE, department VARCHAR(255)); INSERT INTO hiring (id, employee_id, hire_date, department) VALUES (1, 101, '2020-01-02', 'HR'); INSERT INTO hiring (id, employee_id, hire_date, department) VALUES (2, 102, '2019-12-20', 'IT'); \n[/INST]\nSELECT COUNT(DISTINCT department) FROM hiring WHERE YEAR(hire_date) = 2021;\nThis query counts the number of unique records in the 'department' column from the 'hiring' table where the hire_date's year is 2021.</s>"}
{"text": "<s>[INST] \nHow many traffic violations occurred in each community policing sector?\nCREATE TABLE traffic_violations (id INT, violation_type VARCHAR(50), sector VARCHAR(50)); INSERT INTO traffic_violations (id, violation_type, sector) VALUES (1, 'Speeding', 'Sector A'), (2, 'Running Red Light', 'Sector B'), (3, 'Illegal Parking', 'Sector C'); \n[/INST]\nSELECT sector, COUNT(*) FROM traffic_violations GROUP BY sector;\nThe SQL query groups the traffic violations by community policing sector and counts the number of violations in each sector.</s>"}
{"text": "<s>[INST] \nWhat was the total quantity of non-organic silk clothing items manufactured in China in Q1 2022?\nCREATE TABLE manufacturing (item_code VARCHAR(20), item_name VARCHAR(50), category VARCHAR(20), country VARCHAR(50), quantity INT, is_organic BOOLEAN, manufacturing_date DATE); \n[/INST]\nSELECT SUM(quantity) as total_quantity FROM manufacturing WHERE category = 'clothing' AND country = 'China' AND is_organic = FALSE AND manufacturing_date BETWEEN '2022-01-01' AND '2022-03-31';\nThis SQL query calculates the total quantity of non-organic silk clothing items manufactured in China in Q1 2022. It filters the manufacturing table by category, country, is_organic, and manufacturing date, and then calculates the sum of the quantity for the specified time period (Q1 2022) where is_organic is false.</s>"}
{"text": "<s>[INST] \nFind the number of tourists who traveled to Africa but not to Egypt or Morocco in 2023.\nCREATE TABLE africa_visitors (id INT, country VARCHAR(10), arrival_date DATE); INSERT INTO africa_visitors (id, country, arrival_date) VALUES (1, 'South Africa', '2023-01-01'); INSERT INTO africa_visitors (id, country, arrival_date) VALUES (2, 'Egypt', '2023-02-15'); INSERT INTO africa_visitors (id, country, arrival_date) VALUES (3, 'Morocco', '2023-03-20'); INSERT INTO africa_visitors (id, country, arrival_date) VALUES (4, 'Tanzania', '2023-04-01'); \n[/INST]\nSELECT COUNT(*) FROM africa_visitors WHERE country NOT IN ('Egypt', 'Morocco');\nThis query filters the africa_visitors table to only include rows where the country is not 'Egypt' or 'Morocco'. It then counts the number of rows in the filtered dataset.</s>"}
{"text": "<s>[INST] \nWhat is the average energy consumption in commercial buildings in the state of New York, considering only buildings with a consumption lower than 12000 kWh?\nCREATE TABLE CommercialBuildings (id INT, state VARCHAR(20), energy_consumption INT); INSERT INTO CommercialBuildings (id, state, energy_consumption) VALUES (1, 'New York', 10000), (2, 'New York', 11000), (3, 'New York', 13000); \n[/INST]\nSELECT AVG(energy_consumption) FROM CommercialBuildings WHERE state = 'New York' AND energy_consumption < 12000;\nCalculate the average energy consumption in commercial buildings in New York, where consumption is lower than 12000 kWh.</s>"}
{"text": "<s>[INST] \nHow many times did 'Restaurant B' in 'New York' change its menu prices in the year 2021?\nCREATE TABLE menu_engineering (restaurant_id INT, price DECIMAL(10,2), change_date DATE); INSERT INTO menu_engineering (restaurant_id, price, change_date) VALUES (2, 12.99, '2021-01-01'), (2, 13.49, '2021-06-01'), (2, 14.99, '2021-12-01'); \n[/INST]\nSELECT COUNT(*) FROM menu_engineering WHERE restaurant_id = 2 AND change_date BETWEEN '2021-01-01' AND '2021-12-31';\nThe SQL query counts the number of rows in the menu_engineering table with a restaurant_id value of 2 and a change_date within the year 2021.</s>"}
{"text": "<s>[INST] \nHow many ethical suppliers are there in the United States and how many products do they offer?\nCREATE TABLE suppliers (supplier_id INT, name VARCHAR(100), country VARCHAR(50), ethical_practices BOOLEAN);CREATE TABLE products (product_id INT, name VARCHAR(100), category VARCHAR(50), price DECIMAL(5,2), supplier_id INT);CREATE VIEW ethical_suppliers AS SELECT supplier_id, COUNT(*) as ethical_products_count FROM products WHERE ethical_practices = true GROUP BY supplier_id; \n[/INST]\nSELECT COUNT(DISTINCT suppliers.supplier_id) as ethical_supplier_count, SUM(ethical_suppliers.ethical_products_count) as total_ethical_products FROM suppliers INNER JOIN ethical_suppliers ON suppliers.supplier_id = ethical_suppliers.supplier_id WHERE suppliers.country = 'United States';\nThis SQL query retrieves the number of ethical suppliers in the United States and the total number of ethical products they offer. It starts by joining the suppliers table with the ethical_suppliers view on supplier_id. The WHERE clause filters the results for suppliers from the United States. The COUNT(DISTINCT) function counts the number of distinct ethical suppliers, while the SUM function calculates the total number of ethical products. The ethical_suppliers view counts the number of ethical products per supplier, while the subquery in the SELECT clause calculates the total number of ethical products across all suppliers.</s>"}
{"text": "<s>[INST] \nWhat is the total revenue for each menu category in January 2022?\nCREATE TABLE menu_sales (menu_category VARCHAR(255), sale_date DATE, revenue INT); INSERT INTO menu_sales (menu_category, sale_date, revenue) VALUES ('Appetizers', '2022-01-01', 1200), ('Appetizers', '2022-01-02', 1500), ('Entrees', '2022-01-01', 3000), ('Entrees', '2022-01-02', 3500); \n[/INST]\nSELECT menu_category, SUM(revenue) FROM menu_sales WHERE sale_date BETWEEN '2022-01-01' AND '2022-01-31' GROUP BY menu_category;\nThis query calculates the total revenue for each menu category in January 2022. It does this by summing the revenue for each menu category where the sale date is within January 2022 and grouping the results by menu category.</s>"}
{"text": "<s>[INST] \nList all social impact investments in the Renewable Energy sector with ESG scores below 70, ordered by investment date and ESG score, including only investments made by Canadian investors.\nCREATE TABLE SocialImpactInvestments (InvestmentID INT, InvestmentDate DATE, Sector VARCHAR(20), ESGScore INT, InvestorCountry VARCHAR(20)); INSERT INTO SocialImpactInvestments VALUES (1, '2021-01-01', 'Renewable Energy', 65, 'Canada'), (2, '2021-02-01', 'Healthcare', 75, 'Germany'), (3, '2021-03-01', 'Renewable Energy', 80, 'Canada'); \n[/INST]\nSELECT * FROM SocialImpactInvestments WHERE Sector = 'Renewable Energy' AND ESGScore < 70 AND InvestorCountry = 'Canada' ORDER BY InvestmentDate, ESGScore ASC;\nThis SQL query filters the SocialImpactInvestments table to only include rows where the Sector is Renewable Energy, the ESG score is below 70, and the InvestorCountry is Canada. It then orders the results by investment date and ESG score in ascending order.</s>"}
{"text": "<s>[INST] \nInsert a new author 'Charlie' with ID 4, affiliation 'IBM Watson'.\nCREATE TABLE authors (author_id INT, name VARCHAR(50), affiliation VARCHAR(100)); INSERT INTO authors (author_id, name, affiliation) VALUES (1, 'Alice', 'University of Oxford'); INSERT INTO authors (author_id, name, affiliation) VALUES (2, 'Bob', 'Google Research'); \n[/INST]\nINSERT INTO authors (author_id, name, affiliation) VALUES (4, 'Charlie', 'IBM Watson');\nThis query inserts a new row into the authors table with the specified values for each column. It uses the INSERT INTO statement to add a new row to the table.</s>"}
{"text": "<s>[INST] \nHow many Shariah-compliant loans were issued in each month of 2022?\nCREATE TABLE shariah_compliant_loans (id INT, customer_name VARCHAR(50), amount DECIMAL(10, 2), issue_date DATE); INSERT INTO shariah_compliant_loans (id, customer_name, amount, issue_date) VALUES (1, 'Ahmed', 5000, '2022-01-01'), (2, 'Fatima', 3000, '2022-02-14'), (3, 'Hamza', 7000, '2022-03-31'); \n[/INST]\nSELECT MONTH(issue_date), COUNT(*) FROM shariah_compliant_loans WHERE issue_date BETWEEN '2022-01-01' AND '2022-12-31' GROUP BY MONTH(issue_date);\nThe SQL query counts the number of Shariah-compliant loans issued in each month of 2022 by grouping the issue_date column in the shariah_compliant_loans table by month and counting the number of rows in each group.</s>"}
{"text": "<s>[INST] \nDelete all records related to 'Product F' in the chemical_products and safety_protocols tables.\nCREATE TABLE chemical_products (id INT, name TEXT, category TEXT); INSERT INTO chemical_products (id, name, category) VALUES (1, 'Product A', 'Category X'), (2, 'Product B', 'Category Y'), (3, 'Product C', 'Category Z'), (4, 'Product D', 'Category W'), (5, 'Product F', 'Category V'); CREATE TABLE safety_protocols (id INT, product_id INT, plant_id INT, protocol TEXT); INSERT INTO safety_protocols (id, product_id, plant_id, protocol) VALUES (1, 1, 1, 'Protocol 1'), (2, 2, 2, 'Protocol 2'), (3, 3, 3, 'Protocol 3'), (4, 4, 4, 'Protocol 4'), (5, 5, 5, 'Protocol 5'); \n[/INST]\nDELETE FROM safety_protocols WHERE product_id IN (SELECT id FROM chemical_products WHERE name = 'Product F'); DELETE FROM chemical_products WHERE name = 'Product F';\nThis query deletes all records related to 'Product F' in the chemical_products and safety_protocols tables. The first DELETE statement removes rows from the safety_protocols table with a product_id that matches the id of the records in the chemical_products table with the name 'Product F'. The second DELETE statement removes the row with the name 'Product F' from the chemical_products table.</s>"}
{"text": "<s>[INST] \nShow companies founded in 2018\nCREATE TABLE startup (id INT, name TEXT, founding_year INT, founder_gender TEXT); \n[/INST]\nSELECT name FROM startup WHERE founding_year = 2018;\nThis query retrieves the names of companies founded in the year 2018. It does this by selecting all rows in the startup table where the founding_year is 2018 and then returning only the name column using the SELECT statement.</s>"}
{"text": "<s>[INST] \nHow many social enterprises in the Energy sector have a negative net income?\nCREATE TABLE social_enterprises_energy (id INT, name TEXT, sector TEXT, net_income FLOAT); INSERT INTO social_enterprises_energy (id, name, sector, net_income) VALUES (1, 'Renewable Energy Startup', 'Energy', -25000.0), (2, 'Energy Efficiency Nonprofit', 'Energy', 30000.0); \n[/INST]\nSELECT COUNT(*) FROM social_enterprises_energy WHERE sector = 'Energy' AND net_income < 0;\nThis SQL query finds the number of social enterprises in the Energy sector that have a negative net income by using the COUNT function on all rows (*) and filtering the rows with the WHERE clause for the Energy sector and negative net income values.</s>"}
{"text": "<s>[INST] \nList all attorneys who have not handled any cases?\nCREATE TABLE attorneys (attorney_id INT, name VARCHAR(50)); CREATE TABLE cases (case_id INT, attorney_id INT); INSERT INTO attorneys (attorney_id, name) VALUES (1, 'Smith'), (2, 'Johnson'), (3, 'Williams'), (4, 'Brown'); INSERT INTO cases (case_id, attorney_id) VALUES (1, 2), (2, 1), (3, 3), (4, 2); \n[/INST]\nSELECT attorneys.name FROM attorneys LEFT JOIN cases ON attorneys.attorney_id = cases.attorney_id WHERE cases.attorney_id IS NULL;\nThis query lists all attorneys who have not handled any cases. It does this by performing a left join between attorneys and cases, and then filtering where the attorney_id from cases is null.</s>"}
{"text": "<s>[INST] \nWhat is the distribution of community health workers by training type?\nCREATE TABLE CommunityHealthWorkerTrainings (WorkerID INT, Training VARCHAR(50)); INSERT INTO CommunityHealthWorkerTrainings (WorkerID, Training) VALUES (1, 'Cultural Competency'), (2, 'Mental Health First Aid'), (3, 'Crisis Prevention'), (4, 'Cultural Competency'), (5, 'Motivational Interviewing'); \n[/INST]\nSELECT Training, COUNT(*) as NumWorkers FROM CommunityHealthWorkerTrainings GROUP BY Training;\nThis query groups the CommunityHealthWorkerTrainings table by Training, and for each Training it counts the number of community health workers who have received that training.</s>"}
{"text": "<s>[INST] \nWhich marine species were found in 'Australia' in 2020 and what pollution control initiatives were implemented there between 2015 and 2020?\nCREATE TABLE Species_3 (id INT, name VARCHAR(255), region VARCHAR(255), year INT); INSERT INTO Species_3 (id, name, region, year) VALUES (1, 'Kangaroo Fish', 'Australia', 2020); INSERT INTO Species_3 (id, name, region, year) VALUES (2, 'Blue-ringed Octopus', 'Australia', 2020); CREATE TABLE Initiatives_3 (id INT, initiative VARCHAR(255), region VARCHAR(255), start_year INT, end_year INT); INSERT INTO Initiatives_3 (id, initiative, region, start_year, end_year) VALUES (1, 'Coral Reef Restoration', 'Australia', 2015, 2020); INSERT INTO Initiatives_3 (id, initiative, region, start_year, end_year) VALUES (2, 'Marine Debris Removal', 'Australia', 2016, 2020); INSERT INTO Initiatives_3 (id, initiative, region, start_year, end_year) VALUES (3, 'Coastal Cleanups', 'Australia', 2017, 2020); \n[/INST]\nSELECT name FROM Species_3 WHERE region = 'Australia' AND year = 2020 UNION SELECT initiative FROM Initiatives_3 WHERE region = 'Australia' AND start_year BETWEEN 2015 AND 2020;\nThis query uses the UNION operator to return the names of marine species found in 'Australia' in 2020 and the pollution control initiatives implemented there between 2015 and 2020.</s>"}
{"text": "<s>[INST] \nWhat is the minimum age of policyholders who have a life insurance policy?\nCREATE TABLE LifePolicies (PolicyholderID int); CREATE TABLE Policyholders (PolicyholderID int, Age int); INSERT INTO LifePolicies (PolicyholderID) VALUES (1); INSERT INTO LifePolicies (PolicyholderID) VALUES (2); INSERT INTO Policyholders (PolicyholderID, Age) VALUES (1, 40); INSERT INTO Policyholders (PolicyholderID, Age) VALUES (2, 50); \n[/INST]\nSELECT MIN(Age) FROM Policyholders INNER JOIN LifePolicies ON Policyholders.PolicyholderID = LifePolicies.PolicyholderID;\nThe SQL query finds the minimum age of policyholders who have a life insurance policy by performing an INNER JOIN between the 'Policyholders' and 'LifePolicies' tables, based on the matching 'PolicyholderID', and using the MIN function on the 'Age' column.</s>"}
{"text": "<s>[INST] \nWhat is the maximum permit fee for commercial buildings in the state of Texas?\nCREATE TABLE building_permit (permit_id INT, building_type VARCHAR(50), fee DECIMAL(10,2), city VARCHAR(50), state VARCHAR(50)); INSERT INTO building_permit (permit_id, building_type, fee, city, state) VALUES (1, 'Residential', 5000, 'Seattle', 'Washington'), (2, 'Commercial', 12000, 'Dallas', 'Texas'), (3, 'Residential', 4500, 'Los Angeles', 'California'); \n[/INST]\nSELECT MAX(fee) FROM building_permit WHERE building_type = 'Commercial' AND state = 'Texas';\nThis query calculates the maximum permit fee for commercial buildings in Texas by filtering the table based on the building type and state and then finding the maximum fee using the MAX function.</s>"}
{"text": "<s>[INST] \nWhat is the total number of military personnel per country in the South American region with service 'Navy'?\nCREATE TABLE MilitaryPersonnel (Id INT, Country VARCHAR(50), Service VARCHAR(50), Quantity INT);INSERT INTO MilitaryPersonnel (Id, Country, Service, Quantity) VALUES (1, 'Brazil', 'Army', 250000), (2, 'Argentina', 'Navy', 50000), (3, 'Colombia', 'Air Force', 40000), (4, 'Peru', 'Navy', 30000); \n[/INST]\nSELECT Country, SUM(Quantity) AS TotalPersonnel FROM MilitaryPersonnel WHERE Country IN ('Brazil', 'Argentina', 'Colombia', 'Peru') AND Service = 'Navy' GROUP BY Country;\nThe SQL query calculates the total number of military personnel per country in the South American region with service 'Navy' by summing the Quantity column, filtering for personnel with the service 'Navy', and grouping by Country.</s>"}
{"text": "<s>[INST] \nWhat is the name of the artist with the highest average ticket price for their exhibitions?\nCREATE TABLE ArtistExhibitions (id INT, artist_id INT, city VARCHAR(20), price DECIMAL(5,2)); INSERT INTO ArtistExhibitions (id, artist_id, city, price) VALUES (1, 1, 'Paris', 30.00), (2, 1, 'Rome', 25.00), (3, 2, 'Paris', 15.00), (4, 2, 'London', 10.00); CREATE TABLE Artists (id INT, name VARCHAR(30)); INSERT INTO Artists (id, name) VALUES (1, 'Claude Monet'), (2, 'Francisco Goya'); \n[/INST]\nSELECT Artists.name, AVG(ArtistExhibitions.price) AS avg_price FROM Artists JOIN ArtistExhibitions ON Artists.id = ArtistExhibitions.artist_id GROUP BY Artists.name ORDER BY avg_price DESC LIMIT 1;\nIdentify the artist with the highest average ticket price for their exhibitions by performing a JOIN on the Artists and ArtistExhibitions tables. Calculate the average price for each artist and use the ORDER BY and LIMIT clauses to return only the artist with the highest average price.</s>"}
{"text": "<s>[INST] \nGet player's daily playtime for the last 7 days\nCREATE TABLE players (player_id INT, name VARCHAR(100)); CREATE TABLE vr_sessions (session_id INT, player_id INT, game VARCHAR(50), duration INT, session_date DATE); \n[/INST]\nSELECT p.name, g.name AS game_name, AVG(duration / 60) AS avg_daily_playtime_minutes FROM players p JOIN vr_sessions s ON p.player_id = s.player_id JOIN (SELECT DISTINCT player_id, game FROM vr_sessions WHERE game = 'GameX') g ON p.player_id = g.player_id WHERE s.session_date BETWEEN CURRENT_DATE - 7 AND CURRENT_DATE AND g.game = 'GameX' GROUP BY p.name, g.name, s.session_date ORDER BY s.session_date;\nThis query calculates the average daily playtime (in minutes) for each player in a specific game, 'GameX', for the last 7 days. The query uses a subquery to filter the vr_sessions table for the specific game, then joins the players and filtered vr_sessions tables and calculates the average playtime for each day, grouped by player and game.</s>"}
{"text": "<s>[INST] \nWhat percentage of cosmetics contains palm oil and is not vegan?\nCREATE TABLE Cosmetics (id INT, name TEXT, has_palm_oil BOOLEAN, is_vegan BOOLEAN); INSERT INTO Cosmetics (id, name, has_palm_oil, is_vegan) VALUES (1, 'Moisturizer', true, false), (2, 'Eyeshadow', false, true); \n[/INST]\nSELECT (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM Cosmetics)) AS percentage FROM Cosmetics WHERE has_palm_oil = true AND is_vegan = false;\nCalculates the percentage of cosmetics containing palm oil and not being vegan by dividing the count of such cosmetics by the total count of cosmetics.</s>"}
{"text": "<s>[INST] \nWhat is the total number of visitors for 'Impressionist Art' and 'Contemporary Art' exhibitions?\nCREATE TABLE Exhibitions (exhibition_id INT, name VARCHAR(100), visitor_count INT); INSERT INTO Exhibitions (exhibition_id, name, visitor_count) VALUES (1, 'Impressionist Art', 800), (2, 'Contemporary Art', 600); \n[/INST]\nSELECT SUM(visitor_count) FROM Exhibitions WHERE name IN ('Impressionist Art', 'Contemporary Art');\nThis query calculates the total number of visits for the 'Impressionist Art' and 'Contemporary Art' exhibitions by summing up their visitor_counts.</s>"}
{"text": "<s>[INST] \nWhat is the percentage of AI safety incidents related to data privacy in each country?\nCREATE TABLE safety_incidents (incident_id INT, country VARCHAR(50), incident_type VARCHAR(50)); INSERT INTO safety_incidents (incident_id, country, incident_type) VALUES (1, 'CountryA', 'Data Privacy'), (2, 'CountryB', 'Model Malfunction'), (3, 'CountryA', 'Data Privacy'); \n[/INST]\nSELECT country, COUNT(*) * 100.0 / (SELECT COUNT(*) FROM safety_incidents) as pct_data_privacy_incidents FROM safety_incidents WHERE incident_type = 'Data Privacy' GROUP BY country;\nThe SQL query calculates the percentage (pct_data_privacy_incidents) of AI safety incidents related to data privacy in each country using the COUNT function and window functions. It groups the results by country.</s>"}
{"text": "<s>[INST] \nDelete all astrobiology records with a discovery_date before 2005-01-01 from the astrobiology_data table\nCREATE TABLE astrobiology_data (record_id INT, name VARCHAR(255), discovery_date DATE); INSERT INTO astrobiology_data (record_id, name, discovery_date) VALUES (1, 'Discovery 1', '2000-12-25'), (2, 'Discovery 2', '2007-06-18'), (3, 'Discovery 3', '2003-11-05'); \n[/INST]\nDELETE FROM astrobiology_data WHERE discovery_date < '2005-01-01';\nThis query deletes all records from the astrobiology_data table where the discovery_date is before 2005-01-01.</s>"}
{"text": "<s>[INST] \nDelete records from the \"diversity_metrics\" table for the company 'Mike Ltd.'\nCREATE TABLE diversity_metrics (id INT, company_name VARCHAR(100), region VARCHAR(50), employees_of_color INT, women_in_tech INT); INSERT INTO diversity_metrics (id, company_name, region, employees_of_color, women_in_tech) VALUES (1, 'Acme Inc.', 'Europe', 15, 22), (2, 'Bravo Corp.', 'North America', 35, 18), (3, 'Mike Ltd.', 'Africa', 20, 10); \n[/INST]\nDELETE FROM diversity_metrics WHERE company_name = 'Mike Ltd.';\nThe SQL query deletes all records in the \"diversity_metrics\" table where the \"company_name\" column value is \"Mike Ltd.\".</s>"}
{"text": "<s>[INST] \nList the top 2 zip codes with the highest number of unique donors, excluding those with less than 3 donations.\nCREATE TABLE donor_zip (donor_id INT, zip_code INT, donation_amount INT);INSERT INTO donor_zip VALUES (1, 11111, 500), (1, 11111, 600), (2, 11111, 700), (3, 22222, 200), (3, 22222, 300), (3, 22222, 400), (4, 33333, 1000), (4, 33333, 1500), (4, 33333, 2000); \n[/INST]\nSELECT zip_code, COUNT(DISTINCT donor_id) FROM donor_zip GROUP BY zip_code HAVING COUNT(*) >= 3 ORDER BY COUNT(DISTINCT donor_id) DESC LIMIT 2;\nThe SQL query calculates the number of unique donors for each zip code, filters out those with less than 3 donations using the HAVING clause, and orders the results in descending order based on the number of unique donors, returning the top 2 zip codes with the highest number of unique donors.</s>"}
{"text": "<s>[INST] \nDisplay the names of the artworks that were displayed in the same city as the artwork with the name 'Water Lilies'.\nCREATE TABLE Exhibitions (exhibition_id INT, artwork_name VARCHAR(50), city VARCHAR(50)); INSERT INTO Exhibitions (exhibition_id, artwork_name, city) VALUES (1, 'The Weeping Woman', 'Paris'); INSERT INTO Exhibitions (exhibition_id, artwork_name, city) VALUES (2, 'Water Lilies', 'London'); INSERT INTO Exhibitions (exhibition_id, artwork_name, city) VALUES (3, 'The Dance', 'New York'); INSERT INTO Exhibitions (exhibition_id, artwork_name, city) VALUES (4, 'The Weeping Woman', 'London'); \n[/INST]\nSELECT artwork_name FROM Exhibitions WHERE city = (SELECT city FROM Exhibitions WHERE artwork_name = 'Water Lilies');\nThis SQL query uses a subquery to find the city where the artwork 'Water Lilies' was displayed and then uses that value to select all the rows from the Exhibitions table where the city is the same.</s>"}
{"text": "<s>[INST] \nInsert a new record of a cargo ship with the name 'New Ship', a company_id of 4, and a capacity of 150000.\nCREATE TABLE companies (id INT, name TEXT);CREATE TABLE cargo_ships (id INT, company_id INT, capacity INT); INSERT INTO companies (id, name) VALUES (1, 'ABC Shipping'); INSERT INTO companies (id, name) VALUES (2, 'XYZ Shipping'); INSERT INTO companies (id, name) VALUES (3, 'DEF Shipping'); \n[/INST]\nINSERT INTO cargo_ships (id, company_id, capacity) VALUES (4, 4, 150000);\nThis SQL query inserts a new record of a cargo ship with the name 'New Ship', a company_id of 4, and a capacity of 150000. It adds a new row to the 'cargo_ships' table with the specified values. Note that the 'companies' table does not need to be updated, since a company_id of 4 is already included in the existing data.</s>"}
{"text": "<s>[INST] \nHow many wheelchair-accessible taxis were active on Sundays in the last month?\nCREATE TABLE vehicles (vehicle_id INT, vehicle_type VARCHAR(255), day_of_week ENUM('Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday')); INSERT INTO vehicles (vehicle_id, vehicle_type, day_of_week) VALUES (7, 'Wheelchair Accessible', 'Sunday'); CREATE TABLE taxi_activity (taxi_id INT, vehicle_id INT, activity_date DATE); INSERT INTO taxi_activity (taxi_id, vehicle_id, activity_date) VALUES (8, 7, '2022-03-06'); \n[/INST]\nSELECT COUNT(*) FROM taxi_activity JOIN vehicles ON taxi_activity.vehicle_id = vehicles.vehicle_id WHERE vehicles.day_of_week = 'Sunday' AND activity_date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 MONTH);\nCounts the number of wheelchair-accessible taxis that were active on Sundays in the last month by joining taxi_activity and vehicles tables based on vehicle_id.</s>"}
{"text": "<s>[INST] \nHow many marine mammal species are in the oceanography database?\nCREATE TABLE marine_species (name TEXT, category TEXT); INSERT INTO marine_species (name, category) VALUES ('Blue Whale', 'Mammal'), ('Dolphin', 'Mammal'), ('Clownfish', 'Fish'); \n[/INST]\nSELECT COUNT(*) FROM marine_species WHERE category = 'Mammal';\nThis query counts the number of records in the 'marine_species' table that have the value 'Mammal' in the 'category' column.</s>"}
{"text": "<s>[INST] \nWhich suppliers have not provided any ethical certifications for their materials?\nCREATE TABLE suppliers (id INT, name TEXT); INSERT INTO suppliers (id, name) VALUES (1, 'STU'), (2, 'VWX'), (3, 'YZA'); CREATE TABLE ethical_certifications (id INT, supplier_id INT, certification TEXT); INSERT INTO ethical_certifications (id, supplier_id, certification) VALUES (1, 1, 'Fair Trade'), (2, 3, 'Organic'); \n[/INST]\nSELECT s.name FROM suppliers s LEFT JOIN ethical_certifications ec ON s.id = ec.supplier_id WHERE ec.supplier_id IS NULL;\nThe SQL query lists the names of suppliers who have not provided any ethical certifications for their materials. It does this by using a LEFT JOIN between the 'suppliers' and 'ethical_certifications' tables on the supplier_id field, and then filtering for NULL values in the supplier_id field of the 'ethical_certifications' table.</s>"}
{"text": "<s>[INST] \nHow many bioprocess engineering projects were successfully completed in the UK?\nCREATE SCHEMA if not exists biotech;CREATE TABLE if not exists biotech.bioprocess_projects(id INT, name STRING, location STRING, status STRING);INSERT INTO biotech.bioprocess_projects(id, name, location, status) VALUES (1, 'ProjectA', 'UK', 'completed'), (2, 'ProjectB', 'US', 'in_progress'), (3, 'ProjectC', 'UK', 'completed'); \n[/INST]\nSELECT COUNT(*) FROM biotech.bioprocess_projects WHERE location = 'UK' AND status = 'completed';\nThis query counts the number of successfully completed bioprocess engineering projects in the UK. It filters the bioprocess_projects table for completed projects located in the UK and counts the number of rows.</s>"}
{"text": "<s>[INST] \nWhat is the total 'climate finance' committed by 'Australia' in '2020' in the 'finance' table?\nCREATE TABLE finance (country VARCHAR(255), amount DECIMAL(10,2), year INT); \n[/INST]\nSELECT SUM(amount) FROM finance WHERE country = 'Australia' AND year = 2020;\nThis query calculates the total climate finance committed by Australia in 2020 by filtering the 'finance' table for rows where the country is Australia and the year is 2020. It then calculates the sum of the amount from those filtered rows.</s>"}
{"text": "<s>[INST] \nList all financial wellbeing programs offered by lenders in the Middle East and their respective start dates.\nCREATE TABLE Lenders (LenderID INT, LenderName VARCHAR(100), Region VARCHAR(50)); INSERT INTO Lenders (LenderID, LenderName, Region) VALUES (1, 'Islamic Bank', 'Middle East'), (2, 'Shariah Finance', 'Middle East'); CREATE TABLE Programs (ProgramID INT, LenderID INT, ProgramName VARCHAR(100), StartDate DATE); INSERT INTO Programs (ProgramID, LenderID, ProgramName, StartDate) VALUES (1, 1, 'Islamic Savings', '2020-01-01'), (2, 1, 'Halal Investments', '2019-07-15'), (3, 2, 'Shariah Wealth Management', '2021-03-01'); \n[/INST]\nSELECT Lenders.LenderName, Programs.ProgramName, Programs.StartDate FROM Lenders INNER JOIN Programs ON Lenders.LenderID = Programs.LenderID WHERE Lenders.Region = 'Middle East';\nThis query lists all financial wellbeing programs offered by lenders in the Middle East by joining the Lenders and Programs tables based on the LenderID and filtering the results using the Region column.</s>"}
{"text": "<s>[INST] \nHow many accessibility initiatives were launched per year in the last 10 years?\nCREATE TABLE accessibility_initiatives (initiative_year INT, num_initiatives INT); INSERT INTO accessibility_initiatives (initiative_year, num_initiatives) VALUES (2013, 125), (2014, 150), (2015, 175), (2016, 200), (2017, 225), (2018, 250), (2019, 275), (2020, 300); \n[/INST]\nSELECT initiative_year, num_initiatives, COUNT(*) OVER (PARTITION BY initiative_year) AS initiatives_per_year FROM accessibility_initiatives;\nCount the number of accessibility initiatives launched per year in the last 10 years by partitioning the data by initiative_year and finding the count of num_initiatives within each partition.</s>"}
{"text": "<s>[INST] \nWhat is the maximum CO2 offset for carbon offset projects in a given year?\nCREATE TABLE CarbonOffsetProjects (id INT, year INT, co2_offset FLOAT); INSERT INTO CarbonOffsetProjects (id, year, co2_offset) VALUES (1, 2020, 1000), (2, 2020, 2000), (3, 2021, 3000); \n[/INST]\nSELECT MAX(co2_offset) FROM CarbonOffsetProjects WHERE year = 2020;\nThis query retrieves the maximum CO2 offset for carbon offset projects in the year 2020 by filtering the 'CarbonOffsetProjects' table for rows with 'year' = 2020 and calculating the maximum 'co2_offset' value.</s>"}
{"text": "<s>[INST] \nIdentify the total number of public libraries in urban areas\nCREATE TABLE areas (area_id INT, area_type TEXT);CREATE TABLE libraries (library_id INT, area_id INT, library_name TEXT); \n[/INST]\nSELECT COUNT(*) FROM libraries l INNER JOIN areas a ON l.area_id = a.area_id WHERE a.area_type = 'urban';\nThis SQL query identifies the total number of public libraries in urban areas. It does this by joining the 'libraries' table with the 'areas' table on the 'area_id' column. Then, it filters the results to only include rows where 'area_type' is 'urban'. Finally, it counts the number of rows in the resulting table.</s>"}
{"text": "<s>[INST] \nUpdate the irrigation system activated status to 'false' in field 9 for records on weekends in March 2023.\nCREATE TABLE irrigation_system (field_id INT, system_type VARCHAR(20), activated BOOLEAN, timestamp TIMESTAMP); INSERT INTO irrigation_system (field_id, system_type, activated, timestamp) VALUES (9, 'irrigation', true, '2023-03-05 08:00:00'), (9, 'irrigation', false, '2023-03-05 12:00:00'); \n[/INST]\nUPDATE irrigation_system SET activated = false WHERE field_id = 9 AND system_type = 'irrigation' AND DAYOFWEEK(timestamp) IN (1, 7) AND MONTH(timestamp) = 3 AND YEAR(timestamp) = 2023;\nThis query updates the irrigation system activated status to 'false' in field 9 for records on weekends in March 2023. It filters the records based on the provided conditions and then updates the activated column.</s>"}
{"text": "<s>[INST] \nWhat is the number of animals by species and their total population in the South American conservation programs?\nCREATE TABLE south_american_animals (species VARCHAR(50), animal_count INT); INSERT INTO south_american_animals (species, animal_count) VALUES ('Jaguars', 200), ('Monkeys', 400), ('Penguins', 300); \n[/INST]\nSELECT species, SUM(animal_count) as total_population FROM south_american_animals GROUP BY species;\nThis query sums the animal_count for each species in the south_american_animals table.</s>"}
{"text": "<s>[INST] \nWhat is the total number of articles and the average age of users who liked them, for each gender?\nCREATE TABLE users (user_id INT, age INT, gender VARCHAR(10)); INSERT INTO users (user_id, age, gender) VALUES (1, 25, 'Female'), (2, 35, 'Male'); CREATE TABLE articles (article_id INT, title VARCHAR(50), category VARCHAR(20)); INSERT INTO articles (article_id, title, category) VALUES (1, 'Climate Crisis 101', 'climate_change'), (2, 'Economy in 2022', 'economy'); CREATE TABLE likes (user_id INT, article_id INT); INSERT INTO likes (user_id, article_id) VALUES (1, 1), (2, 1); \n[/INST]\nSELECT gender, COUNT(*) as article_count, AVG(age) as avg_age FROM users JOIN likes ON users.user_id = likes.user_id JOIN articles ON likes.article_id = articles.article_id GROUP BY gender;\nWe join the users and likes tables on the user_id column, and then join the articles table with the likes table using the article_id column. Next, we use the COUNT and AVG functions with the GROUP BY clause to calculate the number of articles and the average age of users for each gender.</s>"}
{"text": "<s>[INST] \nWhat is the average claim amount for policyholders with dogs?\nCREATE TABLE pets (policyholder_id INT, pet_type VARCHAR(10)); INSERT INTO pets (policyholder_id, pet_type) VALUES (1, 'Dog'), (2, 'Cat'), (3, 'Bird'); CREATE TABLE claims (claim_id INT, policyholder_id INT, amount DECIMAL(10, 2)); INSERT INTO claims (claim_id, policyholder_id, amount) VALUES (1, 1, 500), (2, 3, 100), (3, 2, 300), (4, 1, 700); \n[/INST]\nSELECT AVG(c.amount) as avg_claim_amount FROM claims c JOIN pets p ON c.policyholder_id = p.policyholder_id WHERE p.pet_type = 'Dog';\nThis query joins the claims and pets tables on the policyholder_id foreign key. It then filters for policyholders with dogs, and calculates the average claim amount for these policyholders.</s>"}
{"text": "<s>[INST] \nDelete all transactions from the 'credit_card' table where the amount is greater than $1000\nCREATE TABLE credit_card (transaction_id INT, customer_id INT, amount DECIMAL(10, 2), transaction_date DATETIME); \n[/INST]\nDELETE FROM credit_card WHERE amount > 1000;\nThis query deletes all records from the 'credit_card' table where the 'amount' column has a value greater than $1000.00.</s>"}
{"text": "<s>[INST] \nHow many female employees work in the 'sustainable_practices' table?\nCREATE TABLE sustainable_practices (employee_id INT, first_name VARCHAR(50), last_name VARCHAR(50), gender VARCHAR(10), position VARCHAR(50), hours_worked INT); INSERT INTO sustainable_practices (employee_id, first_name, last_name, gender, position, hours_worked) VALUES (3, 'Alice', 'Johnson', 'Female', 'Analyst', 30); INSERT INTO sustainable_practices (employee_id, first_name, last_name, gender, position, hours_worked) VALUES (4, 'Bob', 'Williams', 'Male', 'Technician', 35); INSERT INTO sustainable_practices (employee_id, first_name, last_name, gender, position, hours_worked) VALUES (8, 'Olga', 'Ivanova', 'Female', 'Technician', 40); INSERT INTO sustainable_practices (employee_id, first_name, last_name, gender, position, hours_worked) VALUES (9, 'Sara', 'Lopez', 'Female', 'Analyst', 35); \n[/INST]\nSELECT COUNT(*) FROM sustainable_practices WHERE gender = 'Female';\nThe SQL query counts the number of female employees by filtering the 'gender' column with the value 'Female' in the 'sustainable_practices' table.</s>"}
{"text": "<s>[INST] \nWhat is the waste generation trend in India from 2018 to 2021?\nCREATE TABLE waste_generation_trend (country VARCHAR(50), year INT, waste_quantity INT); INSERT INTO waste_generation_trend (country, year, waste_quantity) VALUES ('India', 2018, 12000), ('India', 2019, 13000), ('India', 2020, 14000), ('India', 2021, 15000); \n[/INST]\nSELECT year, waste_quantity, (LAG(waste_quantity) OVER (ORDER BY year)) AS previous_year_waste FROM waste_generation_trend WHERE country = 'India';\nThis query calculates the waste generation trend for India from 2018 to 2021 using the LAG function to compare each year's waste quantity with the previous year's.</s>"}
{"text": "<s>[INST] \nFind the total quantity of products in each warehouse?\nCREATE TABLE products (product_id int, name varchar(255), quantity int, warehouse_id int); CREATE TABLE warehouses (warehouse_id int, location varchar(255)); INSERT INTO products (product_id, name, quantity, warehouse_id) VALUES (1, 'Organic Cotton T-Shirt', 100, 1), (2, 'Regular Cotton T-Shirt', 150, 1), (3, 'Reusable Water Bottle', 200, 2); INSERT INTO warehouses (warehouse_id, location) VALUES (1, 'New York'), (2, 'Los Angeles'); \n[/INST]\nSELECT warehouses.location, SUM(products.quantity) FROM products INNER JOIN warehouses ON products.warehouse_id = warehouses.warehouse_id GROUP BY warehouses.location;\nThis query calculates the total quantity of products in each warehouse by joining the products and warehouses tables on the warehouse_id column, and then grouping by the location column and calculating the sum of the quantity column.</s>"}
{"text": "<s>[INST] \nInsert a new record into 'military_equipment' table with 'equipment_name' as 'JF-17 Thunder', 'type' as 'Fighter Jet', 'manufacturer' as 'Pakistan Aeronautical Complex', 'origin' as 'Pakistan'\nCREATE TABLE military_equipment (equipment_id SERIAL PRIMARY KEY, equipment_name TEXT, type TEXT, manufacturer TEXT, origin TEXT); \n[/INST]\nINSERT INTO military_equipment (equipment_name, type, manufacturer, origin) VALUES ('JF-17 Thunder', 'Fighter Jet', 'Pakistan Aeronautical Complex', 'Pakistan');\nThe SQL query inserts a new record into the military_equipment table with the equipment_name as 'JF-17 Thunder', type as 'Fighter Jet', manufacturer as 'Pakistan Aeronautical Complex', and origin as 'Pakistan'.</s>"}
{"text": "<s>[INST] \nWhat is the maximum amount of water used per day in the 'water_usage' table for the 'pump_station_1'?\nCREATE TABLE water_usage (id INT, station_name VARCHAR(50), water_amount INT, usage_date DATE); INSERT INTO water_usage (id, station_name, water_amount, usage_date) VALUES (1, 'pump_station_1', 5000, '2021-02-01'); INSERT INTO water_usage (id, station_name, water_amount, usage_date) VALUES (2, 'pump_station_2', 6000, '2021-03-05'); \n[/INST]\nSELECT MAX(water_amount) FROM water_usage WHERE station_name = 'pump_station_1';\nThe SQL query selects the maximum amount of water used per day in the water_usage table for the 'pump_station_1'. It selects the maximum of the water_amount column from the water_usage table where the station_name is equal to 'pump_station_1'.</s>"}
{"text": "<s>[INST] \nIdentify the average capacity building expenditure per nonprofit in 'region_EU' over the last year.\nCREATE TABLE nonprofit (nonprofit_id INT, name VARCHAR(50), region VARCHAR(50)); INSERT INTO nonprofit (nonprofit_id, name, region) VALUES (1, 'Greenpeace EU', 'region_EU'); INSERT INTO nonprofit (nonprofit_id, name, region) VALUES (2, 'Amnesty International EU', 'region_EU'); CREATE TABLE expenditure (expenditure_id INT, nonprofit_id INT, category VARCHAR(50), amount DECIMAL(10, 2), expenditure_date DATE); INSERT INTO expenditure (expenditure_id, nonprofit_id, category, amount, expenditure_date) VALUES (1, 1, 'fundraising', 2000, '2021-01-01'); INSERT INTO expenditure (expenditure_id, nonprofit_id, category, amount, expenditure_date) VALUES (2, 1, 'capacity building', 5000, '2021-02-15'); \n[/INST]\nSELECT AVG(e.amount) as avg_capacity_expenditure FROM expenditure e INNER JOIN nonprofit n ON e.nonprofit_id = n.nonprofit_id WHERE n.region = 'region_EU' AND e.category = 'capacity building' AND e.expenditure_date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR);\nThis query calculates the average capacity building expenditure per nonprofit in 'region_EU' over the last year. It first joins the 'expenditure' and 'nonprofit' tables on the 'nonprofit_id' field. Then, it filters the records where the 'region' is 'region_EU' and the 'category' is 'capacity building' and the 'expenditure_date' is within the last year. Lastly, it calculates the average of the 'amount' field for the selected records.</s>"}
{"text": "<s>[INST] \nInsert a new record for a faculty member in the Computer Science department with the name 'Charlie' and research interest 'Artificial Intelligence'.\nCREATE TABLE faculty (id INT, name VARCHAR(50), department VARCHAR(50), research_interest TEXT); \n[/INST]\nINSERT INTO faculty (name, department, research_interest) VALUES ('Charlie', 'Computer Science', 'Artificial Intelligence');\nThis query inserts a new record into the faculty table for a faculty member with the name 'Charlie', department 'Computer Science', and research interest 'Artificial Intelligence'. It does not include the id column in the insert statement because it is likely to be an auto-incrementing primary key.</s>"}
{"text": "<s>[INST] \nWhat is the average salary of male and female employees, partitioned by department?\nCREATE TABLE Employees (EmployeeID INT, Gender VARCHAR(10), Department VARCHAR(20), Salary DECIMAL(10,2)); INSERT INTO Employees (EmployeeID, Gender, Department, Salary) VALUES (1, 'Male', 'IT', 80000.00), (2, 'Female', 'IT', 75000.00), (3, 'Non-binary', 'HR', 70000.00), (4, 'Male', 'HR', 78000.00); \n[/INST]\nSELECT Department, AVG(Salary) OVER (PARTITION BY Department, Gender) AS Avg_Salary FROM Employees;\nThe SQL query calculates the average salary for each gender within each department by partitioning the data using the PARTITION BY clause and then calculating the average salary using the AVG function.</s>"}
{"text": "<s>[INST] \nWhat is the latest position of VesselC?\nCREATE TABLE vessel_positions(id INT, vessel_id INT, timestamp TIMESTAMP, longitude FLOAT, latitude FLOAT); INSERT INTO vessel_positions VALUES (1, 3, '2022-04-01 12:30:00', 117.1611, 36.6566), (2, 3, '2022-04-01 18:15:00', 117.1611, 36.6566); \n[/INST]\nSELECT vessel_id, MAX(timestamp) FROM vessel_positions WHERE vessel_id = 3 GROUP BY vessel_id;\nIdentify the latest position of VesselC (id=3) by finding the maximum timestamp value for this vessel.</s>"}
{"text": "<s>[INST] \nList policyholders who have a policy in Florida but live outside of Florida.\nCREATE TABLE policyholders (id INT, name VARCHAR(100), state VARCHAR(20)); CREATE TABLE policies (id INT, policy_number VARCHAR(50), policyholder_id INT, state VARCHAR(20)); INSERT INTO policyholders (id, name, state) VALUES (1, 'Jim Brown', 'TX'), (2, 'Pam Smith', 'CA'), (3, 'Mike Johnson', 'FL'); INSERT INTO policies (id, policy_number, policyholder_id, state) VALUES (1, 'P123', 1, 'FL'), (2, 'P456', 2, 'CA'), (3, 'P789', 3, 'TX'); \n[/INST]\nSELECT DISTINCT policyholders.name FROM policyholders JOIN policies ON policyholders.id = policies.policyholder_id WHERE policies.state = 'FL' AND policyholders.state != 'FL';\nJoin policyholders and policies tables, filter by state for policies and policyholders, and list policyholders who have a policy in Florida but live outside of Florida.</s>"}
{"text": "<s>[INST] \nList all news articles with a word count greater than 500.\nCREATE TABLE news_articles (id INT, title VARCHAR(100), content TEXT, word_count INT); \n[/INST]\nSELECT title, content FROM news_articles WHERE word_count > 500;\nThis SQL query retrieves the title and content of news articles with a word count greater than 500 by using the WHERE clause to filter articles based on the 'word_count' column.</s>"}
{"text": "<s>[INST] \nWhat is the number of companies founded by underrepresented minority groups in the renewable energy industry?\nCREATE TABLE Companies (id INT, name TEXT, industry TEXT, founders TEXT); INSERT INTO Companies (id, name, industry, founders) VALUES (1, 'SolEnergia', 'Renewable Energy', 'Hispanic, Female'); INSERT INTO Companies (id, name, industry, founders) VALUES (2, 'GreenTech', 'Renewable Energy', 'Asian, Female'); CREATE TABLE Underrepresented_Minorities (minority TEXT); INSERT INTO Underrepresented_Minorities (minority) VALUES ('Hispanic'); INSERT INTO Underrepresented_Minorities (minority) VALUES ('Black'); INSERT INTO Underrepresented_Minorities (minority) VALUES ('Native American'); \n[/INST]\nSELECT COUNT(c.id) FROM Companies c JOIN Underrepresented_Minorities m ON c.founders LIKE CONCAT('%', m.minority, '%') WHERE c.industry = 'Renewable Energy';\nThe SQL query calculates the number of companies founded by underrepresented minority groups in the renewable energy industry. It does this by joining the Companies table with the Underrepresented_Minorities table based on the presence of a given minority group in the founders column. Then, it filters the results to only include rows where the industry is renewable energy. Lastly, it calculates the number of companies using the COUNT function.</s>"}
{"text": "<s>[INST] \nCalculate the average guest rating for each exhibition in Tokyo, and rank them in descending order of average rating.\nCREATE TABLE Exhibitions (id INT, city VARCHAR(20), revenue FLOAT, guest_rating FLOAT); INSERT INTO Exhibitions (id, city, revenue, guest_rating) VALUES (1, 'Tokyo', 55000, 4.3), (2, 'Tokyo', 60000, 4.6), (3, 'Tokyo', 70000, 4.5); \n[/INST]\nSELECT city, AVG(guest_rating) as avg_guest_rating, RANK() OVER (PARTITION BY city ORDER BY AVG(guest_rating) DESC) as rank FROM Exhibitions WHERE city = 'Tokyo' GROUP BY city, RANK() OVER (PARTITION BY city ORDER BY AVG(guest_rating) DESC);\nThis query calculates the average guest rating for each exhibition in Tokyo and ranks them in descending order of average rating. It groups the data by city, calculates the average guest_rating for each group, and assigns a rank to each group based on the average guest_rating in descending order. The RANK() function is used to assign the same rank to groups with the same average guest_rating.</s>"}
{"text": "<s>[INST] \nWhat is the average account balance for clients living in California?\nCREATE TABLE clients (client_id INT, name TEXT, dob DATE, branch TEXT, state TEXT);CREATE TABLE accounts (account_id INT, client_id INT, account_type TEXT, balance DECIMAL);INSERT INTO clients VALUES (2, 'Jane Smith', '1990-01-10', 'Los Angeles', 'California');INSERT INTO accounts VALUES (102, 2, 'Checking', 5000); \n[/INST]\nSELECT AVG(accounts.balance) FROM clients INNER JOIN accounts ON clients.client_id = accounts.client_id WHERE clients.state = 'California';\nThe SQL query calculates the average account balance for clients living in California by averaging the 'balance' column using inner join between clients and accounts table after filtering for clients living in California.</s>"}
{"text": "<s>[INST] \nList the exhibition titles and the number of artworks in each exhibit from the galleries 'Impressionism' and 'Surrealism'.\nCREATE TABLE Exhibits (ExhibitID int, Gallery varchar(50), ArtworkID int); CREATE TABLE ExhibitionTitles (ExhibitID int, Title varchar(50)); INSERT INTO Exhibits (ExhibitID, Gallery, ArtworkID) VALUES (1, 'Impressionism', 101), (2, 'Impressionism', 102), (3, 'Surrealism', 201); INSERT INTO ExhibitionTitles (ExhibitID, Title) VALUES (1, 'Impressionist Masterpieces'), (2, 'Post-Impressionism'), (3, 'Surrealist Dreams'); \n[/INST]\nSELECT e.Gallery, et.Title, COUNT(e.ArtworkID) AS ArtworkCount FROM Exhibits e INNER JOIN ExhibitionTitles et ON e.ExhibitID = et.ExhibitID WHERE e.Gallery IN ('Impressionism', 'Surrealism') GROUP BY e.Gallery, et.Title;\nThis SQL query performs an inner join on the Exhibits and ExhibitionTitles tables, matching records based on the ExhibitID. It then filters the results to only include records where the Gallery is either 'Impressionism' or 'Surrealism'. Finally, it groups the results by the Gallery and Title columns and calculates the count of ArtworkID to display the number of artworks in each exhibit.</s>"}
{"text": "<s>[INST] \nHow many garments are made from recycled polyester in each country?\nCREATE TABLE RecycledPolyester (id INT, country VARCHAR(255), garment_type VARCHAR(255), quantity INT); INSERT INTO RecycledPolyester (id, country, garment_type, quantity) VALUES (1, 'France', 'T-Shirt', 500), (2, 'Germany', 'Pants', 700), (3, 'Spain', 'Dress', 600); \n[/INST]\nSELECT country, SUM(quantity) FROM RecycledPolyester GROUP BY country;\nThis query groups the data by country and sums the number of garments made from recycled polyester in each country, providing the total quantity for each country separately.</s>"}
{"text": "<s>[INST] \nWhat is the average flight safety score for flights operated by 'Airline1'?\nCREATE TABLE Flights (id INT, airline VARCHAR(50), safety_score INT); INSERT INTO Flights (id, airline, safety_score) VALUES (1, 'Airline1', 90), (2, 'Airline1', 95), (3, 'Airline2', 85); \n[/INST]\nSELECT AVG(safety_score) FROM Flights WHERE airline = 'Airline1';\nThis query calculates the average of the 'safety_score' column in the 'Flights' table where the 'airline' is equal to 'Airline1'.</s>"}
{"text": "<s>[INST] \nWho are the top 3 countries receiving climate finance from the Global Environment Facility for climate adaptation?\nCREATE TABLE global_environment_facility (fund_id INT, project_name VARCHAR(100), country VARCHAR(50), sector VARCHAR(50), amount FLOAT, adaptation_flag BOOLEAN); INSERT INTO global_environment_facility (fund_id, project_name, country, sector, amount, adaptation_flag) VALUES (1, 'Mangrove Restoration', 'Indonesia', 'Coastal', 2000000, TRUE); \n[/INST]\nSELECT country, SUM(amount) as total_amount FROM global_environment_facility WHERE adaptation_flag = TRUE GROUP BY country ORDER BY total_amount DESC LIMIT 3;\nThis query identifies the top 3 countries (using LIMIT 3) receiving climate finance from the Global Environment Facility for climate adaptation by filtering for projects with adaptation_flag = TRUE, grouping by country, summing the amount for each group, and sorting by the total amount in descending order (ORDER BY total_amount DESC).</s>"}
{"text": "<s>[INST] \nWhat is the maximum cargo weight for VESSEL004\nCREATE TABLE vessels (id VARCHAR(20), name VARCHAR(20)); INSERT INTO vessels (id, name) VALUES ('VES004', 'VESSEL004'), ('VES005', 'VESSEL005'); CREATE TABLE cargo (id INT, vessel_id VARCHAR(20), weight INT); INSERT INTO cargo (id, vessel_id, weight) VALUES (1, 'VES004', 12000), (2, 'VES004', 15000), (3, 'VES004', 14000), (4, 'VES005', 16000), (5, 'VES005', 17000), (6, 'VES005', 18000); \n[/INST]\nSELECT MAX(weight) FROM cargo WHERE vessel_id = 'VES004';\nThis query finds the maximum cargo weight for VESSEL004 by selecting the maximum weight in the cargo table where the vessel_id is VES004.</s>"}
{"text": "<s>[INST] \nWhich countries produced more than 10000 units of Lanthanum in 2016?\nCREATE TABLE lanthanum_production (country VARCHAR(50), year INT, quantity INT); INSERT INTO lanthanum_production (country, year, quantity) VALUES ('China', 2016, 150000), ('Australia', 2016, 12000), ('United States', 2016, 18000), ('Brazil', 2016, 9000), ('South Africa', 2016, 11000); \n[/INST]\nSELECT country FROM lanthanum_production WHERE year = 2016 AND quantity > 10000;\nThis query lists the countries that produced more than 10000 units of Lanthanum in the year 2016 by selecting the country column in the lanthanum_production table where the year is 2016 and the quantity is greater than 10000.</s>"}
{"text": "<s>[INST] \nWhat is the maximum food safety score?\nCREATE TABLE restaurant (restaurant_id INT, food_safety_score INT); INSERT INTO restaurant (restaurant_id, food_safety_score) VALUES (1, 95), (2, 85), (3, 90), (4, 75); \n[/INST]\nSELECT MAX(food_safety_score) FROM restaurant;\nThis query calculates the maximum food safety score. It uses the MAX function to find the maximum value in the food_safety_score column.</s>"}
{"text": "<s>[INST] \nInsert records in the cargo_tracking table for vessel \"Sky Dancer\" with the following data: (2022-03-15, 'Los Angeles', 'New York', 1200)\nCREATE TABLE cargo_tracking (  voyage_date DATE,  departure_port VARCHAR(255),  destination_port VARCHAR(255),  cargo_weight INT,  vessel_name VARCHAR(255)); \n[/INST]\nINSERT INTO cargo_tracking  (voyage_date, departure_port, destination_port, cargo_weight, vessel_name)  VALUES  ('2022-03-15', 'Los Angeles', 'New York', 1200, 'Sky Dancer');\nThis query inserts records in the cargo_tracking table for vessel \"Sky Dancer\" with the following data: March 15th, 2022, Los Angeles, New York, and 1200 cargo weight.</s>"}
{"text": "<s>[INST] \nHow many open data initiatives were launched in the European Union in the last 5 years?\nCREATE TABLE open_data_initiatives (initiative_id INT, launch_year INT, location VARCHAR(50)); INSERT INTO open_data_initiatives (initiative_id, launch_year, location) VALUES (1, 2017, 'European Union'), (2, 2016, 'United States'), (3, 2015, 'European Union'), (4, 2018, 'United Kingdom'), (5, 2017, 'Canada'), (6, 2020, 'European Union'), (7, 2019, 'European Union'); \n[/INST]\nSELECT COUNT(*) FROM open_data_initiatives WHERE launch_year >= 2016 AND location = 'European Union';\nThis query counts the number of open data initiatives launched in the European Union in the last 5 years. It does so by filtering the open_data_initiatives table for rows with a launch_year greater than or equal to 2016 and location equal to European Union.</s>"}
{"text": "<s>[INST] \nWhat is the yearly growth rate in revenue for the \"hip-hop\" genre in the Asian region?\nCREATE TABLE YearlyRevenue(id INT, genre VARCHAR(10), region VARCHAR(10), revenue FLOAT, year INT); \n[/INST]\nSELECT (SUM(revenue) OVER (PARTITION BY genre ORDER BY year ROWS BETWEEN 1 FOLLOWING AND UNBOUNDED FOLLOWING) - SUM(revenue))/SUM(revenue) OVER (PARTITION BY genre) AS yearly_growth_rate FROM YearlyRevenue WHERE genre = 'hip-hop' AND region = 'Asian';\nThe SQL query calculates the yearly growth rate in revenue for the \"hip-hop\" genre in the Asian region by using the window function SUM() OVER() to calculate the sum of revenue for each year in the \"hip-hop\" genre and then calculating the yearly growth rate by dividing the difference between the sum of revenue for the current year and the previous year by the sum of revenue for the previous year.</s>"}
{"text": "<s>[INST] \nWhat is the average productivity of workers per mineral?\nCREATE TABLE worker_productivity (worker_id INT, worker_name TEXT, mineral TEXT, productivity DECIMAL); INSERT INTO worker_productivity (worker_id, worker_name, mineral, productivity) VALUES (1, 'John', 'Gold', 5.0), (2, 'Jane', 'Gold', 5.5), (3, 'Bob', 'Silver', 4.8), (4, 'Alice', 'Silver', 5.2), (5, 'Charlie', 'Copper', 4.5), (6, 'David', 'Copper', 4.7); \n[/INST]\nSELECT mineral, AVG(productivity) FROM worker_productivity GROUP BY mineral;\nThis SQL query calculates the average productivity of workers per mineral by grouping the mineral and averaging the productivity column.</s>"}
{"text": "<s>[INST] \nMinimum weight of artifacts in 'european_sites'\nCREATE TABLE european_sites (id INT, site_name VARCHAR(50), artifact_name VARCHAR(50), weight INT); \n[/INST]\nSELECT MIN(weight) FROM european_sites;\nThis query finds the minimum value of the 'weight' column in the 'european_sites' table, giving us the weight of the lightest artifact.</s>"}
{"text": "<s>[INST] \nWhat is the average waste generation by material type in France in 2019?\nCREATE TABLE waste_generation_france(year INT, material VARCHAR(20), amount INT); INSERT INTO waste_generation_france VALUES (2019, 'Plastic', 1000), (2019, 'Glass', 2000), (2019, 'Metal', 3000); \n[/INST]\nSELECT material, AVG(amount) as avg_amount FROM waste_generation_france WHERE year = 2019 GROUP BY material;\nThis query calculates the average waste generation by material type in France in 2019 by averaging the 'amount' column and grouping by 'material'.</s>"}
{"text": "<s>[INST] \nIdentify the average age of players who play non-VR games, and the maximum prize pool for esports events.\nCREATE TABLE Players (PlayerID INT, Age INT, Gender VARCHAR(10), VRGamePlayer BOOLEAN); INSERT INTO Players (PlayerID, Age, Gender, VRGamePlayer) VALUES (1, 35, 'Female', false), (2, 40, 'Non-binary', false), (3, 28, 'Male', true); CREATE TABLE EsportsEvents (EventID INT, EventName VARCHAR(50), PrizePool DECIMAL(10,2)); INSERT INTO EsportsEvents (EventID, EventName, PrizePool) VALUES (1, 'The International', 40000000.00), (2, 'League of Legends World Championship', 24000000.00), (3, 'Major League Gaming', 1000000.00); \n[/INST]\nSELECT AVG(Players.Age), MAX(EsportsEvents.PrizePool) FROM Players, EsportsEvents;\nThis query calculates the average age of players who play non-VR games and the maximum prize pool for esports events. It does so by using the AVG function on the Age column from the Players table and the MAX function on the PrizePool column from the EsportsEvents table.</s>"}
{"text": "<s>[INST] \nWhat is the maximum transaction amount for each customer in the United States and Mexico?\nCREATE TABLE transactions (customer_id INT, transaction_amount DECIMAL(10,2), country VARCHAR(2)); INSERT INTO transactions (customer_id, transaction_amount, country) VALUES (1, 50.00, 'US'), (2, 100.00, 'MX'), (3, 75.00, 'CA'); \n[/INST]\nSELECT customer_id, MAX(transaction_amount) FROM transactions WHERE country IN ('US', 'MX') GROUP BY customer_id;\nThis SQL query calculates the maximum transaction amount for each customer in the United States (US) and Mexico (MX) using the IN operator and GROUP BY clause.</s>"}
{"text": "<s>[INST] \nWhat is the inventory level for ingredients used in a specific menu item?\nCREATE TABLE ingredients (ingredient VARCHAR(255), menu_item VARCHAR(255)); INSERT INTO ingredients (ingredient, menu_item) VALUES ('Chicken', 'Chicken Alfredo'), ('Pasta', 'Chicken Alfredo'), ('Beef', 'Beef Stew'), ('Carrots', 'Beef Stew'), ('Potatoes', 'Beef Stew'); \n[/INST]\nSELECT ingredient, quantity FROM ingredients JOIN inventory ON ingredients.ingredient = inventory.ingredient WHERE menu_item = 'Chicken Alfredo';\nWe join the ingredients and inventory tables on the ingredient column and filter for the specific menu item of interest.</s>"}
{"text": "<s>[INST] \nWho are the employees that have been with the company the longest in the engineering department?\nCREATE TABLE Employees (EmployeeID INT, FirstName VARCHAR(20), LastName VARCHAR(20), Department VARCHAR(20), EmploymentDuration INT, HireDate DATE); \n[/INST]\nSELECT FirstName, LastName, EmploymentDuration FROM Employees WHERE Department = 'Engineering' AND ROW_NUMBER() OVER(PARTITION BY Department ORDER BY EmploymentDuration DESC) <= 3;\nThis query selects the first names, last names, and employment duration of the top three longest-serving employees in the engineering department.</s>"}
{"text": "<s>[INST] \nFind all products that use ingredients sourced from 'Canada' and have a safety record before 2019-01-01\nCREATE TABLE ingredient (product_id INT, ingredient TEXT, origin TEXT); \n[/INST]\nSELECT DISTINCT product_id FROM ingredient WHERE origin = 'Canada' INTERSECT SELECT DISTINCT product_id FROM safety_record WHERE report_date < '2019-01-01';\nThis query uses the INTERSECT operator to find products that use ingredients from Canada and have safety records before 2019-01-01.</s>"}
{"text": "<s>[INST] \nWhich menu item had the lowest revenue in January 2022?\nCREATE TABLE menu_engineering (item VARCHAR(255), revenue FLOAT, month VARCHAR(9)); INSERT INTO menu_engineering (item, revenue, month) VALUES ('Taco', 1500, 'January-2022'), ('Steak', 1800, 'January-2022'), ('Pasta', 2000, 'January-2022'); \n[/INST]\nSELECT item, MIN(revenue) FROM menu_engineering WHERE month = 'January-2022';\nThis query finds the menu item with the lowest revenue in January 2022 by selecting the item with the minimum revenue for that month.</s>"}
{"text": "<s>[INST] \nIdentify the top 3 cities with the highest number of ticket sales.\nCREATE TABLE ticket_sales(ticket_id INT, city VARCHAR(50), tickets_sold INT); \n[/INST]\nSELECT city, SUM(tickets_sold) AS total_sales FROM ticket_sales GROUP BY city ORDER BY total_sales DESC LIMIT 3;\nThe query first calculates the total number of tickets sold for each city with the GROUP BY clause. Then, the ORDER BY clause sorts the cities by total ticket sales in descending order, and the LIMIT clause limits the result to the top 3 cities.</s>"}
{"text": "<s>[INST] \nList all the workplaces in Canada that have implemented workplace safety measures.\nCREATE TABLE ca_workplaces (id INT, name TEXT, country TEXT, workplace_safety BOOLEAN); INSERT INTO ca_workplaces (id, name, country, workplace_safety) VALUES (1, 'Workplace D', 'Canada', true), (2, 'Workplace E', 'Canada', true), (3, 'Workplace F', 'Canada', false); \n[/INST]\nSELECT name FROM ca_workplaces WHERE workplace_safety = true;\nThis query selects the name column from the ca_workplaces table, filtering rows where workplace_safety is true.</s>"}
{"text": "<s>[INST] \nWhat is the minimum carbon sequestration achieved in a single year in tropical rainforests, and which forest was it?\nCREATE TABLE tropical_rainforests (id INT, name VARCHAR(255), country VARCHAR(255), sequestration INT); INSERT INTO tropical_rainforests (id, name, country, sequestration) VALUES (1, 'Tropical Rainforest 1', 'Brazil', 9000), (2, 'Tropical Rainforest 2', 'Brazil', 12000), (3, 'Tropical Rainforest 3', 'Brazil', 15000); \n[/INST]\nSELECT name, MIN(sequestration) FROM tropical_rainforests WHERE country = 'Brazil';\nThis query finds the minimum carbon sequestration achieved in a single year in tropical rainforests in Brazil, and which forest it was. It filters the records based on the country, and returns the name of the forest and the minimum sequestration value.</s>"}
{"text": "<s>[INST] \nWhat is the minimum safety score of vessels that docked in the port of Oakland in the last month and have a cargo weight of more than 5000 tons?\nCREATE TABLE Vessels (ID INT, Name TEXT, CargoWeight INT, SafetyScore INT, DockedAt DATETIME); INSERT INTO Vessels (ID, Name, CargoWeight, SafetyScore, DockedAt) VALUES (1, 'Vessel1', 5000, 80, '2022-01-01 10:00:00'), (2, 'Vessel2', 6000, 85, '2022-01-05 14:30:00'), (3, 'Vessel3', 7000, 90, '2022-02-01 11:00:00'); CREATE TABLE Ports (ID INT, Name TEXT); INSERT INTO Ports (ID, Name) VALUES (1, 'Oakland'), (2, 'San_Francisco'); \n[/INST]\nSELECT MIN(SafetyScore) FROM Vessels WHERE CargoWeight > 5000 AND DockedAt >= DATE_SUB(CURRENT_DATE, INTERVAL 1 MONTH) AND Ports.Name = 'Oakland';\nFind the minimum safety score of vessels docked in the Oakland port in the past month with a cargo weight greater than 5000 tons by joining the Vessels and Ports tables based on the DockedAt column and the Name column respectively, and applying the MIN function on the SafetyScore column.</s>"}
{"text": "<s>[INST] \nWhat was the total revenue generated from programs in 'California'?\nCREATE TABLE Programs_Revenue (program_name VARCHAR(255), location VARCHAR(255), revenue INT); INSERT INTO Programs_Revenue (program_name, location, revenue) VALUES ('Art Education', 'New York', 50000), ('Music Education', 'California', 40000), ('Theater Education', 'New York', 60000); \n[/INST]\nSELECT revenue FROM Programs_Revenue WHERE location = 'California';\nThe SQL query selects the revenue column from the Programs_Revenue table where the location is 'California'. This gives us the total revenue generated from programs in California.</s>"}
{"text": "<s>[INST] \nHow many renewable energy projects were initiated in California in 2020?\nCREATE TABLE renewable_projects (state VARCHAR(20), year INT, num_projects INT); INSERT INTO renewable_projects (state, year, num_projects) VALUES ('California', 2020, 150), ('California', 2019, 140), ('California', 2018, 130), ('Texas', 2020, 120), ('Texas', 2019, 110); \n[/INST]\nSELECT num_projects FROM renewable_projects WHERE state = 'California' AND year = 2020;\nThis query retrieves the number of renewable energy projects initiated in California in 2020 by filtering the renewable_projects table for the state of California and the year 2020.</s>"}
{"text": "<s>[INST] \nHow many building permits were issued per day in CA in 2021?\nCREATE TABLE PermitsByDay (PermitID int, Date date, State varchar(25)); INSERT INTO PermitsByDay (PermitID, Date, State) VALUES (4, '2021-01-01', 'CA'), (5, '2021-02-01', 'CA'), (6, '2021-03-01', 'CA'); \n[/INST]\nSELECT DATEPART(YEAR, Date) AS Year, DATEPART(MONTH, Date) AS Month, DATEPART(DAY, Date) AS Day, COUNT(*) AS PermitsIssued FROM PermitsByDay WHERE State = 'CA' AND YEAR(Date) = 2021 GROUP BY DATEPART(YEAR, Date), DATEPART(MONTH, Date), DATEPART(DAY, Date);\nThis SQL query calculates the number of building permits issued per day in CA in 2021. It uses the COUNT function to count the number of permits, and the GROUP BY clause to group the results by year, month, and day. The WHERE clause is used to filter the results to only include permits from CA and the year 2021.</s>"}
{"text": "<s>[INST] \nDelete records from the 'employee' table where the 'salary' column is below 50000\nCREATE TABLE employee (id INT PRIMARY KEY, name VARCHAR(50), position VARCHAR(50), salary INT); INSERT INTO employee (id, name, position, salary) VALUES (1, 'John Doe', 'Manager', 60000), (2, 'Jane Smith', 'Assistant', 45000); \n[/INST]\nDELETE FROM employee WHERE salary < 50000;\nThis query deletes records from the 'employee' table where the 'salary' column is below 50000. It matches records by the 'salary' column value and removes them from the table.</s>"}
{"text": "<s>[INST] \nDetermine the number of oil spills that have occurred in the Niger Delta and the Caspian Sea.\nCREATE TABLE oil_spills_data(spill_name VARCHAR(255), location VARCHAR(255), year INT, volume INT);INSERT INTO oil_spills_data(spill_name, location, year, volume) VALUES('Santa Barbara Oil Spill','Pacific Ocean',1969,80000),('Deepwater Horizon Oil Spill','Gulf of Mexico',2010,4000000),('Ixtoc I Oil Spill','Gulf of Mexico',1979,3000000),('Montara Oil Spill','Timor Sea',2009,30000),('Kursk Oil Spill','Barents Sea',2000,10000),('Niger Delta Oil Spill','Niger Delta',2011,50000); \n[/INST]\nSELECT location, COUNT(*) AS number_of_spills FROM oil_spills_data WHERE location IN ('Niger Delta', 'Caspian Sea') GROUP BY location;\nThis query filters the oil_spills_data table to only include oil spills in the Niger Delta and the Caspian Sea. It then groups the data by location and calculates the number of oil spills in each location using a COUNT function.</s>"}
{"text": "<s>[INST] \nDelete donations from a specific campaign\nCREATE TABLE Donations (id INT, campaign_id INT, donor_id INT, amount DECIMAL, donation_date DATE); INSERT INTO Donations (id, campaign_id, donor_id, amount, donation_date) VALUES (1, 101, 1001, 50.00, '2021-01-01'); \n[/INST]\nDELETE FROM Donations WHERE campaign_id = 101;\nThis query deletes all records from the Donations table where the campaign_id equals 101.</s>"}
{"text": "<s>[INST] \nDelete records of products with outdated environmental impact assessments.\nCREATE TABLE products (id INT, product_name TEXT, environmental_assessment_date DATE); INSERT INTO products (id, product_name, environmental_assessment_date) VALUES (1, 'Product A', '2020-02-15'), (2, 'Product B', '2022-08-28'), (3, 'Product C', '2019-03-02'); \n[/INST]\nDELETE FROM products WHERE environmental_assessment_date < DATE_SUB(CURRENT_DATE, INTERVAL 2 YEAR);\nThe SQL query deletes records of products with outdated environmental impact assessments by removing rows from the products table where the environmental_assessment_date is older than 2 years from the current date.</s>"}
{"text": "<s>[INST] \nCalculate the total number of organic ingredients sourced from 'Africa'.\nCREATE TABLE suppliers (supplier_id INT PRIMARY KEY, supplier_name VARCHAR(255), region VARCHAR(255));CREATE TABLE ingredients (ingredient_id INT PRIMARY KEY, ingredient_name VARCHAR(255), is_organic BOOLEAN, supplier_id INT, FOREIGN KEY (supplier_id) REFERENCES suppliers(supplier_id)); \n[/INST]\nSELECT COUNT(*) FROM ingredients i JOIN suppliers s ON i.supplier_id = s.supplier_id WHERE s.region = 'Africa' AND is_organic = TRUE;\nThe query uses a join to combine the suppliers and ingredients tables and filters the results for African suppliers and organic ingredients. It then calculates the total number of records for the filtered data.</s>"}
{"text": "<s>[INST] \nWhat is the total CO2 emissions reduction achieved by wind energy projects in Germany, grouped by project type and year of implementation?\nCREATE TABLE wind_energy_projects (id INT, project_type VARCHAR(100), country VARCHAR(50), co2_emissions_reduction FLOAT, implementation_date DATE); INSERT INTO wind_energy_projects (id, project_type, country, co2_emissions_reduction, implementation_date) VALUES (1, 'Onshore Wind Project A', 'Germany', 2000, '2015-01-01'); INSERT INTO wind_energy_projects (id, project_type, country, co2_emissions_reduction, implementation_date) VALUES (2, 'Offshore Wind Project B', 'Germany', 3000, '2016-01-01'); \n[/INST]\nSELECT project_type, YEAR(implementation_date) AS implementation_year, SUM(co2_emissions_reduction) AS total_reduction FROM wind_energy_projects WHERE country = 'Germany' GROUP BY project_type, YEAR(implementation_date);\nThis SQL query calculates the total CO2 emissions reduction achieved by wind energy projects in Germany, grouped by project type and year of implementation. It filters the data to only include wind energy projects in Germany, then groups the data by project type and year of implementation, and calculates the total CO2 emissions reduction for each group using the SUM() function.</s>"}
{"text": "<s>[INST] \nWhat is the percentage of sustainable fabric sourced from each country in 2022?\nCREATE TABLE sourcing (year INT, country VARCHAR(20), fabric_type VARCHAR(20), quantity INT); INSERT INTO sourcing (year, country, fabric_type, quantity) VALUES (2022, 'India', 'sustainable', 3000), (2022, 'India', 'regular', 5000), (2022, 'Brazil', 'sustainable', 4000), (2022, 'Brazil', 'regular', 6000); \n[/INST]\nSELECT country, 100.0 * SUM(CASE WHEN fabric_type = 'sustainable' THEN quantity ELSE 0 END) / SUM(quantity) as pct_sustainable FROM sourcing WHERE year = 2022 GROUP BY country;\nThe SQL query calculates the percentage of sustainable fabric sourced from each country in 2022. It first calculates the total quantity of sustainable fabric sourced from each country by summing the quantity values where the fabric_type is sustainable. Then, it calculates the total quantity of fabric sourced from each country by summing the quantity values regardless of fabric_type. Finally, it calculates the percentage of sustainable fabric sourced from each country by dividing the sum of sustainable fabric quantity by the total fabric quantity and multiplying by 100.0.</s>"}
{"text": "<s>[INST] \nWhat is the average transaction amount for account number 888888888?\nCREATE TABLE transactions (transaction_id INT, account_number INT, amount DECIMAL(10,2), transaction_date DATE); INSERT INTO transactions (transaction_id, account_number, amount, transaction_date) VALUES (1, 888888888, 100.00, '2022-04-01'), (2, 888888888, 200.00, '2022-04-02'), (3, 888888888, 300.00, '2022-04-03'); \n[/INST]\nSELECT AVG(amount) FROM transactions WHERE account_number = 888888888;\nThis SQL query calculates the average transaction amount for account number 888888888 by using the AVG function on the amount column, filtering the data where the account_number column equals 888888888.</s>"}
{"text": "<s>[INST] \nList all climate finance recipients in 2020 that received funding from both public and private sectors, and show the total funding for each recipient.\nCREATE TABLE climate_finance_recipients_2020 (year INT, recipient VARCHAR(20), sector VARCHAR(10), amount FLOAT); INSERT INTO climate_finance_recipients_2020 (year, recipient, sector, amount) VALUES (2020, 'CountryA', 'Public', 5000000), (2020, 'CountryA', 'Private', 3000000), (2020, 'CountryB', 'Public', 4000000), (2020, 'CountryB', 'Private', 1000000), (2020, 'CountryC', 'Public', 4500000), (2020, 'CountryC', 'Private', 5500000); \n[/INST]\nSELECT recipient, SUM(amount) AS total_funding FROM climate_finance_recipients_2020 WHERE year = 2020 AND sector IN ('Public', 'Private') GROUP BY recipient HAVING COUNT(DISTINCT sector) = 2;\nThis SQL query lists all climate finance recipients in 2020 that received funding from both public and private sectors, and shows the total funding for each recipient. It groups the data by the 'recipient' column, filters for the relevant year and sectors, sums the 'amount' column, and applies the HAVING clause to filter for recipients with exactly 2 distinct sectors.</s>"}
{"text": "<s>[INST] \nWhat is the average compliance score for regulators in the West, and their associated producers' prices, using an inner join?\nCREATE TABLE regulators (id INT PRIMARY KEY, name TEXT, region TEXT, compliance_score INT); INSERT INTO regulators (id, name, region, compliance_score) VALUES (1, 'Western Marijuana Enforcement', 'West', 85); CREATE TABLE producers (id INT PRIMARY KEY, name TEXT, region TEXT, product TEXT, quantity INT, price FLOAT); INSERT INTO producers (id, name, region, product, quantity, price) VALUES (1, 'West Growers', 'West', 'Cannabis Topicals', 650, 18); \n[/INST]\nSELECT producers.name, regulators.name, AVG(producers.price * regulators.compliance_score) as avg_score_price FROM producers INNER JOIN regulators ON producers.region = regulators.region GROUP BY producers.name, regulators.name;\nCompute the average score-price for each regulator in the West and their associated producers' prices using an inner join, only if the region matches.</s>"}
{"text": "<s>[INST] \nWhat is the maximum salary for workers in the 'technology' industry?\nCREATE TABLE technology_workers (id INT, name VARCHAR(255), industry VARCHAR(255), salary DECIMAL(10,2)); INSERT INTO technology_workers (id, name, industry, salary) VALUES (1, 'Oliver Black', 'technology', 80000.00), (2, 'Sophia Gray', 'technology', 90000.00); \n[/INST]\nSELECT MAX(salary) FROM technology_workers WHERE industry = 'technology';\nThis SQL query calculates the maximum salary for workers in the 'technology' industry by finding the maximum salary in the technology_workers table where the industry is 'technology'.</s>"}
{"text": "<s>[INST] \nWhat are the product codes and names for products that use raw materials with a quantity greater than 700?\nCREATE TABLE Raw_Materials (raw_material_code TEXT, raw_material_name TEXT, quantity INTEGER); INSERT INTO Raw_Materials (raw_material_code, raw_material_name, quantity) VALUES ('M123', 'Hydrochloric Acid', 500), ('M234', 'Sodium Hydroxide', 800), ('M345', 'Acetic Acid', 300), ('M456', 'B302', 1000); CREATE TABLE Products (product_code TEXT, raw_material_code TEXT); INSERT INTO Products (product_code, raw_material_code) VALUES ('A101', 'M123'), ('B203', 'M234'), ('C405', 'M345'), ('A101', 'M456'); \n[/INST]\nSELECT p.product_code, p.product_name FROM Products p JOIN Raw_Materials rm ON p.raw_material_code = rm.raw_material_code WHERE rm.quantity > 700;\nThis query first identifies raw materials with a quantity greater than 700. It then finds the products that use these raw materials. The result set includes the product codes and names for these products.</s>"}
{"text": "<s>[INST] \nInsert a new heritage site in 'Japan' named 'Meiji Shrine'\nCREATE TABLE heritage_sites (id INT PRIMARY KEY, name TEXT, location TEXT); \n[/INST]\nINSERT INTO heritage_sites (id, name, location) VALUES (1, 'Meiji Shrine', 'Japan');\nThis query inserts a new record into the 'heritage_sites' table with id 1, name 'Meiji Shrine', and location 'Japan'.</s>"}
{"text": "<s>[INST] \nWhat are the total expenses for SpaceX and Blue Origin for their launch vehicles?\nCREATE TABLE spacex_expenses (company VARCHAR(20), launch_vehicle VARCHAR(30), expenses INT); INSERT INTO spacex_expenses (company, launch_vehicle, expenses) VALUES ('SpaceX', 'Falcon 1', 50000000), ('SpaceX', 'Falcon 9', 60000000), ('SpaceX', 'Falcon Heavy', 90000000); CREATE TABLE blue_origin_expenses (company VARCHAR(20), launch_vehicle VARCHAR(30), expenses INT); INSERT INTO blue_origin_expenses (company, launch_vehicle, expenses) VALUES ('Blue Origin', 'New Shepard', 100000000), ('Blue Origin', 'New Glenn', 150000000); \n[/INST]\nSELECT SUM(expenses) FROM spacex_expenses JOIN blue_origin_expenses ON FALSE;\nThe query calculates the total expenses for SpaceX and Blue Origin by joining the two tables on a condition that will never be true (FALSE). This forces a cross join, resulting in the Cartesian product of both tables. The query then sums the expenses for all rows in the result set.</s>"}
{"text": "<s>[INST] \nCount the number of male and female employees, by country, and display the results in a table\nCREATE TABLE Employees (EmployeeID INT, FirstName VARCHAR(50), LastName VARCHAR(50), Country VARCHAR(50), Gender VARCHAR(10), HireDate DATE); INSERT INTO Employees (EmployeeID, FirstName, LastName, Country, Gender, HireDate) VALUES (1, 'John', 'Doe', 'USA', 'Male', '2021-01-01'); INSERT INTO Employees (EmployeeID, FirstName, LastName, Country, Gender, HireDate) VALUES (2, 'Jane', 'Doe', 'Canada', 'Female', '2021-02-01'); \n[/INST]\nSELECT Country, Gender, COUNT(*) as NumberOfEmployees FROM Employees GROUP BY Country, Gender;\nThis query groups employees by their country and gender and calculates the count of employees in each group.</s>"}
{"text": "<s>[INST] \nHow many people from low-income households attended events in California and Massachusetts?\nCREATE TABLE Events (id INT, state VARCHAR(2), city VARCHAR(20), attendees INT, event_date DATE); INSERT INTO Events (id, state, city, attendees, event_date) VALUES (1, 'CA', 'Los Angeles', 500, '2022-01-01'), (2, 'MA', 'Boston', 300, '2022-02-01'), (3, 'CA', 'San Diego', 400, '2022-03-01'); CREATE TABLE Demographics (id INT, state VARCHAR(2), zip INT, income FLOAT); INSERT INTO Demographics (id, state, zip, income) VALUES (1, 'CA', 90000, 30000.00), (2, 'MA', 22000, 40000.00), (3, 'CA', 92000, 25000.00); CREATE TABLE Zipcodes (zip INT, city VARCHAR(20)); INSERT INTO Zipcodes (zip, city) VALUES (90000, 'Los Angeles'), (22000, 'Boston'), (92000, 'San Diego'); \n[/INST]\nSELECT SUM(attendees) FROM Events INNER JOIN Demographics ON Events.state = Demographics.state INNER JOIN Zipcodes ON Events.state = Zipcodes.state WHERE Demographics.income < 30000.00 AND Events.state IN ('CA', 'MA');\nThe SQL query first joins the Events, Demographics, and Zipcodes tables on the state column. It then filters for rows where the income column in the Demographics table is less than 30000.00 and the state is California or Massachusetts. Finally, it selects the sum of the attendees column from the Events table.</s>"}
{"text": "<s>[INST] \nWhat is the combined water consumption by residential and industrial users in 'WaterUsage' table?\nCREATE TABLE WaterUsage (user_type VARCHAR(20), water_consumption INT); INSERT INTO WaterUsage (user_type, water_consumption) VALUES ('Residential', 500), ('Commercial', 800), ('Industrial', 1200); \n[/INST]\nSELECT SUM(water_consumption) FROM WaterUsage WHERE user_type IN ('Residential', 'Industrial');\nThis SQL query calculates the total water consumption by residential and industrial users by summing up the 'water_consumption' values in the 'WaterUsage' table where 'user_type' is either 'Residential' or 'Industrial'.</s>"}
{"text": "<s>[INST] \nWhat is the total training cost for employees in the HR department?\nCREATE TABLE trainings (id INT, employee_id INT, training_name VARCHAR(50), cost FLOAT, training_year INT); INSERT INTO trainings (id, employee_id, training_name, cost, training_year) VALUES (1, 1, 'Data Science', 2000.00, 2021), (2, 1, 'Cybersecurity', 3000.00, 2021), (3, 6, 'IT Fundamentals', 1500.00, 2021), (4, 2, 'Diversity Training', 1000.00, 2021), (5, 2, 'Inclusion Training', 1000.00, 2021), (6, 3, 'HR Onboarding', 500.00, 2021); \n[/INST]\nSELECT SUM(cost) FROM trainings WHERE employee_id IN (SELECT id FROM employees WHERE department = 'HR') AND training_year = 2021;\nThis query calculates the total training cost for employees in the HR department in 2021 by using the SUM function on the cost column, and filtering the records with the WHERE and IN clauses to only include records for HR employees in 2021. The subquery (SELECT id FROM employees WHERE department = 'HR') retrieves the employee_ids for all employees in the HR department.</s>"}
{"text": "<s>[INST] \nWhat is the maximum hectares of any forest in Brazil?\nCREATE TABLE Forests (id INT, name VARCHAR(50), hectares FLOAT, country VARCHAR(50)); INSERT INTO Forests (id, name, hectares, country) VALUES (1, 'Amazon Rainforest', 55000000.0, 'Brazil'); CREATE TABLE Forest_Hectares (id INT, forest_id INT, hectares FLOAT); INSERT INTO Forest_Hectares (id, forest_id, hectares) VALUES (1, 1, 55000000.0); \n[/INST]\nSELECT MAX(hectares) FROM Forest_Hectares WHERE forest_id IN (SELECT id FROM Forests WHERE country = 'Brazil');\nThis query retrieves the maximum hectares value for forests in Brazil from the Forest_Hectares table. It does this by first selecting the forest_id values for forests in Brazil from the Forests table, and then using those forest_id values to filter the Forest_Hectares table and find the maximum hectares value for those forests.</s>"}
{"text": "<s>[INST] \nDisplay the number of properties with inclusive housing policies and their total property price in each city.\nCREATE TABLE properties (property_id INT, price FLOAT, inclusive_housing BOOLEAN, city VARCHAR(255)); \n[/INST]\nSELECT city, COUNT(*) as num_inclusive_properties, SUM(price) as total_price FROM properties WHERE inclusive_housing = TRUE GROUP BY city;\nThe SQL query displays the number of properties (COUNT(*)) with inclusive housing policies (WHERE inclusive_housing = TRUE) and their total property price (SUM(price)) in each city (GROUP BY city) by performing a group by operation on the city column.</s>"}
{"text": "<s>[INST] \nShow the 5 most recent transactions for customers with financial wellbeing scores above 80.\nCREATE TABLE transactions (transaction_id INT, customer_id INT, transaction_date DATE, transaction_amount DECIMAL(10,2)); \n[/INST]\nSELECT * FROM transactions WHERE customer_id IN (SELECT customer_id FROM customers WHERE financial_wellbeing_score > 80) ORDER BY transaction_date DESC FETCH FIRST 5 ROWS ONLY;\nGet the customer IDs with financial wellbeing scores above 80, then select the 5 most recent transactions for those customers.</s>"}
{"text": "<s>[INST] \nWhat is the average age of patients who received group therapy in community health centers located in New York?\nCREATE TABLE community_health_center (center_id INT, name VARCHAR(255), state VARCHAR(255)); INSERT INTO community_health_center (center_id, name, state) VALUES (1, 'Community Health Center 1', 'California'), (2, 'Community Health Center 2', 'New York'); CREATE TABLE patient (patient_id INT, center_id INT, age INT); CREATE TABLE therapy_session (session_id INT, patient_id INT, therapist_id INT, session_type VARCHAR(255)); \n[/INST]\nSELECT AVG(patient.age) FROM patient JOIN therapy_session ON patient.patient_id = therapy_session.patient_id JOIN community_health_center ON patient.center_id = community_health_center.center_id WHERE community_health_center.state = 'New York' AND therapy_session.session_type = 'group';\nThe SQL query calculates the average age of patients who received group therapy in community health centers located in New York. It first joins the patient table with the therapy_session table on the patient_id column. It then joins the community_health_center table with the patient table on the center_id column. The WHERE clause filters the results to only include patients from community health centers in New York who received group therapy. Finally, the AVG function calculates the average age of those patients.</s>"}
{"text": "<s>[INST] \nWhich wildlife habitats have a smaller area than the average area?\nCREATE TABLE Wildlife_Habitat_3 (ID INT, Name VARCHAR(50), Area FLOAT); INSERT INTO Wildlife_Habitat_3 (ID, Name, Area) VALUES (1, 'Habitat1', 80.3), (2, 'Habitat2', 70.8), (3, 'Habitat3', 65.9), (4, 'Habitat4', 55.5), (5, 'Habitat5', 45.4), (6, 'Habitat6', 35.3); \n[/INST]\nSELECT Name FROM Wildlife_Habitat_3 WHERE Area < (SELECT AVG(Area) FROM Wildlife_Habitat_3);\nThis query lists the names of wildlife habitats with a smaller area than the average area by selecting the 'Name' column and filtering the 'Area' column in the 'Wildlife_Habitat_3' table with a subquery and WHERE clause that compares the 'Area' to the average 'Area'.</s>"}
{"text": "<s>[INST] \nWhat are the names and completion dates of all resilience projects in the infrastructure database?\nCREATE TABLE Infrastructure_Projects (Project_ID INT, Project_Name VARCHAR(50), Project_Type VARCHAR(50), Completion_Date DATE); INSERT INTO Infrastructure_Projects (Project_ID, Project_Name, Project_Type, Completion_Date) VALUES (1, 'Seawall', 'Resilience', '2021-02-28'), (2, 'Floodgate', 'Resilience', '2020-12-31'), (3, 'Bridge_Replacement', 'Transportation', '2021-01-31'); \n[/INST]\nSELECT Project_Name, Completion_Date FROM Infrastructure_Projects WHERE Project_Type = 'Resilience';\nThis query retrieves the names and completion dates of all resilience projects by selecting 'Project_Name' and 'Completion_Date' where 'Project_Type' is 'Resilience'.</s>"}
{"text": "<s>[INST] \nWhat is the total number of students with physical impairments and their accommodation types?\nCREATE TABLE Students (StudentID INT, Name VARCHAR(50), DisabilityType VARCHAR(50)); INSERT INTO Students VALUES (1, 'Oliver Lee', 'Physical Impairment'); CREATE TABLE Accommodations (AccommodationID INT, AccommodationType VARCHAR(50), StudentID INT); INSERT INTO Accommodations VALUES (1, 'Wheelchair Access', 1); \n[/INST]\nSELECT COUNT(DISTINCT s.StudentID), a.AccommodationType FROM Students s INNER JOIN Accommodations a ON s.StudentID = a.StudentID WHERE s.DisabilityType = 'Physical Impairment' GROUP BY a.AccommodationType;\nThe SQL query performs an inner join between the Students and Accommodations tables on the StudentID foreign key. It then filters the records where the DisabilityType field in the Students table is 'Physical Impairment'. Finally, it groups the results by accommodation type and calculates the count of distinct students utilizing each accommodation type.</s>"}
{"text": "<s>[INST] \nWhat is the total volume of recycled water in Florida during 2020?\nCREATE TABLE RecycledWater (id INT, state VARCHAR(20), year INT, volume FLOAT); INSERT INTO RecycledWater (id, state, year, volume) VALUES (1, 'Florida', 2020, 500000.0), (2, 'Florida', 2019, 450000.0), (3, 'Georgia', 2020, 550000.0); \n[/INST]\nSELECT SUM(volume) FROM RecycledWater WHERE state = 'Florida' AND year = 2020;\nCalculate the total volume of recycled water by summing the volume column for rows where the state is 'Florida' and year is 2020.</s>"}
{"text": "<s>[INST] \nWhat was the total amount of funding received by museums in Mexico and Nigeria?\nCREATE TABLE Museums (id INT, museum_name VARCHAR(50), country VARCHAR(50), funding_amount DECIMAL(10, 2)); INSERT INTO Museums (id, museum_name, country, funding_amount) VALUES (1, 'Museum', 'Mexico', 100000.00), (2, 'Art Gallery', 'Nigeria', 150000.00), (3, 'History Museum', 'Mexico', 120000.00), (4, 'Culture Center', 'Nigeria', 180000.00); \n[/INST]\nSELECT SUM(funding_amount) FROM Museums WHERE country IN ('Mexico', 'Nigeria');\nThis SQL query uses the SUM() function to find the total amount of funding received by museums in Mexico and Nigeria.</s>"}
{"text": "<s>[INST] \nCount the number of vessels that had an incident in each country\nCREATE TABLE VesselIncidents (id INT, vessel_id INT, country VARCHAR(50), time TIMESTAMP); \n[/INST]\nSELECT country, COUNT(DISTINCT vessel_id) FROM VesselIncidents GROUP BY country;\nThis query counts the number of vessels that had an incident in each country. It groups data by country and calculates the count of distinct vessel_id values.</s>"}
{"text": "<s>[INST] \nList Gaelic football teams with their average ticket sales revenue per game in the Connacht province.\nCREATE TABLE gaelic_football_teams (team_id INT, team_name VARCHAR(50), province VARCHAR(50)); INSERT INTO gaelic_football_teams (team_id, team_name, province) VALUES (1, 'Galway', 'Connacht'), (2, 'Mayo', 'Connacht'), (3, 'Roscommon', 'Connacht'); CREATE TABLE gaelic_football_ticket_sales (team_id INT, sale_date DATE, quantity INT, revenue DECIMAL(10,2)); \n[/INST]\nSELECT gft.team_name, AVG(gfts.revenue/gfts.quantity) as avg_revenue_per_game FROM gaelic_football_ticket_sales gfts JOIN gaelic_football_teams gft ON gfts.team_id = gft.team_id WHERE gft.province = 'Connacht' GROUP BY gft.team_name;\nThis query performs a join between 'gaelic_football_teams' and 'gaelic_football_ticket_sales' based on the 'team_id' foreign key. It calculates the average ticket sales revenue per game for each Gaelic football team in the Connacht province.</s>"}
{"text": "<s>[INST] \nWhat is the total value of assets transferred to a specific address?\nCREATE TABLE asset_transfers (transfer_id INT PRIMARY KEY, asset_id INT, to_address VARCHAR(100), amount DECIMAL(10,2), transfer_time TIMESTAMP); \n[/INST]\nSELECT SUM(amount) AS total_received FROM asset_transfers WHERE to_address = '0x22f2A95f8E1f39C35E204f2F98eA3c0942788067';\nThis query sums the amount column for all records in the asset_transfers table where the to_address column matches the specified value '0x22f2A95f8E1f39C35E204f2F98eA3c0942788067' to calculate the total value of assets transferred to that address.</s>"}
{"text": "<s>[INST] \nUpdate the platform name of the platform with id 3 to 'New Platform Name' in the 'platforms' table\nCREATE TABLE platforms (id INT, platform TEXT); \n[/INST]\nUPDATE platforms SET platform = 'New Platform Name' WHERE id = 3;\nThis SQL query updates the platform name of the platform with an id of 3 to 'New Platform Name' in the 'platforms' table. It does this by using the UPDATE statement, followed by the table name. A SET clause is added to specify the new value, and a WHERE clause is added to specify the condition to filter the records.</s>"}
{"text": "<s>[INST] \nList all habitats and their sizes\nCREATE TABLE habitats (id INT PRIMARY KEY, name VARCHAR(50), location VARCHAR(50), size FLOAT); INSERT INTO habitats (id, name, location, size) VALUES (1, 'Savannah', 'Africa', 5000.0); \n[/INST]\nSELECT name, size FROM habitats;\n1. This command selects data from the 'habitats' table.   2. It selects the 'name' and 'size' columns.   3. This will list all habitats and their sizes.</s>"}
{"text": "<s>[INST] \nWhat is the maximum gas limit for transactions on the Algorand network?\nCREATE TABLE algorand_transactions (gas_limit INT); \n[/INST]\nSELECT MAX(gas_limit) FROM algorand_transactions;\nThe SQL query calculates the maximum gas limit for transactions on the Algorand network. It selects the maximum gas limit from the 'algorand_transactions' table.</s>"}
{"text": "<s>[INST] \nUpdate the species column for all entries in the trees table where the diameter is between 30 and 60 inches to 'Large Tree'\nCREATE TABLE trees (id INT PRIMARY KEY, species VARCHAR(255), diameter FLOAT); \n[/INST]\nUPDATE trees SET species = 'Large Tree' WHERE diameter BETWEEN 30 AND 60;\nThis query updates the species column values to 'Large Tree' for all entries in the trees table where the diameter column value is between 30 and 60.</s>"}
{"text": "<s>[INST] \nWhat is the total number of hospitals and clinics in rural areas of Canada and the United States?\nCREATE TABLE hospitals (id INT, name TEXT, location TEXT, country TEXT); INSERT INTO hospitals (id, name, location, country) VALUES (1, 'Hospital A', 'Rural Canada', 'Canada'), (2, 'Hospital B', 'Rural USA', 'USA'); CREATE TABLE clinics (id INT, name TEXT, location TEXT, country TEXT); INSERT INTO clinics (id, name, location, country) VALUES (1, 'Clinic A', 'Rural Canada', 'Canada'), (2, 'Clinic B', 'Rural USA', 'USA'); \n[/INST]\nSELECT COUNT(*) FROM hospitals WHERE location LIKE '%rural%' UNION ALL SELECT COUNT(*) FROM clinics WHERE location LIKE '%rural%'\nThis query first counts the number of hospitals in rural areas of Canada and the United States, then combines it with the count of clinics in rural areas using the UNION ALL operator.</s>"}
{"text": "<s>[INST] \nFind the number of crimes committed in each neighborhood within a 1-mile radius of city hall.\nCREATE TABLE crimes (id SERIAL PRIMARY KEY, crime_type VARCHAR(255), location POINT); CREATE TABLE neighborhoods (id SERIAL PRIMARY KEY, name VARCHAR(255), location POINT, radius INTEGER); INSERT INTO neighborhoods (name, location, radius) VALUES ('Downtown', '(40.7128, -74.0060)', 1); INSERT INTO crimes (crime_type, location) VALUES ('Larceny', '(40.7128, -74.0060)'), ('Vandalism', '(40.7150, -74.0050)'); \n[/INST]\nSELECT c.crime_type, COUNT(c.id) as total_crimes FROM crimes c, neighborhoods n WHERE ST_DWithin(c.location, n.location, n.radius) GROUP BY c.crime_type;\nThis query calculates the number of crimes committed in each neighborhood within a 1-mile radius of city hall. It uses the ST_DWithin function to find crimes within the specified radius of the city hall location and groups them by crime type, then calculates the total number of crimes for each group.</s>"}
{"text": "<s>[INST] \nWhat is the average delivery time per shipment in Australia?\nCREATE TABLE Warehouses (WarehouseID INT, WarehouseName VARCHAR(50), Country VARCHAR(50)); INSERT INTO Warehouses (WarehouseID, WarehouseName, Country) VALUES (1, 'Australia Warehouse', 'Australia'); CREATE TABLE Shipments (ShipmentID INT, WarehouseID INT, DeliveryTime INT); \n[/INST]\nSELECT AVG(DeliveryTime) / COUNT(*) FROM Shipments WHERE WarehouseID = (SELECT WarehouseID FROM Warehouses WHERE Country = 'Australia');\nFind the average delivery time per shipment in Australia by dividing the average delivery time by the total number of shipments.</s>"}
{"text": "<s>[INST] \nWhich countries are investing the most in accessible technology?\nCREATE TABLE investments (id INT, country VARCHAR(50), amount INT); \n[/INST]\nSELECT country, SUM(amount) as total_investment FROM investments WHERE investments.date BETWEEN '2022-01-01' AND '2022-12-31' GROUP BY country ORDER BY total_investment DESC LIMIT 5;\nThis query selects the country and sums the amount of investments for each country in the year 2022. Lastly, it groups the results by country, orders them in descending order by total investment, and limits the results to the top 5 countries.</s>"}
{"text": "<s>[INST] \nWho are the top 3 threat actors by the number of incidents in the last month?\nCREATE TABLE threat_actors (id INT, actor_name VARCHAR(255), incident_time TIMESTAMP); \n[/INST]\nSELECT actor_name, COUNT(*) as incident_count FROM threat_actors WHERE incident_time >= DATE_SUB(CURRENT_TIMESTAMP, INTERVAL 1 MONTH) GROUP BY actor_name ORDER BY incident_count DESC LIMIT 3;\nThe SQL query selects the actor_name and counts the number of incidents for each threat actor from the threat_actors table where the incident_time is within the last month. It then groups the results by actor_name, orders them by the number of incidents in descending order, and limits the output to the top 3 threat actors.</s>"}
{"text": "<s>[INST] \nWhat is the average salinity for each country in 2022?\nCREATE TABLE country_salinity (date DATE, country VARCHAR(50), salinity FLOAT); INSERT INTO country_salinity (date, country, salinity) VALUES ('2022-01-01', 'India', 34.5); \n[/INST]\nSELECT country, AVG(salinity) as avg_salinity FROM country_salinity WHERE date >= '2022-01-01' AND date <= '2022-12-31' GROUP BY country;\nThe SQL query calculates the average salinity for each country in 2022.</s>"}
{"text": "<s>[INST] \nWhat is the distribution of community policing programs across different boroughs?\nCREATE TABLE borough (id INT, name TEXT); CREATE TABLE community_policing (id INT, borough_id INT, program TEXT); \n[/INST]\nSELECT b.name, c.program FROM borough b JOIN community_policing c ON b.id = c.borough_id GROUP BY b.name, c.program;\nThis query joins the borough table with the community_policing table based on the borough_id, groups the results by the borough.name and community_policing.program, and calculates the count of each combination.</s>"}
{"text": "<s>[INST] \nList the top 3 most energy efficient states in terms of solar power (kWh/m2/day)?\nCREATE TABLE solar_projects (project_id INT, project_name TEXT, state TEXT, efficiency_kwh FLOAT); INSERT INTO solar_projects (project_id, project_name, state, efficiency_kwh) VALUES (1, 'Solar Farm 1', 'California', 0.18), (2, 'Solar Farm 2', 'Nevada', 0.20), (3, 'Solar Farm 3', 'Arizona', 0.19); \n[/INST]\nSELECT state, AVG(efficiency_kwh) as avg_efficiency FROM solar_projects GROUP BY state ORDER BY avg_efficiency DESC LIMIT 3;\nThis query lists the top 3 most energy efficient states in terms of solar power by grouping the 'solar_projects' table by the 'state' column, calculating the average 'efficiency_kwh' for each group, and then ordering the results in descending order by the average efficiency. The 'LIMIT 3' clause limits the results to the top 3.</s>"}
{"text": "<s>[INST] \nWhat is the total number of space missions flown by astronauts who have completed more than 100 hours of flight time?\nCREATE TABLE SpaceMissions (MissionID INT PRIMARY KEY, AstronautID INT, HoursFlown INT); INSERT INTO SpaceMissions (MissionID, AstronautID, HoursFlown) VALUES (1, 1, 150); INSERT INTO SpaceMissions (MissionID, AstronautID, HoursFlown) VALUES (2, 2, 120); \n[/INST]\nSELECT COUNT(*) FROM SpaceMissions SM INNER JOIN Astronauts A ON SM.AstronautID = A.AstronautID WHERE A.HoursFlown > 100;\nJoining the SpaceMissions table with the Astronauts table on the AstronautID field, and filtering astronauts who have completed more than 100 hours of flight time and counting the total number of space missions flown by those astronauts.</s>"}
{"text": "<s>[INST] \nFind the number of unique founders and total funding for companies founded before 2015 in the energy sector.\nCREATE TABLE companies (id INT, name TEXT, industry TEXT, founder_gender TEXT, founded_date DATE); CREATE TABLE funding (company_id INT, amount INT); INSERT INTO companies (id, name, industry, founder_gender, founded_date) VALUES (1, 'EnerGen', 'Energy', 'Male', '2013-01-01'); INSERT INTO funding (company_id, amount) VALUES (1, 1000000); \n[/INST]\nSELECT COUNT(DISTINCT companies.founder_gender) AS unique_founders, SUM(funding.amount) AS total_funding FROM companies INNER JOIN funding ON companies.id = funding.company_id WHERE companies.founded_date < '2015-01-01' AND companies.industry = 'Energy';\nThe SQL query performs an inner join between the companies and funding tables, filters for companies founded before 2015 in the energy sector, calculates the number of unique founders and the total funding, and returns the results.</s>"}
{"text": "<s>[INST] \nWhat is the total number of mining incidents in '2022' for the 'coal_mines' table?\nCREATE TABLE coal_mines(id INT, incident_date DATE, incident_type VARCHAR(255), description TEXT); INSERT INTO coal_mines(id, incident_date, incident_type, description) VALUES (1, '2022-01-01', 'Fire', 'A small fire broke out...'); \n[/INST]\nSELECT COUNT(*) FROM coal_mines WHERE YEAR(incident_date) = 2022 AND incident_type = 'Fire';\nThis query calculates the total number of mining incidents in '2022' for the 'coal_mines' table by using the COUNT(*) function, where the YEAR() of 'incident_date' is '2022' and the 'incident_type' is 'Fire'.</s>"}
{"text": "<s>[INST] \nDelete team 2\nCREATE TABLE players (player_id INT, name VARCHAR(100), position VARCHAR(50), team_id INT); INSERT INTO players (player_id, name, position, team_id) VALUES (1, 'John Doe', 'Forward', 1), (2, 'Jane Smith', 'Goalie', 2); CREATE TABLE teams (team_id INT, name VARCHAR(100), city VARCHAR(100)); INSERT INTO teams (team_id, name, city) VALUES (1, 'Boston Bruins', 'Boston'), (2, 'New York Rangers', 'New York'); \n[/INST]\nDELETE FROM teams WHERE team_id = 2;\nThis query deletes the record for team_id 2 from the teams table.</s>"}
{"text": "<s>[INST] \nWhat is the average salary of employees hired in the last 6 months, broken down by department?\nCREATE TABLE Employees (EmployeeID int, HireDate date, Department varchar(20), Salary decimal(10,2)); INSERT INTO Employees (EmployeeID, HireDate, Department, Salary) VALUES (1, '2022-07-01', 'IT', 80000.00), (2, '2022-06-15', 'IT', 85000.00), (3, '2022-04-30', 'Marketing', 90000.00); \n[/INST]\nSELECT Department, AVG(Salary) FROM Employees WHERE HireDate >= DATEADD(month, -6, GETDATE()) GROUP BY Department;\nThis query calculates the average salary of employees hired in the last 6 months, broken down by department. It uses the GETDATE() function to get the current date, and the DATEADD() function to subtract 6 months from the current date. It then filters for rows where the HireDate is greater than or equal to this date, and uses the AVG function on the Salary column, grouped by the Department column.</s>"}
{"text": "<s>[INST] \nWhat is the percentage of the population with access to clean water in each region?\nCREATE TABLE RegionsCleanWater (Region VARCHAR(50), Population INT, CleanWater INT); INSERT INTO RegionsCleanWater (Region, Population, CleanWater) VALUES ('North', 100000, 90000), ('South', 120000, 100000), ('East', 110000, 95000), ('West', 90000, 85000); \n[/INST]\nSELECT Region, (SUM(CleanWater) / SUM(Population)) * 100 AS CleanWaterPercentage FROM RegionsCleanWater GROUP BY Region;\nThis SQL query calculates the percentage of the population with access to clean water in each region by grouping the RegionsCleanWater table by the Region column and applying the formula (SUM(CleanWater) / SUM(Population)) * 100 to calculate the percentage.</s>"}
{"text": "<s>[INST] \nWhat is the average size of co-owned properties in Seattle?\nCREATE TABLE co_ownership (property_id INT, size FLOAT, city VARCHAR(20)); INSERT INTO co_ownership (property_id, size, city) VALUES (1, 1200.0, 'Seattle'), (2, 1500.0, 'NYC'); \n[/INST]\nSELECT AVG(size) FROM co_ownership WHERE city = 'Seattle';\nThis SQL query calculates the average size of co-owned properties in Seattle by selecting the AVG (average) value of the 'size' column, filtered for rows where the 'city' is 'Seattle'.</s>"}
{"text": "<s>[INST] \nHow many unique strains were available in Oregon dispensaries in 2021?\nCREATE TABLE strains (id INT, name TEXT, origin TEXT); INSERT INTO strains (id, name, origin) VALUES (1, 'Strain A', 'Oregon'); INSERT INTO strains (id, name, origin) VALUES (2, 'Strain B', 'Oregon'); CREATE TABLE inventory (dispensary_id INT, strain_id INT, quantity INT, availability_date DATE); INSERT INTO inventory (dispensary_id, strain_id, quantity, availability_date) VALUES (1, 1, 20, '2021-01-01'); INSERT INTO inventory (dispensary_id, strain_id, quantity, availability_date) VALUES (1, 2, 30, '2021-02-01'); INSERT INTO inventory (dispensary_id, strain_id, quantity, availability_date) VALUES (2, 1, 15, '2021-03-01'); \n[/INST]\nSELECT COUNT(DISTINCT s.id) as unique_strains FROM strains s JOIN inventory i ON s.id = i.strain_id WHERE i.availability_date BETWEEN '2021-01-01' AND '2021-12-31' AND s.origin = 'Oregon';\nJoin the strains and inventory tables on strain_id, filter for strains available in Oregon during 2021, and count the number of unique strains.</s>"}
{"text": "<s>[INST] \nIdentify the number of artworks in the 'ContemporaryArt' genre, grouped by the artist's country of origin.\nCREATE TABLE Artwork (artwork_id INT, artwork_name VARCHAR(30), genre VARCHAR(20), artist_id INT); CREATE TABLE Artist (artist_id INT, artist_name VARCHAR(30), country_of_origin VARCHAR(30)); \n[/INST]\nSELECT Artist.country_of_origin, COUNT(Artwork.artwork_id) FROM Artist INNER JOIN Artwork ON Artist.artist_id = Artwork.artist_id WHERE Artwork.genre = 'ContemporaryArt' GROUP BY Artist.country_of_origin;\nThis query uses an INNER JOIN to combine the 'Artwork' and 'Artist' tables based on the 'artist_id' field. It then filters the results to only include records where the genre is 'ContemporaryArt'. Finally, it groups the results by the artist's country of origin and calculates the count of artworks for each group.</s>"}
{"text": "<s>[INST] \nWho are the top 3 investors in terms of total investment in the renewable energy sector?\nCREATE TABLE investors (investor_id INT, investor_name TEXT, country TEXT); CREATE TABLE investments (investment_id INT, investor_id INT, sector TEXT, amount FLOAT); INSERT INTO investors (investor_id, investor_name, country) VALUES (1, 'Investor A', 'USA'), (2, 'Investor B', 'Canada'), (3, 'Investor C', 'China'), (4, 'Investor D', 'Germany'); INSERT INTO investments (investment_id, investor_id, sector, amount) VALUES (1, 1, 'Renewable Energy', 1000000), (2, 1, 'Healthcare', 500000), (3, 2, 'Renewable Energy', 1500000), (4, 3, 'Technology', 2000000), (5, 4, 'Renewable Energy', 800000); \n[/INST]\nSELECT i.investor_name, SUM(amount) as total_investment FROM investors i JOIN investments j ON i.investor_id = j.investor_id WHERE j.sector = 'Renewable Energy' GROUP BY i.investor_name ORDER BY total_investment DESC LIMIT 3;\nThis query first joins the investors table with the investments table based on the investor_id. Then, it filters the data where sector is 'Renewable Energy'. After that, it groups the records by investor_name and calculates the total investment. Lastly, it orders the results by total_investment in descending order and limits the output to the top 3 records.</s>"}
{"text": "<s>[INST] \nWhat is the average co-ownership price per square foot in the city of Portland, OR?\nCREATE TABLE real_estate(id INT, city VARCHAR(50), price DECIMAL(10,2), size INT); INSERT INTO real_estate VALUES (1, 'Portland', 350000, 1500); \n[/INST]\nSELECT AVG(price/size) FROM real_estate WHERE city = 'Portland';\nThis query calculates the average co-ownership price per square foot in Portland by dividing the price by the size and taking the average of these values.</s>"}
{"text": "<s>[INST] \nWhat is the number of occurrences of each species in the 'species_occurrences' table, and which species have more than 100 occurrences?\nCREATE TABLE species_occurrences (species_id INT, species_name TEXT, other_data TEXT); \n[/INST]\nSELECT species_name, COUNT(species_id) as occurrences FROM species_occurrences GROUP BY species_name HAVING COUNT(species_id) > 100;\nThe SQL query uses the GROUP BY clause to group records by the species_name column, and then calculates the number of occurrences for each group. The HAVING clause filters groups with more than 100 occurrences.</s>"}
{"text": "<s>[INST] \nWhat is the total number of sustainable tours offered in Sydney?\nCREATE TABLE tours (id INT, city TEXT, is_sustainable BOOLEAN); INSERT INTO tours (id, city, is_sustainable) VALUES (1, 'Sydney', true), (2, 'Sydney', false); \n[/INST]\nSELECT COUNT(*) FROM tours WHERE city = 'Sydney' AND is_sustainable = true;\nThe SQL query counts the number of rows in the tours table where the city is 'Sydney' and the tour is sustainable.</s>"}
{"text": "<s>[INST] \nFind mobile subscribers with no network downtime complaints and insert them into broadband_subscribers table\nCREATE TABLE mobile_subscribers (id INT, name VARCHAR(255), data_allowance INT, contract_start DATE); INSERT INTO mobile_subscribers (id, name, data_allowance, contract_start) VALUES (1, 'John Doe', 5000, '2020-01-01'), (2, 'Jane Doe', 3000, '2019-01-01'); CREATE TABLE broadband_subscribers (id INT, name VARCHAR(255), speed INT, contract_start DATE); INSERT INTO broadband_subscribers (id, name, speed, contract_start) VALUES (1, 'Jane Doe', 300, '2019-01-01'); CREATE TABLE customer_complaints (id INT, subscriber_id INT, complaint_date DATE, complaint_type VARCHAR(255)); INSERT INTO customer_complaints (id, subscriber_id, complaint_date, complaint_type) VALUES (1, 1, '2020-02-01', 'Network Downtime'); \n[/INST]\nINSERT INTO broadband_subscribers (id, name, speed, contract_start) SELECT id, name, NULL, contract_start FROM mobile_subscribers WHERE id NOT IN (SELECT subscriber_id FROM customer_complaints WHERE complaint_type = 'Network Downtime');\nInsert records with id, name, NULL speed, and contract_start date from mobile_subscribers table into broadband_subscribers table where id is not present in customer_complaints table with complaint type as 'Network Downtime'.</s>"}
{"text": "<s>[INST] \nWhat is the maximum salary in the marketing department?\nCREATE TABLE employees (id INT, name VARCHAR(50), department VARCHAR(50), salary FLOAT); INSERT INTO employees (id, name, department, salary) VALUES (1, 'John Doe', 'Marketing', 75000.00), (2, 'Jane Smith', 'Marketing', 80000.00), (3, 'Alice Johnson', 'Marketing', 85000.00); \n[/INST]\nSELECT MAX(salary) FROM employees WHERE department = 'Marketing';\nThis SQL query finds the maximum salary in the marketing department. It uses the MAX function to find the highest salary and filters the records to only include employees in the marketing department.</s>"}
{"text": "<s>[INST] \nInsert a new record into the 'defense_diplomacy' table with the following values: (4, 'US-Japan', '2015')\nCREATE TABLE defense_diplomacy (id INT PRIMARY KEY, partnership VARCHAR(50), year INT); \n[/INST]\nINSERT INTO defense_diplomacy (id, partnership, year) VALUES (4, 'US-Japan', 2015);\nThis query inserts a new record into the 'defense_diplomacy' table with the following values: (4, 'US-Japan', 2015).</s>"}
{"text": "<s>[INST] \nFind the number of exoplanet discoveries made by the Kepler and TESS missions.\nCREATE TABLE exoplanets (id INT, name VARCHAR(255), discovery_mission VARCHAR(255), discovery_date DATE); INSERT INTO exoplanets (id, name, discovery_mission, discovery_date) VALUES (1, 'Kepler-22b', 'Kepler', '2011-12-05'); INSERT INTO exoplanets (id, name, discovery_mission, discovery_date) VALUES (2, 'TOI-700d', 'TESS', '2020-01-06'); CREATE VIEW kepler_exoplanets AS SELECT * FROM exoplanets WHERE discovery_mission = 'Kepler'; CREATE VIEW tess_exoplanets AS SELECT * FROM exoplanets WHERE discovery_mission = 'TESS'; \n[/INST]\nSELECT COUNT(*) as num_discoveries FROM exoplanets e INNER JOIN kepler_exoplanets k ON e.id = k.id INNER JOIN tess_exoplanets t ON e.id = t.id;\nFinding the number of exoplanet discoveries made by the Kepler and TESS missions by joining the exoplanets table and the kepler_exoplanets and tess_exoplanets views, and counting the number of joined rows.</s>"}
{"text": "<s>[INST] \nHow many sustainable tours are in the United Kingdom?\nCREATE TABLE sustainable_tours (tour_id INT, tour_name TEXT, country TEXT); INSERT INTO sustainable_tours (tour_id, tour_name, country) VALUES (1, 'Wind Farm Visit', 'UK'), (2, 'Solar Panel Farm', 'UK'); \n[/INST]\nSELECT COUNT(*) FROM sustainable_tours WHERE country = 'UK';\nCount the number of sustainable tours in the United Kingdom by selecting the COUNT function on all records (*) and filtering the data for UK using the WHERE clause.</s>"}
{"text": "<s>[INST] \nWhat is the average price of products in the 'Home' category?\nCREATE TABLE products (product_id int, name varchar(255), category varchar(255), price decimal(5,2)); INSERT INTO products (product_id, name, category, price) VALUES (1, 'Organic Cotton T-Shirt', 'Clothing', 25.99), (2, 'Regular Cotton T-Shirt', 'Clothing', 15.99), (3, 'Reusable Water Bottle', 'Home', 19.99), (4, 'LED Light Bulb', 'Electronics', 9.99); \n[/INST]\nSELECT AVG(price) FROM products WHERE category = 'Home';\nThis query calculates the average price of products in the 'Home' category by filtering the products table where category is 'Home' and then calculating the average price.</s>"}
{"text": "<s>[INST] \nWhat was the total budget allocated for each program in 2022?\nCREATE TABLE Program_Budget (program_id INT, budget_amount DECIMAL(10,2), budget_year INT); INSERT INTO Program_Budget (program_id, budget_amount, budget_year) VALUES (1, 15000.00, 2022), (2, 12000.00, 2022), (3, 18000.00, 2022); \n[/INST]\nSELECT program_id, budget_amount as total_2022_budget FROM Program_Budget WHERE budget_year = 2022 GROUP BY program_id;\nThis query calculates the total budget allocated for each program in 2022 by filtering the budget_year field equal to 2022, grouping by program_id and selecting the budget_amount within each group.</s>"}
{"text": "<s>[INST] \nUpdate the country column in the peacekeeping_operations table with new country values.\nCREATE TABLE peacekeeping_operations (id INT PRIMARY KEY, operation_name VARCHAR(50), country VARCHAR(50), status VARCHAR(50)); INSERT INTO peacekeeping_operations (id, operation_name, country, status) VALUES (3, 'Operation Hope', 'Syria', 'Active'), (4, 'Operation Peace', 'Lebanon', 'Planning'); \n[/INST]\nWITH upd_data AS (UPDATE peacekeeping_operations SET country = 'Syria' WHERE id = 3 RETURNING *) UPDATE peacekeeping_operations SET country = 'Syria' WHERE id IN (SELECT id FROM upd_data);\nA CTE is used to store the records to be updated, and the UPDATE statement references the CTE to update the corresponding records' country column.</s>"}
{"text": "<s>[INST] \nWhat is the total biomass of fish for all species at Location B?\nCREATE TABLE farm_locations (location VARCHAR, fish_id INT); CREATE TABLE fish_stock (fish_id INT, species VARCHAR, biomass FLOAT); INSERT INTO farm_locations (location, fish_id) VALUES ('Location A', 1), ('Location B', 2), ('Location A', 3), ('Location C', 4), ('Location B', 5); INSERT INTO fish_stock (fish_id, species, biomass) VALUES (1, 'Tilapia', 500.0), (2, 'Salmon', 800.0), (3, 'Trout', 300.0), (4, 'Bass', 700.0), (5, 'Tilapia', 600.0); \n[/INST]\nSELECT SUM(fs.biomass) FROM fish_stock fs JOIN farm_locations fl ON fs.fish_id = fl.fish_id WHERE fl.location = 'Location B';\nThis query calculates the total biomass of fish for all species at Location B by joining the two tables on the fish_id column and filtering the records to only include those from Location B, then summing up the biomass values for all the records.</s>"}
{"text": "<s>[INST] \nWhat is the minimum oxygen level recorded in the 'Pacific Ocean'?\nCREATE TABLE oxygen_records (id INTEGER, location TEXT, level FLOAT, date DATE); \n[/INST]\nSELECT MIN(level) FROM oxygen_records WHERE location = 'Pacific Ocean';\nThis query selects the minimum value from the 'level' column where the 'location' is 'Pacific Ocean'.</s>"}
{"text": "<s>[INST] \nCount the number of species records\nCREATE TABLE Species (Name VARCHAR(50) PRIMARY KEY, Population INT); INSERT INTO Species (Name, Population) VALUES ('Coral', 2000), ('Whale Shark', 1500); \n[/INST]\nSELECT COUNT(*) FROM Species;\n* The number of records in the \"Species\" table is counted and returned.</s>"}
{"text": "<s>[INST] \nFind the programs that have received donations from donors who have also volunteered their time?\nCREATE TABLE DonorVolunteer (DonorID INT, ProgramID INT); INSERT INTO DonorVolunteer (DonorID, ProgramID) VALUES (1, 101), (2, 102), (3, 103), (4, 101); \n[/INST]\nSELECT ProgramID FROM DonorVolunteer GROUP BY ProgramID HAVING COUNT(DISTINCT DonorID) > 1;\nThe SQL query groups the DonorVolunteer table by ProgramID and applies the HAVING clause to filter the programs with more than one distinct donor, implying that these donors have also volunteered their time.</s>"}
{"text": "<s>[INST] \nWhat is the maximum depth in the Mariana Trench?\nCREATE TABLE ocean_floors (name TEXT, max_depth REAL); INSERT INTO ocean_floors (name, max_depth) VALUES ('Mariana Trench', 10994), ('Tonga Trench', 10820); \n[/INST]\nSELECT MAX(max_depth) FROM ocean_floors WHERE name = 'Mariana Trench';\nThis query calculates the maximum depth of the Mariana Trench by filtering the 'ocean_floors' table to only include the record with the name 'Mariana Trench' and then using the MAX function to retrieve the maximum depth from this filtered table.</s>"}
{"text": "<s>[INST] \nWhat is the average points scored by Team B in their last 5 games?\nCREATE TABLE team_scores (team_id INT, game_date DATE, points INT); INSERT INTO team_scores (team_id, game_date, points) VALUES (1, '2022-01-01', 85), (1, '2022-01-08', 90), (2, '2022-01-03', 75), (2, '2022-01-10', 80), (2, '2022-01-17', 85), (3, '2022-01-02', 95), (3, '2022-01-09', 100), (3, '2022-01-16', 105); \n[/INST]\nSELECT AVG(points) FROM (SELECT points FROM team_scores WHERE team_id = 2 AND game_date >= (SELECT MAX(game_date) FROM team_scores WHERE team_id = 2) - INTERVAL '180 days' ORDER BY game_date DESC LIMIT 5) AS subquery;\nThis query calculates the average points scored by Team B in their last 5 games using subqueries, aggregate functions (AVG), and date functions. The subquery finds the last 5 games played by Team B, and the outer query calculates the average points scored in those games.</s>"}
{"text": "<s>[INST] \nWhat is the average claim amount for policies in the 'personal_auto' table?\nCREATE TABLE personal_auto (policy_id INT, claim_amount DECIMAL(10,2)); INSERT INTO personal_auto (policy_id, claim_amount) VALUES (1, 250.50), (2, 400.75), (3, 120.00); \n[/INST]\nSELECT AVG(claim_amount) FROM personal_auto;\nThis query calculates the average claim amount for all policies in the 'personal_auto' table. It does this by using the AVG function, which adds up all the 'claim_amount' values and then divides by the count of 'claim_amount' values.</s>"}
{"text": "<s>[INST] \nWhat is the average funding received by startups founded by people from underrepresented communities?\nCREATE TABLE company (name VARCHAR(255), founder_underrepresented BOOLEAN, funding_received INT); INSERT INTO company (name, founder_underrepresented, funding_received) VALUES ('CompanyA', FALSE, 1000000), ('CompanyB', TRUE, 2000000), ('CompanyC', TRUE, 1500000), ('CompanyD', FALSE, 500000); \n[/INST]\nSELECT AVG(company.funding_received) as avg_funding_received FROM company WHERE company.founder_underrepresented = TRUE;\nThe SQL query filters the records where the founder_underrepresented is TRUE and calculates the average of the funding_received column for the filtered records.</s>"}
{"text": "<s>[INST] \nCalculate the production percentage of each product category.\nCREATE TABLE products (id INT, name VARCHAR(50), category VARCHAR(50), production_date DATE); INSERT INTO products (id, name, category, production_date) VALUES (1, 'Eco-friendly Mug', 'Home & Kitchen', '2021-02-01'); INSERT INTO products (id, name, category, production_date) VALUES (2, 'Solar Charger', 'Electronics', '2021-03-15'); \n[/INST]\nSELECT category, (COUNT(*)*100.0 / (SELECT COUNT(*) FROM products)) as production_percentage FROM products GROUP BY category;\nCalculate the production percentage of each product category.</s>"}
{"text": "<s>[INST] \nWhat are the top 3 games by total playtime in the 'game_sessions' table, and what is the total playtime for each?\nCREATE TABLE games (game_id INT, game_name VARCHAR(50)); INSERT INTO games VALUES (1, 'GameA'); INSERT INTO games VALUES (2, 'GameB'); INSERT INTO games VALUES (3, 'GameC'); CREATE TABLE game_sessions (session_id INT, player_id INT, game_id INT, duration INT); INSERT INTO game_sessions VALUES (1, 1, 1, 12); INSERT INTO game_sessions VALUES (2, 1, 2, 15); INSERT INTO game_sessions VALUES (3, 2, 3, 8); INSERT INTO game_sessions VALUES (4, 2, 1, 9); \n[/INST]\nSELECT g.game_name, SUM(gs.duration) as total_playtime FROM game_sessions gs JOIN games g ON gs.game_id = g.game_id GROUP BY gs.game_id ORDER BY total_playtime DESC LIMIT 3;\nThe SQL query joins the 'games' and 'game_sessions' tables and calculates the total playtime for each game. It then orders the results by total playtime in descending order and limits the results to the top 3 games.</s>"}
{"text": "<s>[INST] \nWhat was the total revenue for each product category in Q3 2021?\nCREATE TABLE sales (product_category VARCHAR(255), sales_amount NUMERIC, sale_date DATE); INSERT INTO sales (product_category, sales_amount, sale_date) VALUES ('men_shirts', 500, '2021-07-01'); INSERT INTO sales (product_category, sales_amount, sale_date) VALUES ('women_pants', 800, '2021-07-02'); INSERT INTO sales (product_category, sales_amount, sale_date) VALUES ('children_dresses', 400, '2021-07-03'); \n[/INST]\nSELECT product_category, SUM(sales_amount) FROM sales WHERE sale_date BETWEEN '2021-07-01' AND '2021-09-30' GROUP BY product_category;\nThe query calculates the total revenue for each product category in Q3 2021 by summing the sales_amount for each product_category and filtering the sale_date within Q3 2021 (July 1, 2021 to September 30, 2021), then grouping the results by product_category.</s>"}
{"text": "<s>[INST] \nWhat is the order ID and delivery time for the slowest delivery made by each courier in the 'courier_performances' view, ordered by the slowest delivery time?\nCREATE VIEW courier_performances AS SELECT courier_id, order_id, MAX(delivery_time) as slowest_delivery_time FROM orders GROUP BY courier_id, order_id; \n[/INST]\nSELECT courier_id, order_id, MAX(slowest_delivery_time) as slowest_delivery_time FROM courier_performances GROUP BY courier_id, order_id ORDER BY slowest_delivery_time;\nThe 'courier_performances' view is used to retrieve the order ID and slowest delivery time for each courier. The query groups the results by courier_id and order_id and calculates the maximum delivery time for each courier and order_id. The results are ordered by the slowest delivery time in descending order.</s>"}
{"text": "<s>[INST] \nWhat is the earliest publication date for articles in the 'international' category from the \"articles\" table?\nCREATE TABLE articles (id INT PRIMARY KEY, title TEXT, category TEXT, publication_date DATE, word_count INT, author_id INT); \n[/INST]\nSELECT MIN(publication_date) FROM articles WHERE category = 'international';\nThis SQL query retrieves the earliest publication date for articles in the 'international' category by selecting the MIN() function on the \"publication_date\" column from the \"articles\" table and filtering the results to only include rows where the \"category\" is 'international'.</s>"}
{"text": "<s>[INST] \nWhat is the maximum installed capacity of solar farms in each of the top 5 countries with the most solar farms?\nCREATE TABLE solar_farms (id INT, name VARCHAR(100), country VARCHAR(50), capacity FLOAT, completion_date DATE); INSERT INTO solar_farms (id, name, country, capacity, completion_date) VALUES (1, 'Solarfarm A', 'China', 100, '2010-01-01'); INSERT INTO solar_farms (id, name, country, capacity, completion_date) VALUES (2, 'Solarfarm B', 'USA', 120, '2011-01-01'); \n[/INST]\nSELECT country, MAX(capacity) AS max_capacity FROM solar_farms GROUP BY country ORDER BY max_capacity DESC LIMIT 5;\nThe SQL query calculates the maximum installed capacity of solar farms in each of the top 5 countries with the most solar farms. It first groups the data by country and calculates the maximum capacity for each group using the MAX() function. Then, it orders the results by maximum capacity in descending order and limits the results to the top 5 countries.</s>"}
{"text": "<s>[INST] \nWhat is the total quantity of locally sourced ingredients used by each vendor?\nCREATE TABLE Ingredients (IngredientID INT, Name VARCHAR(50), Quantity INT, VendorID INT, Local BOOLEAN); INSERT INTO Ingredients (IngredientID, Name, Quantity, VendorID, Local) VALUES (1, 'Lettuce', 10, 1, true), (2, 'Tomato', 20, 1, true), (3, 'Cheese', 30, 2, false); \n[/INST]\nSELECT VendorID, SUM(Quantity) FROM Ingredients WHERE Local = true GROUP BY VendorID;\nThis query calculates the total quantity of locally sourced ingredients used by each vendor by summing up the quantity of records where the local field is true and grouping the results by vendor.</s>"}
{"text": "<s>[INST] \nWhat is the percentage of Yttrium exported from India to other countries annually?\nCREATE TABLE YttriumExport(year INT, country VARCHAR(50), percentage DECIMAL(5,2)); INSERT INTO YttriumExport(year, country, percentage) VALUES (2018, 'India', 22.5), (2018, 'USA', 15.0), (2018, 'China', 40.0), (2019, 'India', 25.0), (2019, 'USA', 16.0), (2019, 'China', 39.0); \n[/INST]\nSELECT (SUM(percentage) FILTER (WHERE country = 'India'))/SUM(percentage) FROM YttriumExport;\nCompute the percentage of Yttrium exported from India to other countries annually.</s>"}
{"text": "<s>[INST] \nList the programs in the 'community_education' table\nCREATE TABLE community_education (id INT, program_name VARCHAR(255), target_audience VARCHAR(255), duration_weeks INT); \n[/INST]\nSELECT program_name FROM community_education;\n1. The SELECT statement is used to retrieve data from a table. 2. 'program_name' is specified in the SELECT clause to only get the program names. 3. The table 'community_education' is specified in the FROM clause to get data from that table.</s>"}
{"text": "<s>[INST] \nInsert new food safety records for 'P001' and 'P002'.\nCREATE TABLE food_safety (product_id VARCHAR(10), inspection_date DATE, result BOOLEAN); \n[/INST]\nINSERT INTO food_safety (product_id, inspection_date, result) VALUES ('P001', CURRENT_DATE, true), ('P002', CURRENT_DATE, false);\nThis query inserts new records into the food_safety table for products 'P001' and 'P002' with the current date and a boolean value for the result column.</s>"}
{"text": "<s>[INST] \nWhat are the names of the traditional art forms in Asia?\nCREATE TABLE TraditionalArtForms (id INT, art_form VARCHAR(50), country VARCHAR(50)); INSERT INTO TraditionalArtForms (id, art_form, country) VALUES (1, 'Ukiyo-e', 'Japan'); INSERT INTO TraditionalArtForms (id, art_form, country) VALUES (2, 'Madhubani', 'India'); \n[/INST]\nSELECT TraditionalArtForms.art_form FROM TraditionalArtForms WHERE TraditionalArtForms.country IN ('Afghanistan', 'Bahrain', 'Bangladesh', 'Bhutan', 'Brunei', 'Cambodia', 'China', 'Cyprus', 'Egypt', 'India', 'Indonesia', 'Iran', 'Iraq', 'Israel', 'Japan', 'Jordan', 'Kazakhstan', 'Kuwait', 'Kyrgyzstan', 'Laos', 'Lebanon', 'Malaysia', 'Maldives', 'Mongolia', 'Myanmar', 'Nepal', 'North Korea', 'Oman', 'Pakistan', 'Philippines', 'Qatar', 'Russia', 'Saudi Arabia', 'Singapore', 'South Korea', 'Sri Lanka', 'Syria', 'Tajikistan', 'Thailand', 'Turkey', 'Turkmenistan', 'United Arab Emirates', 'Uzbekistan', 'Vietnam', 'Yemen');\nThis SQL query selects the art forms from the TraditionalArtForms table, filtering for rows with a country in Asia.</s>"}
{"text": "<s>[INST] \nWhat is the average number of professional development courses completed by teachers in the 'History' department?\nCREATE TABLE teachers (id INT, department TEXT, num_courses INT); INSERT INTO teachers (id, department, num_courses) VALUES (1, 'History', 3), (2, 'History', 4), (3, 'History', 5); \n[/INST]\nSELECT AVG(num_courses) FROM teachers WHERE department = 'History';\nThis query calculates the average number of professional development courses completed by teachers in the 'History' department. It uses the AVG() function to calculate the average number of courses and the WHERE clause to filter the results to only include teachers in the 'History' department.</s>"}
{"text": "<s>[INST] \nInsert a new user from India with 500 followers\nCREATE TABLE users (id INT, username VARCHAR(255), followers INT, country VARCHAR(255)); \n[/INST]\nINSERT INTO users (username, followers, country) VALUES ('user_india', 500, 'India');\nThis query inserts a new record into the \"users\" table with a username \"user_india\", 500 followers, and the country set to \"India\".</s>"}
{"text": "<s>[INST] \nWhat is the trend in energy efficiency ratings for buildings in 'City Y' over the last 3 years?\nCREATE TABLE building_energy_efficiency_history (building_id INT, city VARCHAR(255), rating_year INT, rating FLOAT); INSERT INTO building_energy_efficiency_history (building_id, city, rating_year, rating) VALUES (1, 'City Y', 2019, 75), (2, 'City Y', 2019, 80), (3, 'City Y', 2020, 85), (4, 'City Y', 2020, 90), (5, 'City Y', 2021, 95), (6, 'City Y', 2021, 100); \n[/INST]\nSELECT rating_year, rating FROM building_energy_efficiency_history WHERE city = 'City Y';\nThis query retrieves the trend in energy efficiency ratings for buildings in 'City Y' over the last 3 years. It filters the building_energy_efficiency_history table by city to get the data for 'City Y'.</s>"}
{"text": "<s>[INST] \nDisplay community health workers without cultural competency training\nCREATE TABLE CulturalCompetencyTraining (TrainingID INT PRIMARY KEY, MHW_ID INT, TrainingName TEXT, TrainingDate DATE); INSERT INTO CulturalCompetencyTraining (TrainingID, MHW_ID, TrainingName, TrainingDate) VALUES (1, 123, 'Cultural Competency 101', '2021-06-15'); \n[/INST]\nSELECT CommunityHealthWorker.Name FROM CommunityHealthWorker LEFT JOIN CulturalCompetencyTraining ON CommunityHealthWorker.WorkerID = CulturalCompetencyTraining.MHW_ID WHERE CulturalCompetencyTraining.TrainingID IS NULL;\nJoin 'CommunityHealthWorker' and 'CulturalCompetencyTraining' tables on WorkerID, using a LEFT join to retrieve all names from 'CommunityHealthWorker' without matching 'CulturalCompetencyTraining'.</s>"}
{"text": "<s>[INST] \nWhat is the minimum response time for each division?\nCREATE TABLE incidents (id INT, division VARCHAR(255), response_time INT); INSERT INTO incidents (id, division, response_time) VALUES (1, 'LAPD', 20), (2, 'MPD', 25); \n[/INST]\nSELECT division, MIN(response_time) as min_response_time FROM incidents GROUP BY division;\nThis query calculates the minimum response time for each division using the MIN function.</s>"}
{"text": "<s>[INST] \nWhat is the minimum yield for strains in the 'Indica' category?\nCREATE TABLE strains (id INT, name TEXT, category TEXT, yield FLOAT); INSERT INTO strains (id, name, category, yield) VALUES (1, 'Purple Kush', 'Indica', 0.5), (2, 'Northern Lights', 'Indica', 0.6), (3, 'Granddaddy Purple', 'Indica', 0.7), (4, 'Sour Diesel', 'Sativa', 0.6), (5, 'Blue Dream', 'Hybrid', 0.9), (6, 'Green Crack', 'Sativa', 1.0); \n[/INST]\nSELECT MIN(yield) FROM strains WHERE category = 'Indica';\nThis query filters the strains table to only include rows where the category is Indica. Then, it calculates the minimum yield for those rows.</s>"}
{"text": "<s>[INST] \nDisplay all military equipment sales that occurred between Contractor Q and Country E in Q4 of 2018.\nCREATE TABLE EquipmentSales (SaleID INT, Contractor VARCHAR(255), EquipmentType VARCHAR(255), Quantity INT, SalePrice DECIMAL(5, 2), Country VARCHAR(255), Quarter VARCHAR(10), Year INT); INSERT INTO EquipmentSales (SaleID, Contractor, EquipmentType, Quantity, SalePrice, Country, Quarter, Year) VALUES (1, 'Contractor Q', 'Aircraft', 2, 20000000, 'Country E', 'Q4', 2018); \n[/INST]\nSELECT * FROM EquipmentSales WHERE Contractor = 'Contractor Q' AND Country = 'Country E' AND Quarter = 'Q4' AND Year = 2018;\nThis query returns all military equipment sales between Contractor Q and Country E in Q4 of 2018.</s>"}
{"text": "<s>[INST] \nWhat is the maximum amount of water consumed in a single day in the 'environmental_data' table?\nCREATE TABLE environmental_data (id INT, date DATE, water_consumption INT); INSERT INTO environmental_data (id, date, water_consumption) VALUES (1, '2022-01-01', 5000); INSERT INTO environmental_data (id, date, water_consumption) VALUES (2, '2022-01-02', 5500); \n[/INST]\nSELECT MAX(water_consumption) as max_water_consumption FROM environmental_data;\nThis SQL query calculates the maximum amount of water consumed in a single day in the 'environmental_data' table. It uses the MAX function to find the maximum value of the 'water_consumption' column.</s>"}
{"text": "<s>[INST] \nUpdate the \"sustainable_tourism_practices\" table to reflect a new practice for \"Australia\" regarding water conservation\nCREATE TABLE sustainable_tourism_practices (id INT PRIMARY KEY, country TEXT, practice TEXT, implemented_date DATE); \n[/INST]\nUPDATE sustainable_tourism_practices SET practice = 'New water conservation program for tourism industry.' WHERE country = 'Australia';\nThis query updates the sustainable_tourism_practices table to reflect a new practice for \"Australia\" regarding water conservation.</s>"}
{"text": "<s>[INST] \nWhat are the top 5 zip codes with the highest total donation amounts in 'New York'?\nCREATE TABLE donations (id INT, donor_id INT, org_id INT, zip_code TEXT, donation_amount DECIMAL(10,2)); INSERT INTO donations (id, donor_id, org_id, zip_code, donation_amount) VALUES (1, 1, 1, '12345', 100.00); \n[/INST]\nSELECT zip_code, SUM(donation_amount) AS total_donated FROM donations WHERE zip_code LIKE '100%' GROUP BY zip_code ORDER BY total_donated DESC LIMIT 5;\nThe SQL query first filters the donations table to only include rows where the zip code is in New York (zip codes in New York start with '100'). It then groups the donations table by zip code and calculates the total donation amount for each zip code. It then orders the results in descending order based on the total donation amount and selects the top 5 zip codes.</s>"}
{"text": "<s>[INST] \nWhat is the percentage of successful biosensor technology development projects in Australia?\nCREATE TABLE projects (id INT, name VARCHAR(50), location VARCHAR(50), status VARCHAR(50), type VARCHAR(50)); INSERT INTO projects (id, name, location, status, type) VALUES (4, 'Project4', 'Australia', 'Success', 'Biosensor'); \n[/INST]\nSELECT COUNT(*) * 100.0 / (SELECT COUNT(*) FROM projects WHERE type = 'Biosensor' AND location = 'Australia') FROM projects WHERE status = 'Success' AND type = 'Biosensor' AND location = 'Australia';\nThis query calculates the percentage of successful biosensor technology development projects in Australia by dividing the count of successful projects with the type 'Biosensor' in Australia by the total count of projects with the type 'Biosensor' in Australia and multiplying by 100.</s>"}
{"text": "<s>[INST] \nHow many 'Economy' hotels were added in 'California' in 'Q3 2021'?\nCREATE TABLE hotels (hotel_type VARCHAR(20), region VARCHAR(20), added_date DATE); INSERT INTO hotels (hotel_type, region, added_date) VALUES ('Luxury', 'New York', '2021-01-01'), ('Economy', 'California', '2021-07-01'), ('Budget', 'Texas', '2021-03-01'); \n[/INST]\nSELECT COUNT(*) FROM hotels WHERE hotel_type = 'Economy' AND region = 'California' AND EXTRACT(QUARTER FROM added_date) = 3 AND EXTRACT(YEAR FROM added_date) = 2021;\nThis query calculates the number of 'Economy' hotels added in 'California' in Q3 2021 by counting the records in the 'hotels' table where the hotel_type is 'Economy', the region is 'California', and the quarter and year of the added_date column are Q3 2021.</s>"}
{"text": "<s>[INST] \nWhat is the total number of mental health parity cases reported in the Northeast region in 2019?\nCREATE TABLE MentalHealthParity (Id INT, Region VARCHAR(20), ReportDate DATE); INSERT INTO MentalHealthParity (Id, Region, ReportDate) VALUES (1, 'Southwest', '2020-01-01'), (2, 'Northeast', '2019-12-31'), (3, 'Southwest', '2020-06-15'), (4, 'Northeast', '2020-01-10'), (5, 'Southwest', '2020-06-15'), (6, 'Northeast', '2019-03-02'); \n[/INST]\nSELECT COUNT(*) as CountOfCases FROM MentalHealthParity WHERE Region = 'Northeast' AND YEAR(ReportDate) = 2019;\nThis query counts the number of mental health parity cases reported in the Northeast region in 2019. It uses the WHERE clause to filter the data for the specified region and year, and then counts the number of rows that meet the criteria.</s>"}
{"text": "<s>[INST] \nWhat is the maximum lifelong learning score for each subject, grouped by student?\nCREATE TABLE student_lifelong_learning (student_id INT, subject VARCHAR(255), lifelong_learning_score INT); \n[/INST]\nSELECT s.student_id, s.subject, MAX(s.lifelong_learning_score) as max_score FROM student_lifelong_learning s GROUP BY s.student_id, s.subject;\nThis query groups the student_lifelong_learning table by student_id and subject and calculates the maximum lifelong_learning_score for each group.</s>"}
{"text": "<s>[INST] \nHow many policy advocacy initiatives were implemented in the Middle East in 2020?\nCREATE TABLE policy_advocacy (id INT, initiative TEXT, region TEXT, year INT); INSERT INTO policy_advocacy (id, initiative, region, year) VALUES (1, 'Inclusion Program', 'Middle East', 2019), (2, 'Accessible Education', 'Middle East', 2020); \n[/INST]\nSELECT COUNT(*) FROM policy_advocacy WHERE region = 'Middle East' AND year = 2020;\nThis query counts the number of policy advocacy initiatives implemented in the Middle East in 2020 by specifying the condition in the WHERE clause.</s>"}
{"text": "<s>[INST] \nUpdate the result of a specific intelligence operation in the \"intelligence_ops\" table\nCREATE TABLE intelligence_ops (id INT, year INT, location VARCHAR(255), type VARCHAR(255), result VARCHAR(255)); INSERT INTO intelligence_ops (id, year, location, type, result) VALUES (1, 2015, 'Russia', 'Surveillance', 'Success'); \n[/INST]\nUPDATE intelligence_ops SET result = 'Failure' WHERE id = 1;\nThis query updates the result of a specific surveillance operation in the \"intelligence_ops\" table to indicate failure.</s>"}
{"text": "<s>[INST] \nFind the total sales revenue and quantity sold for each product category\nCREATE TABLE products (product_id INT, product_name VARCHAR(50), category VARCHAR(50), price DECIMAL(5,2), quantity INT); INSERT INTO products (product_id, product_name, category, price, quantity) VALUES (1, 'Sativa Flower', 'Flower', 12.50, 250), (2, 'Indica Flower', 'Flower', 13.00, 300), (3, 'Hybrid Flower', 'Flower', 12.75, 200), (4, 'Cannabis Oil', 'Concentrate', 45.00, 100), (5, 'Vape Pen', 'Vape', 35.00, 50); \n[/INST]\nSELECT category, SUM(price * quantity) AS total_sales_revenue, SUM(quantity) AS total_quantity_sold FROM products GROUP BY category;\nThis SQL query calculates the total sales revenue and quantity sold for each product category. It does this by grouping the products table by the category column and then calculating the sum of the price times quantity (total sales revenue) and the sum of the quantity (total quantity sold) for each group.</s>"}
{"text": "<s>[INST] \nWhat are the average and maximum altitudes of satellites in geostationary orbit?\nCREATE TABLE satellites (id INT, name VARCHAR(50), country VARCHAR(50), launch_date DATE, altitude FLOAT, orbit VARCHAR(50)); \n[/INST]\nSELECT AVG(satellites.altitude) as average_altitude, MAX(satellites.altitude) as max_altitude FROM satellites WHERE satellites.orbit = 'geostationary';\nThis query calculates the average and maximum altitudes of satellites in geostationary orbit. It does so by filtering the rows based on the orbit column, using the AVG and MAX functions on the altitude column.</s>"}
{"text": "<s>[INST] \nCount the number of companies in the technology sector with at least one female and one male founder, and list their names.\nCREATE TABLE companies (id INT, name TEXT, industry TEXT, founder_gender TEXT); INSERT INTO companies (id, name, industry, founder_gender) VALUES (1, 'TechNova', 'Technology', 'Female'); INSERT INTO companies (id, name, industry, founder_gender) VALUES (2, 'InnoTech', 'Technology', 'Male'); \n[/INST]\nSELECT companies.name, COUNT(DISTINCT founder_gender) AS founder_diversity FROM companies WHERE industry = 'Technology' GROUP BY companies.name HAVING founder_diversity >= 2;\nThe SQL query performs a group by operation on the companies table, filters for technology companies, counts the number of distinct founder genders, and lists the names of companies with at least one female and one male founder.</s>"}
{"text": "<s>[INST] \nDelete customers from Germany with a balance less than 5000.00.\nCREATE TABLE customers (id INT, name VARCHAR(255), country VARCHAR(255), balance DECIMAL(10, 2)); INSERT INTO customers (id, name, country, balance) VALUES (1, 'John Doe', 'Germany', 4000.00), (2, 'Jane Smith', 'Germany', 6000.00); \n[/INST]\nDELETE FROM customers WHERE country = 'Germany' AND balance < 5000.00;\nThis query deletes customers from Germany with a balance less than 5000.00 by using the DELETE statement and specifying the condition in the WHERE clause.</s>"}
{"text": "<s>[INST] \nWhat was the average agricultural innovation metric per region for the last quarter?\nCREATE TABLE agricultural_innovation_metrics (id INT PRIMARY KEY, region VARCHAR(50), metric_name VARCHAR(50), value DECIMAL(10, 2), measurement_date DATE); \n[/INST]\nSELECT region, AVG(value) as avg_metric FROM agricultural_innovation_metrics WHERE measurement_date >= DATE_SUB(CURDATE(), INTERVAL 3 MONTH) GROUP BY region;\nThis SQL query calculates the average agricultural innovation metric per region for the last quarter. It does this by filtering the records based on the measurement_date column, grouping the records by the region column, and calculating the average value of the value column.</s>"}
{"text": "<s>[INST] \nWhat is the maximum property tax for sustainable urbanism properties in Austin?\nCREATE TABLE tax (id INT, amount FLOAT, property_type VARCHAR(20), city VARCHAR(20)); INSERT INTO tax (id, amount, property_type, city) VALUES (1, 5000, 'sustainable urbanism', 'Austin'), (2, 6000, 'traditional', 'Austin'); \n[/INST]\nSELECT MAX(amount) FROM tax WHERE property_type = 'sustainable urbanism' AND city = 'Austin';\nThis SQL query calculates the maximum property tax for sustainable urbanism properties in Austin by filtering the tax table where property_type is sustainable urbanism and city is Austin, then using the MAX function to find the maximum amount.</s>"}
{"text": "<s>[INST] \nDisplay the number of unique users who interacted with posts about 'music' in each month of 2021.\nCREATE TABLE interactions (user_id INT, post_id INT, timestamp TIMESTAMP); CREATE TABLE posts (id INT, content TEXT); \n[/INST]\nSELECT DATE_FORMAT(timestamp, '%Y-%m') as interaction_month, COUNT(DISTINCT user_id) as monthly_unique_users FROM interactions i JOIN posts p ON i.post_id = p.id WHERE p.content LIKE '%music%' AND YEAR(timestamp) = 2021 GROUP BY interaction_month;\nThis query retrieves the number of unique users who interacted with posts containing 'music' in each month of 2021 by joining interactions and posts tables, filtering by content and timestamp, and grouping by interaction month.</s>"}
{"text": "<s>[INST] \nWhat is the change in production over time for the largest producing mine in Peru?\nCREATE TABLE mines (id INT, name TEXT, location TEXT, type TEXT, production INT, year INT); INSERT INTO mines (id, name, location, type, production, year) VALUES (1, 'Cerro Verde Mine', 'Peru', 'copper', 300000, 2018); INSERT INTO mines (id, name, location, type, production, year) VALUES (2, 'Cerro Verde Mine', 'Peru', 'copper', 320000, 2019); \n[/INST]\nSELECT name, production, year, LAG(production, 1) OVER (PARTITION BY name ORDER BY year) AS prev_production FROM mines WHERE name = 'Cerro Verde Mine' ORDER BY year;\nThis query calculates the change in production over time for the largest producing mine in Peru by filtering the 'mines' table for rows with name 'Cerro Verde Mine' and using the LAG window function to compare the current production value with the previous production value, then ordering the result by 'year'.</s>"}
{"text": "<s>[INST] \nHow many autonomous driving research papers were published by authors from the United States and Germany?\nCREATE TABLE research_papers (title VARCHAR(100), author_country VARCHAR(50), publication_year INT); \n[/INST]\nSELECT COUNT(*) FROM research_papers WHERE author_country IN ('United States', 'Germany') AND publication_year >= 2015;\nThe SQL query counts the number of autonomous driving research papers published by authors from the United States and Germany since 2015 in the 'research_papers' table. It first filters the rows based on the author's country and publication year and then counts the number of rows using the COUNT function.</s>"}
{"text": "<s>[INST] \nHow many sustainable suppliers are there in total for each country?\nCREATE TABLE suppliers (id INT, name VARCHAR(255), country VARCHAR(255), sustainable BOOLEAN); CREATE VIEW sustainable_suppliers AS SELECT name FROM suppliers WHERE sustainable = TRUE; \n[/INST]\nSELECT country, COUNT(*) as total_sustainable_suppliers FROM suppliers WHERE sustainable = TRUE GROUP BY country;\nThis query calculates the total number of sustainable suppliers for each country by grouping the suppliers table by country and aggregating the rows using the COUNT function, while filtering for sustainable suppliers.</s>"}
{"text": "<s>[INST] \nUpdate the 'encounter_date' column in the 'shark_encounters' table, changing '2021-09-12' to '2022-09-12'\nCREATE TABLE shark_encounters (encounter_id INT, species VARCHAR(255), encounter_date DATE); INSERT INTO shark_encounters (encounter_id, species, encounter_date) VALUES (1, 'Oceanic Whitetip Shark', '2021-09-12'), (2, 'Great White Shark', '2022-02-05'); \n[/INST]\nUPDATE shark_encounters SET encounter_date = '2022-09-12' WHERE encounter_date = '2021-09-12';\nThis query uses an UPDATE statement to modify the 'encounter_date' column in the shark_encounters table. It changes any instances of '2021-09-12' to '2022-09-12'.</s>"}
{"text": "<s>[INST] \nWhat is the total number of tickets sold for each sport in the 'ticket_sales' table?\nCREATE TABLE ticket_sales (id INT PRIMARY KEY, event_id INT, sport VARCHAR(50), tickets_sold INT, price DECIMAL(5,2)); CREATE TABLE events (id INT PRIMARY KEY, name VARCHAR(100), date DATE, location VARCHAR(100)); \n[/INST]\nSELECT t.sport, SUM(t.tickets_sold) as total_tickets_sold FROM ticket_sales t JOIN events e ON t.event_id = e.id GROUP BY t.sport;\nThis SQL query calculates the total number of tickets sold for each sport by using a join between the 'ticket_sales' and 'events' tables on the 'event_id' column. It then groups the results by the 'sport' column and calculates the total number of tickets sold for each sport using the SUM function.</s>"}
{"text": "<s>[INST] \nWhat is the total number of electric vehicles in Los Angeles, considering only vehicles with a battery capacity greater than 50kWh?\nCREATE TABLE electric_vehicles (id INT, battery_capacity FLOAT, city VARCHAR(50)); \n[/INST]\nSELECT COUNT(*) FROM electric_vehicles WHERE city = 'Los Angeles' AND battery_capacity > 50;\nThis SQL query calculates the total number of electric vehicles in Los Angeles, considering only vehicles with a battery capacity greater than 50kWh. It does this by using the COUNT function, which returns the number of rows in a table, and filters the electric_vehicles table to only include rows where the city is 'Los Angeles' and the battery_capacity is greater than 50.</s>"}
{"text": "<s>[INST] \nHow many different sustainable fabric types are used in the production of summer fashion trends?\nCREATE TABLE Production (id INT, fabric_id INT, quantity INT, trend VARCHAR(50)); INSERT INTO Production (id, fabric_id, quantity, trend) VALUES (1, 1, 100, 'Summer Fashion'), (2, 2, 75, 'Summer Fashion'), (3, 3, 50, 'Summer Fashion'); CREATE TABLE Fabrics (id INT, name VARCHAR(50), is_sustainable BOOLEAN); INSERT INTO Fabrics (id, name, is_sustainable) VALUES (1, 'Organic Cotton', TRUE), (2, 'Hemp', TRUE), (3, 'Linen', TRUE), (4, 'Polyester', FALSE); \n[/INST]\nSELECT COUNT(DISTINCT Fabrics.name) FROM Production INNER JOIN Fabrics ON Production.fabric_id = Fabrics.id WHERE Fabrics.is_sustainable = TRUE AND Production.trend = 'Summer Fashion';\nThis query calculates the number of different sustainable fabric types used in the production of summer fashion trends. It performs an inner join between the Production and Fabrics tables on the fabric_id column. Then, it filters the resulting table to only include records with a sustainable fabric type and a trend of Summer Fashion. Finally, it counts the number of unique fabric names in the resulting table.</s>"}
{"text": "<s>[INST] \nWhat is the total number of employees in the 'sustainable textiles' industry?\nCREATE TABLE industries (industry_id INT, industry VARCHAR(20));CREATE TABLE employees (employee_id INT, industry_id INT); \n[/INST]\nSELECT COUNT(employees.employee_id) FROM employees INNER JOIN industries ON employees.industry_id = industries.industry_id WHERE industries.industry = 'sustainable textiles';\nThe SQL query calculates the total number of employees in the 'sustainable textiles' industry. It does this by joining the 'employees' table with the 'industries' table on the 'industry_id' column. It then filters the results to only include rows where the industry is 'sustainable textiles'. Finally, it calculates the count of 'employee_id' using the COUNT function.</s>"}
{"text": "<s>[INST] \nDelete companies founded before a specific year\nCREATE TABLE companies (id INT, name TEXT, founded DATE); INSERT INTO companies (id, name, founded) VALUES (1, 'Foobar Inc', '2017-01-01'), (2, 'Gizmos Inc', '2019-06-15'), (3, 'Widgets Inc', '2015-09-27'), (4, 'Doodads Inc', '2018-03-12'), (5, 'Thingamajigs Inc', '2021-01-01'); \n[/INST]\nDELETE FROM companies WHERE founded < '2018-01-01';\nThis query deletes companies founded before the year 2018. We filter the rows to only include companies with a founded date before 2018, and then delete those rows from the companies table.</s>"}
{"text": "<s>[INST] \nWhat is the maximum ocean acidity level measured in the Pacific Ocean?\nCREATE TABLE acidity_measurements (location TEXT, acidity_level REAL); INSERT INTO acidity_measurements (location, acidity_level) VALUES ('Hawaii', 8.1), ('California', 7.9), ('Oregon', 7.8); \n[/INST]\nSELECT MAX(acidity_level) FROM acidity_measurements WHERE location IN ('Hawaii', 'California', 'Oregon');\nSelect the maximum value of the acidity_level column in the acidity_measurements table where the location is in the specified list.</s>"}
{"text": "<s>[INST] \nWhat is the total cost of labor for the project with ID 2?\nCREATE TABLE Costs (CostID INT PRIMARY KEY, CostType TEXT, CostValue FLOAT, ProjectID INT); INSERT INTO Costs (CostID, CostType, CostValue, ProjectID) VALUES (1, 'Labor', 15000.0, 1), (2, 'Labor', 20000.0, 2); \n[/INST]\nSELECT SUM(CostValue) FROM Costs WHERE CostType = 'Labor' AND ProjectID = 2;\nThis query calculates the total cost of labor for the project with ID 2 by summing the CostValue from the Costs table where CostType is 'Labor' and ProjectID is 2.</s>"}
{"text": "<s>[INST] \nList the names and total cargo capacity of container ships operating in the Pacific Ocean.\nCREATE TABLE container_ships (id INT, name VARCHAR(100), cargo_capacity INT, region VARCHAR(50)); \n[/INST]\nSELECT name, SUM(cargo_capacity) FROM container_ships WHERE region = 'Pacific Ocean' GROUP BY name;\nThis query lists the names and total cargo capacities of container ships operating in the Pacific Ocean by selecting all records with 'Pacific Ocean' in the region column, then grouping the results by the name column and calculating the total cargo capacity for each group using the SUM() function.</s>"}
{"text": "<s>[INST] \nWhat is the average revenue per booking for 'Luxury' hotels in 'New York'?\nCREATE TABLE hotels_types (hotel_id INT, type TEXT); CREATE TABLE bookings (booking_id INT, hotel_id INT, revenue FLOAT); \n[/INST]\nSELECT AVG(subquery.revenue) FROM (SELECT hotel_id, AVG(revenue) as revenue FROM bookings WHERE hotel_id IN (SELECT hotel_id FROM hotels_types WHERE type = 'Luxury') GROUP BY hotel_id) as subquery WHERE subquery.hotel_id IN (SELECT hotel_id FROM hotels WHERE city = 'New York');\nThis SQL query calculates the average revenue per booking for Luxury hotels in New York. It does this by using a subquery to average the revenue for each Luxury hotel, and then using another subquery to filter for Luxury hotels in New York. It then calculates the average revenue using the AVG function.</s>"}
{"text": "<s>[INST] \nWhat is the average operating hours for mining equipment in the 'equipment_stats' table that has more than 1000 operating hours?\nCREATE TABLE equipment_stats (id INT, equipment_name VARCHAR(50), operating_hours INT, last_maintenance_date DATE); \n[/INST]\nSELECT AVG(operating_hours) FROM equipment_stats WHERE operating_hours > 1000;\nThe SQL query calculates the average operating hours for mining equipment with more than 1000 operating hours by using the AVG function on the 'operating_hours' column in the 'equipment_stats' table, filtered by the 'operating_hours' column greater than 1000.</s>"}
{"text": "<s>[INST] \nWhich country sources the most organic ingredients?\nCREATE TABLE Ingredients (id INT, product_id INT, country VARCHAR(255), is_organic BOOLEAN); INSERT INTO Ingredients (id, product_id, country, is_organic) VALUES (1, 1, 'India', true), (2, 1, 'China', false), (3, 2, 'Brazil', true); \n[/INST]\nSELECT country, COUNT(*) as total_organic FROM Ingredients WHERE is_organic = true GROUP BY country ORDER BY total_organic DESC LIMIT 1;\nThis query calculates the number of organic ingredients sourced from each country and groups them by country. Afterward, it orders the results in descending order by the total number of organic ingredients and returns the country with the highest count.</s>"}
{"text": "<s>[INST] \nHow many electric taxis are there in Beijing, China?\nCREATE TABLE electric_taxis (taxi_id INT, taxi_type TEXT, city TEXT, in_service INT); \n[/INST]\nSELECT COUNT(*) FROM electric_taxis WHERE city = 'Beijing' AND taxi_type = 'electric';\nThis query counts the number of electric taxis in Beijing, China by selecting the count of all records where the city is Beijing and the taxi_type is electric.</s>"}
{"text": "<s>[INST] \nWhat is the total fish weight and dissolved oxygen level for each species?\nCREATE TABLE Species_DO (Species_Name TEXT, Fish_Weight FLOAT, Dissolved_Oxygen_Level FLOAT); INSERT INTO Species_DO (Species_Name, Fish_Weight, Dissolved_Oxygen_Level) VALUES ('Salmon', 400000, 7.0), ('Trout', 300000, 6.5), ('Shrimp', 600000, 5.5); \n[/INST]\nSELECT Species_Name, SUM(Fish_Weight) OVER (PARTITION BY Species_Name) AS Total_Fish_Weight, Dissolved_Oxygen_Level FROM Species_DO;\nFor each unique Species_Name, calculate the total fish weight using the SUM window function and return the dissolved oxygen level.</s>"}
{"text": "<s>[INST] \nWhat is the average depth of the ocean in the Indian Ocean?\nCREATE TABLE oceanography_data (id INT PRIMARY KEY, location VARCHAR(255), depth FLOAT, salinity FLOAT);CREATE VIEW ocean_by_location AS SELECT location, AVG(depth) FROM oceanography_data GROUP BY location; \n[/INST]\nSELECT AVG(depth) FROM oceanography_data WHERE location = 'Indian Ocean';\nThis query calculates the average depth of the ocean in the Indian Ocean by filtering the 'oceanography_data' table for rows where the 'location' column is equal to 'Indian Ocean' and then calculating the average value of the 'depth' column for those rows.</s>"}
{"text": "<s>[INST] \nWhat is the total number of mental health parity violations for each race/ethnicity?\nCREATE TABLE mental_health_parity (state VARCHAR(50), race_ethnicity VARCHAR(50), violations INT); INSERT INTO mental_health_parity (state, race_ethnicity, violations) VALUES ('California', 'Hispanic', 50), ('California', 'Asian', 30), ('Texas', 'Hispanic', 60), ('Texas', 'African American', 40), ('New York', 'Asian', 70), ('New York', 'White', 80); \n[/INST]\nSELECT race_ethnicity, SUM(violations) FROM mental_health_parity GROUP BY race_ethnicity;\nThe SQL query calculates the total number of mental health parity violations for each race/ethnicity by summing the violations column for each unique race/ethnicity.</s>"}
{"text": "<s>[INST] \nWhat is the total number of open data initiatives by department in the city of Toronto?\nCREATE TABLE department (id INT, name VARCHAR(255)); INSERT INTO department (id, name) VALUES (1, 'Parks'); INSERT INTO department (id, name) VALUES (2, 'Transportation'); CREATE TABLE initiative (id INT, name VARCHAR(255), department_id INT, status VARCHAR(255)); INSERT INTO initiative (id, name, department_id, status) VALUES (1, 'Bike Share', 2, 'open'); INSERT INTO initiative (id, name, department_id, status) VALUES (2, 'Tree Inventory', 1, 'closed'); INSERT INTO initiative (id, name, department_id, status) VALUES (3, 'Park Improvements', 1, 'open'); \n[/INST]\nSELECT SUM(i.id) FROM initiative i JOIN department d ON i.department_id = d.id WHERE d.name = 'Toronto' AND i.status = 'open';\nThis query calculates the total number of open data initiatives in the city of Toronto by department by joining the 'initiative' and 'department' tables on the department_id column, filtering for open initiatives in the city of Toronto, and summing the initiative id's as a proxy for the number of initiatives.</s>"}
{"text": "<s>[INST] \nShow the number of R&B songs released before 1990.\nCREATE TABLE Songs (song_id INT, artist_id INT, title VARCHAR(100), release_year INT, genre VARCHAR(20)); \n[/INST]\nSELECT COUNT(song_id) FROM Songs WHERE genre = 'R&B' AND release_year < 1990;\nThe SQL query counts the number of R&B songs released before 1990 by using the COUNT function on the song_id column, filtering the data where the genre is R&B and the release_year is less than 1990.</s>"}
{"text": "<s>[INST] \nShow the total production volume for each mine and year in the \"mine_production\", \"mines\", and \"calendar\" tables\nCREATE TABLE mines (id INT, name VARCHAR(20)); INSERT INTO mines (id, name) VALUES (1, 'Golden Mine'), (2, 'Silver Mine'); CREATE TABLE calendar (year INT); INSERT INTO calendar (year) VALUES (2020), (2021), (2022); CREATE TABLE mine_production (mine_id INT, year INT, volume INT); INSERT INTO mine_production (mine_id, year, volume) VALUES (1, 2020, 1000), (1, 2021, 1200), (2, 2022, 1500); \n[/INST]\nSELECT m.name, c.year, SUM(mp.volume) as total_volume FROM mines m JOIN mine_production mp ON m.id = mp.mine_id JOIN calendar c ON mp.year = c.year GROUP BY m.name, c.year;\nThis query shows the total production volume for each mine and year by joining the \"mines\", \"calendar\", and \"mine_production\" tables on the mine_id and year columns, then grouping the results by mine name and year and calculating the sum of the volume column for each group.</s>"}
{"text": "<s>[INST] \nWhat is the total runtime of horror movies?\nCREATE TABLE movies (id INT, title VARCHAR(255), genre VARCHAR(255), runtime INT); INSERT INTO movies (id, title, genre, runtime) VALUES (1, 'Movie1', 'Horror', 90), (2, 'Movie2', 'Comedy', 120), (3, 'Movie3', 'Horror', 110), (4, 'Movie4', 'Action', 130); \n[/INST]\nSELECT SUM(runtime) FROM movies WHERE genre = 'Horror';\nThis query calculates the total runtime of horror movies by filtering the 'movies' table where the 'genre' column is equal to 'Horror' and then calculating the sum of the 'runtime' column.</s>"}
{"text": "<s>[INST] \nShow the total budget for each type of infrastructure project in the 'rural_infrastructure' table.\nCREATE TABLE infrastructure_types (type VARCHAR(255), category VARCHAR(255)); INSERT INTO infrastructure_types (type, category) VALUES ('Dam Construction', 'Water Resources'), ('Well Digging', 'Water Resources'), ('Irrigation System', 'Water Resources'), ('Grain Storage', 'Food Security'); CREATE TABLE rural_infrastructure (name VARCHAR(255), type VARCHAR(255), budget INT); INSERT INTO rural_infrastructure (name, type, budget) VALUES ('Dam Construction', 'Water Resources', 400000), ('Well Digging', 'Water Resources', 300000), ('Irrigation System', 'Water Resources', 700000), ('Grain Storage', 'Food Security', 500000); \n[/INST]\nSELECT type, SUM(budget) FROM rural_infrastructure GROUP BY type;\nThe SQL query groups the 'rural_infrastructure' table by the 'type' column and calculates the total budget for each group using the SUM function.</s>"}
{"text": "<s>[INST] \nHow many tickets were sold for each sports type in the first half of 2022?\nCREATE TABLE ticket_sales (sales_id INT, sales_date DATE, sports_type VARCHAR(50), tickets_sold INT); INSERT INTO ticket_sales (sales_id, sales_date, sports_type, tickets_sold) VALUES (1, '2022-01-01', 'Football', 500), (2, '2022-01-03', 'Basketball', 300), (3, '2022-01-05', 'Hockey', 700), (4, '2022-02-01', 'Football', 600), (5, '2022-02-03', 'Basketball', 400), (6, '2022-02-05', 'Hockey', 800), (7, '2022-03-01', 'Football', 550), (8, '2022-03-03', 'Basketball', 350), (9, '2022-03-05', 'Hockey', 750); \n[/INST]\nSELECT sports_type, SUM(tickets_sold) AS tickets_sold FROM ticket_sales WHERE MONTH(sales_date) IN (1, 2, 3, 4, 5, 6) GROUP BY sports_type;\nThis query returns the total number of tickets sold for each sports type in the first half of 2022 by filtering the ticket_sales table for sales dates in the first six months of the year and then grouping the results by sports_type.</s>"}
{"text": "<s>[INST] \nHow many concerts were held each month in 2022 by artists from the USA?\nCREATE TABLE ConcertData (ArtistCountry TEXT, Month TEXT(2), Year INTEGER, NumOfConcerts INTEGER); INSERT INTO ConcertData (ArtistCountry, Month, Year, NumOfConcerts) VALUES ('USA', '01', 2022, 20), ('UK', '02', 2022, 15), ('Canada', '03', 2022, 18), ('Australia', '04', 2022, 10), ('USA', '05', 2022, 14); \n[/INST]\nSELECT Month, SUM(NumOfConcerts) as TotalConcerts FROM ConcertData WHERE ArtistCountry = 'USA' AND Year = 2022 GROUP BY Month;\nThe SQL query calculates the number of concerts held each month in the ConcertData table that has 'USA' as the artist country and 2022 as the year. It then groups the results by month and calculates the total number of concerts.</s>"}
{"text": "<s>[INST] \nWhich indica strains are sold in both California and Nevada?\nCREATE TABLE StrainData2 (StrainName VARCHAR(30), State VARCHAR(20)); INSERT INTO StrainData2 (StrainName, State) VALUES ('Blue Dream', 'California'), ('Sour Diesel', 'California'), ('OG Kush', 'California'), ('Durban Poison', 'Nevada'), ('Girl Scout Cookies', 'Nevada'), ('Blue Dream', 'Nevada'); \n[/INST]\nSELECT StrainName FROM StrainData2 WHERE State IN ('California', 'Nevada') GROUP BY StrainName HAVING COUNT(DISTINCT State) = 2 AND StrainName LIKE '%Indica%';\nThe SQL query selects the StrainName column from the StrainData2 table, filters the results to only include rows where the State column is either 'California' or 'Nevada', and groups the results by the StrainName column. The query then uses the HAVING clause to filter the results to only include groups that contain distinct values for the State column and where the StrainName contains the word 'Indica'. This results in a list of all indica strains of cannabis that are sold in both California and Nevada.</s>"}
{"text": "<s>[INST] \nWhat is the average depth of the deepest point in each ocean?\nCREATE TABLE ocean_floors (ocean_id INT, ocean_name VARCHAR(255), deepest_point_depth DECIMAL(10,2), PRIMARY KEY(ocean_id)); INSERT INTO ocean_floors (ocean_id, ocean_name, deepest_point_depth) VALUES (1, 'Pacific Ocean', 36102), (2, 'Atlantic Ocean', 8605), (3, 'Indian Ocean', 7258), (4, 'Southern Ocean', 7290), (5, 'Arctic Ocean', 5449); \n[/INST]\nSELECT AVG(deepest_point_depth) FROM ocean_floors;\nWe calculate the average depth of the deepest point in each ocean by selecting the average of the deepest_point_depth column in the ocean_floors table.</s>"}
{"text": "<s>[INST] \nCalculate the total donation amount for each category, pivoted to display categories as columns\nCREATE TABLE donations (donation_id INT, donation_amount DECIMAL(10,2), donation_category VARCHAR(255)); INSERT INTO donations (donation_id, donation_amount, donation_category) VALUES (1, 50.00, 'Food'), (2, 100.00, 'Clothing'), (3, 250.00, 'Education'), (4, 300.00, 'Food'), (5, 800.00, 'Health'); \n[/INST]\nSELECT SUM(CASE WHEN donation_category = 'Food' THEN donation_amount ELSE 0 END) as food, SUM(CASE WHEN donation_category = 'Clothing' THEN donation_amount ELSE 0 END) as clothing, SUM(CASE WHEN donation_category = 'Education' THEN donation_amount ELSE 0 END) as education, SUM(CASE WHEN donation_category = 'Health' THEN donation_amount ELSE 0 END) as health FROM donations;\nThis query calculates the total donation amount for each category by using the SUM function with a conditional CASE statement to filter the donation_category column. The result is pivoted to display the categories as columns.</s>"}
{"text": "<s>[INST] \nDisplay community development initiatives and their respective lead organizations from the 'rural_development' database\nCREATE TABLE community_development (id INT, initiative VARCHAR(50), description TEXT, lead_organization VARCHAR(50)); INSERT INTO community_development (id, initiative, description, lead_organization) VALUES (1, 'Youth Center', 'A place for local youth to gather and learn', 'Local NGO'); INSERT INTO community_development (id, initiative, description, lead_organization) VALUES (2, 'Community Garden', 'A green space for residents to grow food', 'Municipal Government'); \n[/INST]\nSELECT initiative, lead_organization FROM community_development;\nThis query retrieves all community development initiatives and their respective lead organizations directly from the 'community_development' table, which already contains the required information.</s>"}
{"text": "<s>[INST] \nWhat is the total capacity of all cargo ships in the 'cargo_fleet' table?\nCREATE TABLE cargo_fleet (ship_id INT, ship_name VARCHAR(50), capacity INT); INSERT INTO cargo_fleet (ship_id, ship_name, capacity) VALUES (1, 'MSC Maya', 192240), (2, 'OOCL Hong Kong', 210000); \n[/INST]\nSELECT SUM(capacity) FROM cargo_fleet;\nThis SQL query calculates the total capacity of all cargo ships in the 'cargo_fleet' table by summing up the 'capacity' column values using the SUM() aggregate function.</s>"}
{"text": "<s>[INST] \nInsert a new record for a soldier with Name 'Mary Johnson', Rank 'Lieutenant', and EntryYear 2020.\nCREATE TABLE Soldiers (SoldierID INT, Name VARCHAR(50), Rank VARCHAR(20), EntryYear INT); INSERT INTO Soldiers (SoldierID, Name, Rank, EntryYear) VALUES (1, 'John Doe', 'Captain', 1995), (2, 'Jane Smith', 'Lieutenant', 2002); \n[/INST]\nINSERT INTO Soldiers (Name, Rank, EntryYear) VALUES ('Mary Johnson', 'Lieutenant', 2020);\nThe INSERT statement adds a new record to the Soldiers table for a soldier named 'Mary Johnson' with the rank of 'Lieutenant' and the EntryYear of 2020.</s>"}
{"text": "<s>[INST] \nHow many climate adaptation projects were implemented in Small Island Developing States (SIDS) in the last 3 years?\nCREATE TABLE climate_adaptation_projects (project VARCHAR(50), location VARCHAR(50), year INT); INSERT INTO climate_adaptation_projects (project, location, year) VALUES ('Sea Level Rise Mitigation', 'Maldives', 2019), ('Water Management', 'Barbados', 2020), ('Disaster Risk Reduction', 'Cape Verde', 2021), ('Coastal Protection', 'Marshall Islands', 2021); CREATE TABLE sids (location VARCHAR(50), sids_status VARCHAR(50)); INSERT INTO sids (location, sids_status) VALUES ('Maldives', 'SIDS'), ('Barbados', 'SIDS'), ('Cape Verde', 'SIDS'), ('Marshall Islands', 'SIDS'); \n[/INST]\nSELECT COUNT(*) FROM climate_adaptation_projects cp INNER JOIN sids s ON cp.location = s.location WHERE s.sids_status = 'SIDS' AND cp.year BETWEEN 2019 AND 2021;\nJoins the climate_adaptation_projects and sids tables on the location column. Filters the results based on the sids_status and year columns. Calculates the number of records for the matching records.</s>"}
{"text": "<s>[INST] \nHow many exhibitions were hosted in total by the 'Tate Modern' and 'MoMA' in the 'Contemporary' movement?\nCREATE TABLE Exhibitions (exhibition_id INT, museum_name VARCHAR(255), movement VARCHAR(255), exhibition_year INT); \n[/INST]\nSELECT SUM(exhibition_count) FROM (SELECT COUNT(*) as exhibition_count FROM Exhibitions WHERE museum_name = 'Tate Modern' AND movement = 'Contemporary' UNION ALL SELECT COUNT(*) as exhibition_count FROM Exhibitions WHERE museum_name = 'MoMA' AND movement = 'Contemporary') as subquery;\nThis query counts the total number of exhibitions hosted by the 'Tate Modern' and 'MoMA' in the 'Contemporary' movement by summing up the exhibition counts for each museum where movement is 'Contemporary' and grouping the results by museum_name.</s>"}
{"text": "<s>[INST] \nProvide the names and locations of all national security agencies in the Asia-Pacific region\nCREATE TABLE national_security_agencies (id INT, name TEXT, location TEXT); INSERT INTO national_security_agencies (id, name, location) VALUES (1, 'Defence Intelligence Organisation', 'Australia'), (2, 'National Security Bureau', 'Taiwan'), (3, 'National Intelligence Service', 'South Korea'); \n[/INST]\nSELECT name, location FROM national_security_agencies WHERE location IN ('Australia', 'Taiwan', 'South Korea');\nThis query lists the names and locations of all national security agencies in the Asia-Pacific region by selecting the name and location of all records in the national_security_agencies table where the location is either Australia, Taiwan or South Korea.</s>"}
{"text": "<s>[INST] \nWhat is the number of cases handled by each restorative justice facilitator, broken down by facilitator name, case type, and year, for facilitators located in the city of Los Angeles?\nCREATE TABLE RestorativeJusticeFacilitators (FacilitatorName text, City text, CaseType text, Year int, NumCases int); INSERT INTO RestorativeJusticeFacilitators VALUES ('Facilitator1', 'LA', 'Assault', 2022, 15, '2022-01-01'), ('Facilitator1', 'LA', 'Theft', 2022, 10, '2022-01-01'), ('Facilitator2', 'NY', 'Assault', 2022, 12, '2022-01-01'), ('Facilitator2', 'NY', 'Theft', 2022, 8, '2022-01-01'); \n[/INST]\nSELECT FacilitatorName, CaseType, Year, SUM(NumCases) FROM RestorativeJusticeFacilitators WHERE City = 'LA' GROUP BY FacilitatorName, CaseType, Year;\nThe SQL query uses the GROUP BY clause to group the records by FacilitatorName, CaseType, and Year, then calculates the sum of NumCases for each group, but only for facilitators located in the city of Los Angeles.</s>"}
{"text": "<s>[INST] \nWhat is the average number of years of experience for employees in the Engineering department who have a master's degree?\nCREATE TABLE Employees (EmployeeID INT, Department VARCHAR(20), YearsOfExperience INT, HasMastersDegree BOOLEAN); INSERT INTO Employees (EmployeeID, Department, YearsOfExperience, HasMastersDegree) VALUES (1, 'Engineering', 10, true), (2, 'Finance', 8, false), (3, 'Engineering', 12, true); \n[/INST]\nSELECT AVG(YearsOfExperience) FROM Employees WHERE Department = 'Engineering' AND HasMastersDegree = true;\nThis query calculates the average number of years of experience for employees in the Engineering department who have a master's degree. It does so by filtering the Employees table to only include rows where the Department is 'Engineering' and HasMastersDegree is true, and then calculating the average of the YearsOfExperience column for those rows.</s>"}
{"text": "<s>[INST] \nFind the total quantity of zinc and lead extracted in India since 2016.\nCREATE TABLE minerals_extracted (id INT PRIMARY KEY, mine_site_id INT, mineral VARCHAR(255), quantity INT, extraction_year INT, FOREIGN KEY (mine_site_id) REFERENCES mine_sites(id)); CREATE TABLE mine_sites (id INT PRIMARY KEY, name VARCHAR(255), location VARCHAR(255), type VARCHAR(255)); \n[/INST]\nSELECT SUM(quantity) as total_quantity FROM minerals_extracted WHERE mineral IN ('zinc', 'lead') AND extraction_year >= 2016 AND location = 'India';\nThis query calculates the total quantity of zinc and lead extracted in India since 2016.</s>"}
{"text": "<s>[INST] \nWhat is the minimum balance for customers in the Africa region?\nCREATE TABLE accounts (account_id INT, region VARCHAR(20), balance DECIMAL(10,2)); INSERT INTO accounts (account_id, region, balance) VALUES (1, 'Africa', 1000.00), (2, 'Europe', 500.00); \n[/INST]\nSELECT MIN(balance) FROM accounts WHERE region = 'Africa';\nFind the minimum balance for customers in the Africa region by using the MIN function on the balance column, filtering for rows with region equal to 'Africa'.</s>"}
{"text": "<s>[INST] \nList the top 5 countries with the most diverse traditional music in Africa, ranked by the number of unique music genres.\nCREATE TABLE Music (MusicID INT, MusicName VARCHAR(255), Country VARCHAR(255), PRIMARY KEY (MusicID)); \n[/INST]\nSELECT Country, COUNT(DISTINCT MusicName) AS UniqueGenres FROM Music WHERE Country IN ('Western Africa', 'Northern Africa', 'Southern Africa', 'Eastern Africa', 'Central Africa') GROUP BY Country ORDER BY UniqueGenres DESC LIMIT 5;\nThe SQL query lists the top 5 countries with the most diverse traditional music in Africa, ranked by the number of unique music genres. It creates a table named Music with columns MusicID, MusicName, and Country. The query then groups the results by country and calculates the number of unique music genres using the COUNT(DISTINCT MusicName) function. Finally, the query orders the results in descending order and limits the results to the top 5 countries.</s>"}
{"text": "<s>[INST] \nWhich species have a higher carbon sequestration than the habitat average?\nCREATE TABLE species (id INT, name VARCHAR(255), carbon_sequestration FLOAT, habitat_id INT); INSERT INTO species (id, name, carbon_sequestration, habitat_id) VALUES (1, 'Species1', 123.45, 1); INSERT INTO species (id, name, carbon_sequestration, habitat_id) VALUES (2, 'Species2', 234.56, 2); CREATE TABLE habitat (id INT, name VARCHAR(255), carbon_sequestration_avg FLOAT); INSERT INTO habitat (id, name, carbon_sequestration_avg) VALUES (1, 'Habitat1', 150); INSERT INTO habitat (id, name, carbon_sequestration_avg) VALUES (2, 'Habitat2', 200); CREATE TABLE region (id INT, name VARCHAR(255)); INSERT INTO region (id, name) VALUES (1, 'Region1'); INSERT INTO region (id, name) VALUES (2, 'Region2'); \n[/INST]\nSELECT s.name, s.carbon_sequestration  FROM species s  JOIN habitat h ON s.habitat_id = h.id  WHERE s.carbon_sequestration > h.carbon_sequestration_avg;\nWe filter the species table to only include rows where the carbon_sequestration level is higher than the habitat average (s.carbon_sequestration > h.carbon_sequestration_avg).</s>"}
{"text": "<s>[INST] \nWhat is the average number of vulnerabilities per month in 2021 and 2022?\nCREATE TABLE vulnerabilities (id INT, name TEXT, category TEXT, severity TEXT, date_discovered DATE); INSERT INTO vulnerabilities (id, name, category, severity, date_discovered) VALUES (1, 'SQL Injection', 'Application', 'Low', '2021-02-01'), (2, 'Remote Code Execution', 'Network', 'Critical', '2022-03-01'); \n[/INST]\nSELECT DATE_FORMAT(date_discovered, '%Y-%m') as month, COUNT(*) as count FROM vulnerabilities WHERE date_discovered >= '2021-01-01' AND date_discovered < '2023-01-01' GROUP BY month;\nThis query selects the month and count of all vulnerabilities that were discovered in 2021 and 2022. It uses the WHERE clause to filter the results based on the date_discovered column. The query then groups the results by month and calculates the count for each month.</s>"}
{"text": "<s>[INST] \nWhat is the average depth of open ocean habitats?\nCREATE TABLE species (id INT, name VARCHAR(255), habitat VARCHAR(255), depth FLOAT); INSERT INTO species (id, name, habitat, depth) VALUES (1, 'Clownfish', 'Coral Reef', 20.0); INSERT INTO species (id, name, habitat, depth) VALUES (2, 'Blue Whale', 'Open Ocean', 2000.0); INSERT INTO species (id, name, habitat, depth) VALUES (3, 'Sea Otter', 'Kelp Forest', 50.0); \n[/INST]\nSELECT AVG(depth) FROM species WHERE habitat = 'Open Ocean';\nCalculate the average depth of open ocean habitats by finding the average of the 'depth' column in the 'species' table, filtered to only include rows with a habitat of 'Open Ocean'.</s>"}
{"text": "<s>[INST] \nFind the total number of indigenous communities in the 'Arctic_Communities' table that have a population size greater than any community in the 'Antarctic_Communities' table.\nCREATE TABLE Arctic_Communities (name TEXT, population INTEGER); CREATE TABLE Antarctic_Communities (name TEXT, population INTEGER); \n[/INST]\nSELECT COUNT(*) FROM Arctic_Communities WHERE Arctic_Communities.population > (SELECT MAX(population) FROM Antarctic_Communities)\nThe SQL query calculates the maximum population size in the 'Antarctic_Communities' table, and then uses this value to filter the records in the 'Arctic_Communities' table to find the number of communities with a population size greater than the maximum population size in the 'Antarctic_Communities' table.</s>"}
{"text": "<s>[INST] \nWhat is the total volume of water consumed by the industrial sector in the state of Florida in 2020?\nCREATE TABLE Water_Usage (Year INT, Sector VARCHAR(20), Volume INT); INSERT INTO Water_Usage (Year, Sector, Volume) VALUES (2019, 'Industry', 12300000), (2018, 'Industry', 12000000), (2020, 'Industry', 12500000); \n[/INST]\nSELECT SUM(Volume) FROM Water_Usage WHERE Year = 2020 AND Sector = 'Industry';\nThe SQL query calculates the total volume of water consumed by the industrial sector in Florida in 2020 by using the SUM function on the Volume column, and filtering the data for the year 2020 and the sector Industry using the WHERE clause.</s>"}
{"text": "<s>[INST] \nFind the top 3 cities with the highest number of connected devices and the total number of connected devices in each city.\nCREATE TABLE network_towers (tower_id INT, city VARCHAR(50), connected_devices INT); INSERT INTO network_towers VALUES (1, 'CityA', 50), (2, 'CityB', 60), (3, 'CityC', 70); \n[/INST]\nSELECT city, SUM(connected_devices) as total_connected_devices FROM (SELECT city, connected_devices, RANK() OVER(PARTITION BY city ORDER BY connected_devices DESC) as rank FROM network_towers) ranked_towers WHERE rank <= 3 GROUP BY city;\nRanks the network towers by the number of connected devices in descending order for each city by using the RANK() window function. Then selects the top 3 cities with the highest number of connected devices and calculates the total number of connected devices in each city.</s>"}
{"text": "<s>[INST] \nWhat is the average fare amount for each route, excluding routes with no fare history?\nCREATE TABLE fares (fare_id INT, route_id INT, fare_amount DECIMAL(5,2), fare_date DATE); INSERT INTO fares VALUES (1, 1, 7.00, '2021-01-01'); \n[/INST]\nSELECT f.route_id, AVG(f.fare_amount) FROM fares f WHERE f.route_id IN (SELECT DISTINCT route_id FROM fares_history) GROUP BY f.route_id;\nThis query calculates the average fare_amount for each route_id that exists in the fares_history table, returning the route_id and the average fare_amount.</s>"}
{"text": "<s>[INST] \nShow the number of public meetings for each topic in the last 30 days.\nCREATE TABLE public_meetings (date DATE, location VARCHAR(255), topic VARCHAR(255)); \n[/INST]\nSELECT topic, COUNT(*) FROM public_meetings WHERE date >= DATE(NOW()) - INTERVAL 30 DAY GROUP BY topic;\nThe SQL query uses the COUNT() function and GROUP BY clause to count the number of public meetings for each topic in the last 30 days from the 'public_meetings' table.</s>"}
{"text": "<s>[INST] \nWhat is the total amount of climate finance committed to projects in Africa?\nCREATE TABLE climate_finance (id INT, country VARCHAR(50), amount FLOAT); CREATE TABLE africa_projects (id INT, project_name VARCHAR(50)); \n[/INST]\nSELECT SUM(cf.amount) FROM climate_finance cf INNER JOIN africa_projects ap ON cf.id = ap.id WHERE cf.country = 'Africa';\nThe SQL query sums the amount column from the climate_finance table where the country is Africa. It does so by joining the climate_finance table with the africa_projects table on the id field.</s>"}
{"text": "<s>[INST] \nWhat is the minimum marketing budget for sustainable tourism initiatives in Asia?\nCREATE TABLE SustainableTourism (initiative VARCHAR(50), location VARCHAR(50), budget INT); INSERT INTO SustainableTourism (initiative, location, budget) VALUES ('Green Cities', 'Asia', 100000); \n[/INST]\nSELECT MIN(budget) FROM SustainableTourism WHERE location = 'Asia';\nThis query calculates the minimum marketing budget for sustainable tourism initiatives in Asia by filtering the SustainableTourism table with the specified condition and then calculating the minimum budget using the MIN() function.</s>"}
{"text": "<s>[INST] \nWhat is the minimum budget for any project related to healthcare in the state of Texas in the year 2021?\nCREATE TABLE HealthcareProjects (ProjectID INT, Name VARCHAR(100), Budget DECIMAL(10,2), Year INT, State VARCHAR(50)); INSERT INTO HealthcareProjects (ProjectID, Name, Budget, Year, State) VALUES (1, 'Hospital Construction', 15000000, 2021, 'Texas'), (2, 'Medical Equipment', 2000000, 2021, 'Texas'), (3, 'Health Clinic Construction', 3000000, 2020, 'California'); \n[/INST]\nSELECT MIN(Budget) FROM HealthcareProjects WHERE Year = 2021 AND State = 'Texas' AND Name LIKE '%healthcare%';\nThis SQL query finds the minimum budget for any project related to healthcare in the state of Texas in the year 2021. It does this by selecting the minimum (MIN) of the Budget column from the HealthcareProjects table where the Year column is equal to 2021, the State column is equal to 'Texas', and the Name column contains the phrase 'healthcare'.</s>"}
{"text": "<s>[INST] \nIdentify the top 3 countries with the highest average player spending on mobile games in the Asian market\nCREATE TABLE country_codes (country_code CHAR(2), country VARCHAR(50), PRIMARY KEY (country_code)); INSERT INTO country_codes VALUES ('US', 'United States'), ('CN', 'China'), ('JP', 'Japan'), ('IN', 'India'), ('KR', 'South Korea'); CREATE TABLE player_spending (player_id INT, country_code CHAR(2), amount DECIMAL(10, 2), PRIMARY KEY (player_id, country_code)); INSERT INTO player_spending VALUES (1, 'CN', 500.00), (2, 'CN', 600.00), (3, 'JP', 400.00), (4, 'JP', 700.00), (5, 'KR', 800.00), (6, 'KR', 900.00); \n[/INST]\nSELECT c.country, AVG(ps.amount) as avg_spending FROM country_codes c INNER JOIN player_spending ps ON c.country_code = ps.country_code WHERE c.country IN ('China', 'Japan', 'South Korea') GROUP BY c.country ORDER BY avg_spending DESC LIMIT 3;\nThe SQL query joins the country_codes table and player_spending table on the country_code column. It calculates the average spending for each country and groups them. The WHERE clause filters the results to only include China, Japan, and South Korea. Finally, it orders the results by average spending in descending order and limits the results to the top 3 countries.</s>"}
{"text": "<s>[INST] \nInsert new records in the satellite_image_analysis table for field 8 with image_quality score 90, taken on 2023-04-01\nCREATE TABLE satellite_image_analysis (field_id INT, image_quality INT, image_timestamp DATETIME); \n[/INST]\nINSERT INTO satellite_image_analysis (field_id, image_quality, image_timestamp) VALUES (8, 90, '2023-04-01');\nThis query inserts a new record in the satellite_image_analysis table for field 8 with an image_quality score of 90 and an image_timestamp of 2023-04-01. It uses the VALUES clause to specify the values for the field_id, image_quality, and image_timestamp columns.</s>"}
{"text": "<s>[INST] \nWhat is the total research grant amount awarded to female graduate students per department?\nCREATE TABLE grad_students (student_id INT, student_name VARCHAR(50), gender VARCHAR(10), department VARCHAR(50)); INSERT INTO grad_students (student_id, student_name, gender, department) VALUES (1, 'Alice', 'Female', 'Computer Science'), (2, 'Bob', 'Male', 'Physics'); CREATE TABLE research_grants (grant_id INT, student_id INT, grant_amount DECIMAL(10,2)); INSERT INTO research_grants (grant_id, student_id, grant_amount) VALUES (1, 1, 15000), (2, 2, 20000); \n[/INST]\nSELECT department, SUM(grant_amount) as total_grant_amount FROM research_grants rg JOIN grad_students gs ON rg.student_id = gs.student_id WHERE gs.gender = 'Female' GROUP BY department;\nThe query calculates the total research grant amount awarded to female graduate students per department by joining the grad_students and research_grants tables on student_id, filtering the records where gender is 'Female', and then grouping the results by department while summing the grant_amount.</s>"}
{"text": "<s>[INST] \nShow the total number of safety incidents for each manufacturing plant\nCREATE TABLE safety_incidents (incident_id INT, incident_description VARCHAR(255), plant_id INT); INSERT INTO safety_incidents (incident_id, incident_description, plant_id) VALUES (1, 'Incident A', 1), (2, 'Incident B', 1), (3, 'Incident C', 2), (4, 'Incident D', 2), (5, 'Incident E', 3), (6, 'Incident F', 3); \n[/INST]\nSELECT plant_id, COUNT(incident_id) as total_safety_incidents FROM safety_incidents GROUP BY plant_id;\nThis SQL query calculates the total number of safety incidents for each manufacturing plant.</s>"}
{"text": "<s>[INST] \nWhat is the total score earned by players from Europe?\nCREATE TABLE Players (PlayerID int, PlayerName varchar(50), Country varchar(50)); INSERT INTO Players (PlayerID, PlayerName, Country) VALUES (1, 'John Doe', 'France'), (2, 'Jane Smith', 'Germany'), (3, 'Peter Lee', 'South Korea'); CREATE TABLE PlayerScores (PlayerID int, GameID int, Score int); INSERT INTO PlayerScores (PlayerID, GameID, Score) VALUES (1, 1, 100), (1, 2, 50), (2, 1, 120), (3, 1, 200); \n[/INST]\nSELECT SUM(Score) FROM PlayerScores INNER JOIN Players ON PlayerScores.PlayerID = Players.PlayerID WHERE Players.Country LIKE 'Europe%';\nThe SQL query calculates the total score earned by players from Europe by using the SUM function on the Score column, filtering the data with the WHERE clause to only include rows with countries starting with \"Europe\" in the Players table, and joining the PlayerScores and Players tables to combine the related data.</s>"}
{"text": "<s>[INST] \nHow many countries have marine protected areas in the ocean?\nCREATE TABLE countries (country_id INT, name VARCHAR(255), marine_protected_area BOOLEAN); INSERT INTO countries (country_id, name, marine_protected_area) VALUES (1, 'Australia', TRUE), (2, 'Canada', FALSE), (3, 'France', TRUE); \n[/INST]\nSELECT COUNT(*) FROM countries WHERE marine_protected_area = TRUE;\nThis SQL query counts the number of countries with marine protected areas in the ocean by taking the count of all rows in the 'countries' table where 'marine_protected_area' is TRUE.</s>"}
{"text": "<s>[INST] \nFind the total number of transactions made by customers from the 'Middle East and Africa' region in the last quarter.\nCREATE TABLE customers (id INT, region VARCHAR(20)); CREATE TABLE transactions (id INT, customer_id INT, transaction_date DATE); INSERT INTO customers (id, region) VALUES (1, 'Middle East and Africa'); INSERT INTO transactions (id, customer_id, transaction_date) VALUES (1, 1, '2022-03-01'); \n[/INST]\nSELECT COUNT(*) FROM transactions JOIN customers ON transactions.customer_id = customers.id WHERE customers.region = 'Middle East and Africa' AND transaction_date >= DATE_SUB(CURDATE(), INTERVAL 3 MONTH);\nThe SQL query joins the transactions and customers tables on the customer_id column. It then filters the records where the region is 'Middle East and Africa' and the transaction_date falls within the last quarter. Finally, it counts the number of records (transactions).</s>"}
{"text": "<s>[INST] \nList all drugs that were approved in 2018 and their respective approval times.\nCREATE TABLE drug_approval (drug_name VARCHAR(255), approval_date DATE); INSERT INTO drug_approval (drug_name, approval_date) VALUES ('Drug A', '2018-01-01'), ('Drug B', '2018-06-15'), ('Drug C', '2018-12-25'); \n[/INST]\nSELECT drug_name, DATEDIFF('2018-12-31', approval_date) as approval_time FROM drug_approval;\nThe SQL query lists all drugs that were approved in 2018 and their respective approval times by using the DATEDIFF function to find the difference between the approval date and December 31, 2018 for each drug.</s>"}
{"text": "<s>[INST] \nWhat is the total fare collected for buses in the city of Madrid in the past month?\nCREATE TABLE buses (id INT, city VARCHAR(20)); INSERT INTO buses (id, city) VALUES (1, 'Madrid'), (2, 'Barcelona'); CREATE TABLE bus_fares (id INT, bus_id INT, fare DECIMAL(5,2), fare_date DATE); INSERT INTO bus_fares (id, bus_id, fare, fare_date) VALUES (1, 1, 2.00, '2022-02-01'), (2, 1, 2.50, '2022-02-05'), (3, 2, 1.50, '2022-02-07'); \n[/INST]\nSELECT SUM(bf.fare) FROM bus_fares bf JOIN buses b ON bf.bus_id = b.id WHERE b.city = 'Madrid' AND bf.fare_date >= DATEADD(month, -1, GETDATE());\nThis query calculates the total fare collected for buses in the city of Madrid in the past month. It first joins the bus_fares and buses tables based on the bus_id and id columns, respectively. It then filters the results to only include rows where the city is 'Madrid' and the fare date is within the past month using the DATEADD function. Finally, it calculates the total fare using the SUM function.</s>"}
{"text": "<s>[INST] \nWhat is the minimum playtime for players who have played games with a price greater than 50, by gender?\nCREATE TABLE Players (PlayerID INT, Age INT, Gender VARCHAR(10), Country VARCHAR(50)); INSERT INTO Players (PlayerID, Age, Gender, Country) VALUES (1, 25, 'Male', 'USA'), (2, 30, 'Female', 'Canada'), (3, 22, 'Male', 'Mexico'); CREATE TABLE GamePlay (PlayerID INT, Playtime INT, GamePrice DECIMAL(5, 2)); INSERT INTO GamePlay (PlayerID, Playtime, GamePrice) VALUES (1, 120, 60.00), (2, 90, 45.00), (3, 150, 55.00), (4, 100, 70.00), (5, 80, 75.00); \n[/INST]\nSELECT Gender, MIN(Playtime) FROM Players INNER JOIN GamePlay ON Players.PlayerID = GamePlay.PlayerID WHERE GamePrice > 50 GROUP BY Gender;\nFirst, join the Players table with the GamePlay table on PlayerID. Then, filter the rows by GamePrice and group by Gender, then calculate the minimum of the Playtime column for each group.</s>"}
{"text": "<s>[INST] \nWhat is the total number of research grants awarded to female faculty members in the Computer Science department?\nCREATE TABLE faculty (faculty_id INT, name VARCHAR(50), gender VARCHAR(10), department VARCHAR(50)); INSERT INTO faculty VALUES (1, 'John Doe', 'Male', 'Computer Science'), (2, 'Jane Smith', 'Female', 'Computer Science'); CREATE TABLE grants (grant_id INT, faculty_id INT, amount FLOAT); INSERT INTO grants VALUES (1, 1, 50000), (2, 2, 75000); \n[/INST]\nSELECT SUM(amount) FROM grants JOIN faculty ON grants.faculty_id = faculty.faculty_id WHERE department = 'Computer Science' AND gender = 'Female';\nThis query calculates the total amount of research grants awarded to female faculty members in the Computer Science department by joining the grants and faculty tables on the faculty_id column. It then filters the results by the department and gender columns in the faculty table, and finally sums the amount column in the grants table.</s>"}
{"text": "<s>[INST] \nWhat is the maximum number of employees in a single mining operation?\nCREATE TABLE mining_operations (id INT PRIMARY KEY, operation_name VARCHAR(50), location VARCHAR(50), num_employees INT); \n[/INST]\nSELECT MAX(num_employees) FROM mining_operations;\nThis query calculates the maximum number of employees in a single mining operation by finding the maximum value in the 'num_employees' column of the 'mining_operations' table.</s>"}
{"text": "<s>[INST] \nList the top 3 most affordable cities for first-time home buyers.\nCREATE TABLE city_data (city VARCHAR(50), median_home_price FLOAT, first_time_buyer_friendly INT); INSERT INTO city_data (city, median_home_price, first_time_buyer_friendly) VALUES ('CityA', 200000, 1), ('CityB', 300000, 0), ('CityC', 150000, 1), ('CityD', 400000, 1), ('CityE', 250000, 0); \n[/INST]\nSELECT city, median_home_price FROM (SELECT city, median_home_price, RANK() OVER (ORDER BY median_home_price ASC) AS rank FROM city_data WHERE first_time_buyer_friendly = 1) AS subquery WHERE rank <= 3;\nThis query lists the top 3 most affordable cities for first-time home buyers. It uses a subquery to rank the cities by their median home prices in ascending order and filters for first-time buyer-friendly cities. The main query then selects the city and median home price for the top 3 cities with the lowest median home prices.</s>"}
{"text": "<s>[INST] \nWhat is the number of fish deaths in the Pacific Ocean in the last 3 months?\nCREATE TABLE Pacific_Ocean (id INT, date DATE, deaths INT); INSERT INTO Pacific_Ocean (id, date, deaths) VALUES (1, '2022-01-01', 100), (2, '2022-01-05', 200), (3, '2022-02-15', 300); \n[/INST]\nSELECT COUNT(deaths) FROM Pacific_Ocean WHERE date >= DATE_SUB(CURDATE(), INTERVAL 3 MONTH);\nThis query counts the number of entries in the Pacific_Ocean table with a date within the last 3 months.</s>"}
{"text": "<s>[INST] \nWhat is the average number of patients per mental health facility?\nCREATE TABLE facility_patient_data (facility_id INT, patients_served INT); INSERT INTO facility_patient_data (facility_id, patients_served) VALUES (1, 100); INSERT INTO facility_patient_data (facility_id, patients_served) VALUES (2, 120); \n[/INST]\nSELECT AVG(patients_served) FROM facility_patient_data;\nThe SQL query calculates the average number of patients per mental health facility by using the AVG function.</s>"}
{"text": "<s>[INST] \nWhat are the top 3 electric vehicle types in Tokyo with the highest adoption rates?\nCREATE TABLE tokyo_ev_sales (vehicle_id INT, type VARCHAR(20), sales INT); INSERT INTO tokyo_ev_sales (vehicle_id, type, sales) VALUES (1, 'Tesla Model 3', 500), (2, 'Nissan Leaf', 450), (3, 'Mitsubishi Outlander PHEV', 400), (4, 'Toyota Prius Prime', 350), (5, 'BMW i3', 300); \n[/INST]\nSELECT DISTINCT type FROM (SELECT type, ROW_NUMBER() OVER(ORDER BY sales DESC) as rank FROM tokyo_ev_sales) as ev_ranks WHERE rank <= 3;\nThe SQL query retrieves the top 3 electric vehicle types in Tokyo with the highest adoption rates by first calculating the row numbers based on sales in descending order. Then, it selects the DISTINCT type from the derived table with row numbers, filtering for the top 3 rows using the WHERE clause.</s>"}
{"text": "<s>[INST] \nHow many electric vehicle charging stations are there in the state of Oregon, by location?\nCREATE TABLE ev_charging_stations_oregon (id INT, station_name VARCHAR(50), state VARCHAR(50), location VARCHAR(50)); INSERT INTO ev_charging_stations_oregon (id, station_name, state, location) VALUES (1, 'Oregon EV Charging Station', 'Oregon', 'Portland'); \n[/INST]\nSELECT location, COUNT(*) FROM ev_charging_stations_oregon GROUP BY location;\nThis SQL query counts the number of electric vehicle charging stations in the state of Oregon by location by grouping the ev_charging_stations_oregon table by location and counting the number of rows in each group.</s>"}
{"text": "<s>[INST] \nWhat is the total number of assists by a player, partitioned by their team, in descending order?\nCREATE TABLE Player (PlayerID int, PlayerName varchar(50), TeamID int); CREATE TABLE Assists (AssistID int, PlayerID int, Assists int, MatchDate date);  INSERT INTO Player (PlayerID, PlayerName, TeamID) VALUES (1, 'Lionel Messi', 1), (2, 'Cristiano Ronaldo', 2), (3, 'Kevin De Bruyne', 1), (4, 'Bruno Fernandes', 2); INSERT INTO Assists (AssistID, PlayerID, Assists, MatchDate) VALUES (1, 1, 3, '2022-06-01'), (2, 1, 2, '2022-06-03'), (3, 2, 1, '2022-06-01'), (4, 2, 4, '2022-06-03'), (5, 3, 5, '2022-06-01'), (6, 3, 3, '2022-06-03'), (7, 4, 2, '2022-06-01'), (8, 4, 1, '2022-06-03'); \n[/INST]\nSELECT PlayerID, TeamID, SUM(Assists) OVER (PARTITION BY TeamID ORDER BY SUM(Assists) DESC) AS Total_Assists FROM Assists a JOIN Player p ON a.PlayerID = p.PlayerID ORDER BY Total_Assists DESC;\nWe join the Player and Assists tables, partition the data by TeamID, calculate the total number of assists by a player, and order the results by the total number of assists in descending order.</s>"}
{"text": "<s>[INST] \nWhat is the average time between bus departures for a given route in Chicago?\nCREATE TABLE bus_routes (route_id INT, city VARCHAR(50), avg_time_between_departures TIME); INSERT INTO bus_routes (route_id, city, avg_time_between_departures) VALUES (1, 'Chicago', '00:15:00'), (2, 'Chicago', '00:20:00'), (3, 'Chicago', '00:10:00'); \n[/INST]\nSELECT AVG(avg_time_between_departures) FROM bus_routes WHERE city = 'Chicago';\nThis query calculates the average time between bus departures for a given route in Chicago by filtering the bus_routes table to only include rows where the city is 'Chicago'. It then calculates the average time between departures using the AVG function.</s>"}
{"text": "<s>[INST] \nHow many water conservation initiatives are in the state of California and Florida?\nCREATE TABLE states (id INT, name VARCHAR(255)); INSERT INTO states (id, name) VALUES (1, 'California'), (2, 'Florida'); CREATE TABLE water_conservation_initiatives (id INT, state_id INT, name VARCHAR(255)); INSERT INTO water_conservation_initiatives (id, state_id, name) VALUES (1, 1, 'InitiativeA'), (2, 1, 'InitiativeB'), (3, 2, 'InitiativeC'), (4, 2, 'InitiativeD'); \n[/INST]\nSELECT state_id, COUNT(*) as num_initiatives FROM water_conservation_initiatives GROUP BY state_id;\nWe are grouping water_conservation_initiatives by state_id and counting the number of initiatives for each state.</s>"}
{"text": "<s>[INST] \nHow many water quality measurements were taken in the 'WaterQuality' table in the last week of 2021?\nCREATE TABLE WaterQuality (ID INT, LocationID INT, MeasurementDate DATE, pH FLOAT, Turbidity FLOAT); INSERT INTO WaterQuality (ID, LocationID, MeasurementDate, pH, Turbidity) VALUES (1, 1, '2021-12-20', 7.5, 30); INSERT INTO WaterQuality (ID, LocationID, MeasurementDate, pH, Turbidity) VALUES (2, 2, '2021-12-25', 7.2, 20); \n[/INST]\nSELECT COUNT(*) FROM WaterQuality WHERE MeasurementDate BETWEEN '2021-12-25' AND '2021-12-31';\nCount the number of rows in the 'WaterQuality' table for the last week of 2021.</s>"}
{"text": "<s>[INST] \nHow many cases were handled by each attorney in the healthcare industry?\nCREATE TABLE attorneys (attorney_id INT, cases_handled INT); INSERT INTO attorneys (attorney_id, cases_handled) VALUES (1, 20), (2, 15), (3, 30); CREATE TABLE clients (client_id INT, attorney_id INT, industry VARCHAR(255)); INSERT INTO clients (client_id, attorney_id, industry) VALUES (1, 1, 'healthcare'), (2, 1, 'healthcare'), (3, 2, 'finance'), (4, 3, 'technology'), (5, 3, 'healthcare'); \n[/INST]\nSELECT attorneys.attorney_id, SUM(clients.cases_handled) FROM attorneys INNER JOIN clients ON attorneys.attorney_id = clients.attorney_id WHERE clients.industry = 'healthcare' GROUP BY attorneys.attorney_id;\nThe SQL query first joins the attorneys table with the clients table on the attorney_id column. Then, it filters the results to only include rows where the industry column in the clients table is 'healthcare'. Next, it groups the results by the attorney_id column in the attorneys table. Finally, it calculates the sum of the cases_handled column in the clients table for each group.</s>"}
{"text": "<s>[INST] \nWhich types of virtual tours are most popular in Brazil?\nCREATE TABLE virtual_tours (tour_id INT, tour_type TEXT, country TEXT, popularity INT); INSERT INTO virtual_tours (tour_id, tour_type, country, popularity) VALUES (1, 'Museum Tours', 'Brazil', 1200), (2, 'Historical Sites', 'Brazil', 1500), (3, 'Nature Reserves', 'Brazil', 1800); \n[/INST]\nSELECT tour_type, popularity FROM virtual_tours WHERE country = 'Brazil' ORDER BY popularity DESC;\nDetermine the most popular types of virtual tours in Brazil by selecting the tour_type and popularity columns and ordering the results by popularity in descending order.</s>"}
{"text": "<s>[INST] \nDelete a specific fleet management record from the \"fleet_management\" table\nCREATE TABLE fleet_management (id INT PRIMARY KEY, vessel_id INT, maintenance_type VARCHAR(255), maintenance_date DATE, is_complete BOOLEAN); \n[/INST]\nDELETE FROM fleet_management WHERE id = 3;\nThe record with id equal to 3 is deleted from the fleet_management table, removing a specific fleet management record.</s>"}
{"text": "<s>[INST] \nWhat is the maximum population of any animal in the 'animal_population' table?\nCREATE TABLE animal_population (animal_id INT, animal_name VARCHAR(50), population INT); INSERT INTO animal_population (animal_id, animal_name, population) VALUES (1, 'Tiger', 2500), (2, 'Elephant', 5000), (3, 'Lion', 3000); \n[/INST]\nSELECT MAX(population) FROM animal_population;\nThis SQL query calculates the maximum population of any animal in the 'animal_population' table by using the MAX() function on the 'population' column.</s>"}
{"text": "<s>[INST] \nWhat are the total carbon sequestration amounts in European forests?\nCREATE TABLE carbon_sequestration (id INT, country VARCHAR(255), region VARCHAR(255), amount FLOAT); \n[/INST]\nSELECT region, SUM(amount) FROM carbon_sequestration WHERE region = 'Europe';\nThis query finds the total carbon sequestration amounts in European forests. It filters rows with 'Europe' region value and then calculates the sum of amount.</s>"}
{"text": "<s>[INST] \nList all the unique station names that are used by both bus and tram routes.\nCREATE TABLE BusStations (id INT, station_name VARCHAR(255)); CREATE TABLE TramStations (id INT, station_name VARCHAR(255)); \n[/INST]\nSELECT station_name FROM BusStations WHERE station_name IN (SELECT station_name FROM TramStations);\nThis SQL query uses the IN operator to check if each station_name in the BusStations table is also present in the TramStations table. The result is a table with a single column containing all the unique station names that are used by both bus and tram routes.</s>"}
{"text": "<s>[INST] \nWhat is the total number of reviews for attractions in Japan and their ratings?\nCREATE TABLE Country (Country_ID INT PRIMARY KEY, Country_Name VARCHAR(100)); INSERT INTO Country (Country_ID, Country_Name) VALUES (1, 'Japan'); CREATE TABLE Attraction (Attraction_ID INT PRIMARY KEY, Attraction_Name VARCHAR(100), Country_ID INT, Sustainability_Score INT, FOREIGN KEY (Country_ID) REFERENCES Country(Country_ID)); INSERT INTO Attraction (Attraction_ID, Attraction_Name, Country_ID, Sustainability_Score) VALUES (1, 'Mt. Fuji', 1), (2, 'Hiroshima Peace Memorial', 1); CREATE TABLE Review (Review_ID INT PRIMARY KEY, Tourist_ID INT, Attraction_ID INT, Review_Rating INT, FOREIGN KEY (Tourist_ID) REFERENCES Tourist(Tourist_ID), FOREIGN KEY (Attraction_ID) REFERENCES Attraction(Attraction_ID)); INSERT INTO Review (Review_ID, Tourist_ID, Attraction_ID, Review_Rating) VALUES (1, 1, 1, 5), (2, 1, 2, 4); \n[/INST]\nSELECT SUM(Review_Rating), COUNT(Review_ID) FROM Review INNER JOIN Attraction ON Review.Attraction_ID = Attraction.Attraction_ID WHERE Country_ID = (SELECT Country_ID FROM Country WHERE Country_Name = 'Japan');\nThis query calculates the total number of reviews for attractions in Japan and their ratings by performing an inner join between the Review and Attraction tables on the Attraction_ID column and using a subquery to find the Country_ID for Japan.</s>"}
{"text": "<s>[INST] \nWhich ethical manufacturing certifications have been awarded to factories in the Asia-Pacific region?\nCREATE TABLE factories (factory_id INT, name TEXT, location TEXT); CREATE TABLE certifications (certification_id INT, name TEXT, factory_id INT, region TEXT); INSERT INTO factories (factory_id, name, location) VALUES (1, 'Flex Factory', 'Japan'), (2, 'GreenTech Plant', 'Germany'), (3, 'Smart Manufacturing Co.', 'China'); INSERT INTO certifications (certification_id, name, factory_id, region) VALUES (1, 'Fair Trade', 1, 'Asia-Pacific'), (2, 'SA8000', 3, 'Asia-Pacific'), (3, 'BSCI', 2, 'Europe'); \n[/INST]\nSELECT factories.name, certifications.name FROM factories INNER JOIN certifications ON factories.factory_id = certifications.factory_id WHERE certifications.region = 'Asia-Pacific' AND certifications.name IN ('Fair Trade', 'SA8000', 'BSCI');\nThis query performs an inner join on the factories and certifications tables, using the factory_id column as the join key. It then filters the results to only include rows where the region column in the certifications table is 'Asia-Pacific' and the name column in the certifications table is one of 'Fair Trade', 'SA8000', or 'BSCI'. Finally, it selects the name columns from both tables and returns the names of all factories in the Asia-Pacific region that have been awarded one of these ethical manufacturing certifications.</s>"}
{"text": "<s>[INST] \nWhat is the total number of employees working in coal mines in India?\nCREATE TABLE Mines (MineID INT, MineType VARCHAR(255), Country VARCHAR(255), NumEmployees INT); INSERT INTO Mines (MineID, MineType, Country, NumEmployees) VALUES (1, 'Coal', 'Canada', 500); INSERT INTO Mines (MineID, MineType, Country, NumEmployees) VALUES (2, 'Gold', 'Canada', 600); INSERT INTO Mines (MineID, MineType, Country, NumEmployees) VALUES (3, 'Coal', 'India', 700); \n[/INST]\nSELECT SUM(m.NumEmployees) as TotalEmployees FROM Mines m WHERE m.MineType = 'Coal' AND m.Country = 'India';\nThis SQL query calculates the total number of employees working in coal mines in India by filtering for the mine type and country, and calculating the sum of the numemployees column.</s>"}
{"text": "<s>[INST] \nHow many marine species are there in the 'Southern Ocean'?\nCREATE TABLE marine_species_count (id INTEGER, name VARCHAR(255), species VARCHAR(255), ocean VARCHAR(255)); \n[/INST]\nSELECT COUNT(*) FROM marine_species_count WHERE ocean = 'Southern Ocean';\nThe SQL query filters the 'marine_species_count' table based on the 'ocean' column having the value 'Southern Ocean' and then counts the number of rows using the COUNT() function.</s>"}
{"text": "<s>[INST] \nCalculate the average duration of cycling workouts for members over 30 years old.\nCREATE TABLE WorkoutSession (id INT, member_id INT, session_start TIMESTAMP, duration INT, workout_type VARCHAR(50)); INSERT INTO WorkoutSession (id, member_id, session_start, duration, workout_type) VALUES (1, 1001, '2022-01-01 08:00:00', 60, 'Cycling'); \n[/INST]\nSELECT AVG(duration) as avg_duration FROM WorkoutSession WHERE member_id IN (SELECT m.id FROM Member m JOIN (SELECT id, DATEDIFF('year', dob, CURDATE()) as age FROM Member) mm ON m.id = mm.id WHERE mm.age > 30) AND workout_type = 'Cycling';\nThis query calculates the average duration of cycling workouts for members over 30 years old. It does this by first calculating the age of each member in years, then filtering for members with an age greater than 30. It then filters for cycling workouts and calculates the average duration of those workouts.</s>"}
{"text": "<s>[INST] \nWhich artists are from Spain?\nCREATE TABLE Artists (ArtistID INT, Name VARCHAR(50), Nationality VARCHAR(50)); INSERT INTO Artists (ArtistID, Name, Nationality) VALUES (1, 'Pablo Picasso', 'Spanish'); INSERT INTO Artists (ArtistID, Name, Nationality) VALUES (2, 'Salvador Dali', 'Spanish'); \n[/INST]\nSELECT Name FROM Artists WHERE Nationality = 'Spanish';\nThe SQL query selects the Name column from the Artists table where the Nationality is 'Spanish'.</s>"}
{"text": "<s>[INST] \nUpdate the patient's first_treatment_date to the earliest therapy session date if the current date is on or after '2023-06-01'\nCREATE TABLE patient_info_2023 (patient_id INT, first_treatment_date DATE); INSERT INTO patient_info_2023 (patient_id, first_treatment_date) VALUES (5, '2023-02-03'), (6, '2023-01-15'), (7, '2023-06-28'), (8, NULL); CREATE TABLE therapy_sessions_2023 (patient_id INT, session_date DATE); INSERT INTO therapy_sessions_2023 (patient_id, session_date) VALUES (5, '2023-02-03'), (7, '2023-06-28'), (7, '2023-06-30'), (11, '2023-05-15'); \n[/INST]\nUPDATE patient_info_2023 JOIN (SELECT patient_id, MIN(session_date) AS min_session_date FROM therapy_sessions_2023 WHERE session_date < '2023-06-01' GROUP BY patient_id) AS earliest_sessions ON patient_info_2023.patient_id = earliest_sessions.patient_id SET patient_info_2023.first_treatment_date = earliest_sessions.min_session_date WHERE patient_info_2023.first_treatment_date IS NULL OR patient_info_2023.first_treatment_date > '2023-05-31';\nWe join patient_info_2023 and a subquery that finds the earliest therapy session date for each patient prior to June 1, 2023. We then update the first_treatment_date in patient_info_2023 to match the earliest therapy session date for patients with a NULL first_treatment_date or a first_treatment_date after May 31, 2023.</s>"}
{"text": "<s>[INST] \nWhat is the technology with the highest adoption rate in each city in Spain?\nCREATE TABLE smart_cities (id INT, city VARCHAR(255), country VARCHAR(255), technology VARCHAR(255), adoption_rate DECIMAL(5,4)); INSERT INTO smart_cities (id, city, country, technology, adoption_rate) VALUES (1, 'Barcelona', 'Spain', 'Smart Lighting', 0.75); \n[/INST]\nSELECT city, technology, MAX(adoption_rate) as max_adoption_rate FROM smart_cities WHERE country = 'Spain' GROUP BY city, technology;\nThis query calculates the technology with the highest adoption rate in each city in Spain.</s>"}
{"text": "<s>[INST] \nList wastewater plant capacities in California, ordered from smallest to largest.\nCREATE TABLE WasteWaterPlants (PlantID INT, PlantName VARCHAR(50), Location VARCHAR(50), Capacity INT); INSERT INTO WasteWaterPlants (PlantID, PlantName, Location, Capacity) VALUES (1, 'WaterWorks1', 'California', 2000000), (2, 'WaterWorks2', 'California', 3000000), (3, 'WaterWorks3', 'California', 2500000), (4, 'WaterWorks4', 'California', 1500000); \n[/INST]\nSELECT PlantName, Capacity FROM WasteWaterPlants WHERE Location = 'California' ORDER BY Capacity ASC;\nThis query orders the wastewater plants in California by their capacities in ascending order, displaying their names and capacities.</s>"}
{"text": "<s>[INST] \nWhat was the total number of citizen feedback records received in 2022, grouped by feedback type?\nCREATE TABLE Feedback (Year INT, Type VARCHAR(20), Records INT); INSERT INTO Feedback (Year, Type, Records) VALUES (2022, 'Online', 12000), (2022, 'In-Person', 8000), (2022, 'Phone', 5000); \n[/INST]\nSELECT Type, SUM(Records) FROM Feedback WHERE Year = 2022 GROUP BY Type;\nThis query calculates the total number of citizen feedback records received in 2022, grouped by feedback type, by summing the records for each type in that year.</s>"}
{"text": "<s>[INST] \nWhat is the total number of clients who have made an investment in each month of the past year?\nCREATE TABLE clients (id INT, registered_date DATE);CREATE TABLE investments (id INT, client_id INT, investment_date DATE); INSERT INTO clients (id, registered_date) VALUES (1, '2020-01-01'), (2, '2019-01-01'), (3, '2018-01-01'), (4, '2017-01-01'), (5, '2016-01-01'); INSERT INTO investments (id, client_id, investment_date) VALUES (1, 1, '2021-02-01'), (2, 1, '2021-03-01'), (3, 2, '2020-04-01'), (4, 3, '2019-05-01'), (5, 4, '2018-06-01'), (6, 1, '2021-02-02'), (7, 1, '2021-02-03'), (8, 5, '2021-03-01'), (9, 2, '2021-02-01'), (10, 3, '2021-03-01'); \n[/INST]\nSELECT DATE_TRUNC('month', investment_date) AS investment_month, COUNT(DISTINCT c.id) AS num_clients FROM clients c JOIN investments i ON c.id = i.client_id WHERE i.investment_date >= c.registered_date + INTERVAL '1 year' GROUP BY investment_month;\nThe SQL query uses the DATE_TRUNC function to group the records by month. It then calculates the count of distinct client_id that meet this condition for each month, representing the total number of clients who have made an investment in each month of the past year.</s>"}
{"text": "<s>[INST] \nWhich explainable AI techniques were used in the USA and France?\nCREATE TABLE XAI_Techniques (id INT, technique TEXT, location TEXT); INSERT INTO XAI_Techniques (id, technique, location) VALUES (1, 'SHAP', 'USA'), (2, 'LIME', 'France'), (3, 'anchors', 'USA'), (4, 'TreeExplainer', 'France'); \n[/INST]\nSELECT DISTINCT location, technique FROM XAI_Techniques WHERE location IN ('USA', 'France');\nThis query selects unique combinations of the 'location' and 'technique' columns from the 'XAI_Techniques' table, filtering rows where the 'location' column value is either 'USA' or 'France'.</s>"}
{"text": "<s>[INST] \nUpdate the sales revenue for a specific transaction in Oregon dispensaries since January 2021\nCREATE TABLE ORDispensaries (DispensaryID INT, Name VARCHAR(100), Location VARCHAR(100), State VARCHAR(100)); CREATE TABLE ORSalesRevenue (RevenueID INT, DispensaryID INT, SalesRevenue DECIMAL(10,2), RevenueDate DATE, TransactionID INT); \n[/INST]\nUPDATE ORSalesRevenue SET SalesRevenue = 500 WHERE TransactionID = 1234 AND DispensaryID IN (SELECT DispensaryID FROM ORDispensaries WHERE State = 'Oregon') AND RevenueDate >= '2021-01-01';\nThe SQL query updates the sales revenue for a specific transaction in Oregon dispensaries since January 2021, filtering for transactions at dispensaries in Oregon on or after January 1, 2021 and with the specified transaction ID.</s>"}
{"text": "<s>[INST] \nWhat is the average time to remediate security incidents for each department in the last year?\nCREATE TABLE security_incidents (id INT, department VARCHAR(50), incident_date DATE, remediation_time INT); \n[/INST]\nSELECT department, AVG(remediation_time) as avg_remediation_time FROM security_incidents WHERE incident_date >= DATEADD(year, -1, GETDATE()) GROUP BY department;\nThis SQL query selects the department and calculates the average remediation time for each department from the security_incidents table where the incident date is within the last year. It then groups the results by department to get the average time to remediate security incidents for each department in the last year.</s>"}
{"text": "<s>[INST] \nWhat is the average age of basketball players who played in the 2015 NBA season, grouped by their positions?\nCREATE TABLE basketball_players (player_id INT, name VARCHAR(50), position VARCHAR(10), team VARCHAR(50), age INT, season_started INT); INSERT INTO basketball_players (player_id, name, position, team, age, season_started) VALUES (1, 'John Doe', 'Guard', 'Golden State Warriors', 25, 2015); \n[/INST]\nSELECT b.position, AVG(b.age)  FROM basketball_players b WHERE b.season_started = 2015 GROUP BY b.position;\nThis SQL query calculates the average age of basketball players who played in the 2015 NBA season, grouped by their positions. It first selects the position and age of all players who started their season in 2015, then calculates the average age for each unique position using the AVG() function and the GROUP BY clause.</s>"}
{"text": "<s>[INST] \nWhat is the average donation amount per donor in the Asia region?\nCREATE TABLE Donors (donor_id INT, donor_name TEXT, donation_amount DECIMAL, donation_date DATE, region TEXT); \n[/INST]\nSELECT AVG(Donations.donation_amount) FROM Donors AS Donations INNER JOIN (SELECT * FROM Regions WHERE Regions.region = 'Asia') AS Reg ON Donors.region = Reg.region_name;\nThis query calculates the average donation amount for donors in the Asia region. It does so by joining the Donors table with a subquery that filters the Regions table to only include the Asia region. The result is then grouped by the donor_id and the average donation amount is calculated.</s>"}
{"text": "<s>[INST] \nFind the number of male and female members who joined gym E before 2021-01-01.\nCREATE TABLE GymE_Members(MemberGender VARCHAR(6), JoinDate DATE); INSERT INTO GymE_Members VALUES ('Male','2020-12-28'),('Female','2020-08-01'),('Male','2020-11-05'),('Female','2020-06-15'); \n[/INST]\nSELECT MemberGender, COUNT(*) FROM GymE_Members WHERE JoinDate <= '2020-12-31' GROUP BY MemberGender;\nThis query filters the JoinDate column values for dates on or before 2020-12-31, groups the results by MemberGender, and then calculates the number of records for each group using COUNT(*).</s>"}
{"text": "<s>[INST] \nWhat was the total cost of water conservation initiatives in CityB in 2018?\nCREATE TABLE WaterConservationInitiatives (Id INT, Initiative VARCHAR(100), Location VARCHAR(100), Cost INT, StartDate DATE, EndDate DATE); INSERT INTO WaterConservationInitiatives (Id, Initiative, Location, Cost, StartDate, EndDate) VALUES (1, 'Rainwater Harvesting', 'CityA', 15000, '2017-04-01', '2017-12-31'); INSERT INTO WaterConservationInitiatives (Id, Initiative, Location, Cost, StartDate, EndDate) VALUES (2, 'Greywater Recycling', 'CityA', 20000, '2018-01-01', '2018-12-31'); INSERT INTO WaterConservationInitiatives (Id, Initiative, Location, Cost, StartDate, EndDate) VALUES (3, 'Drip Irrigation', 'CityB', 25000, '2017-04-01', '2017-12-31'); INSERT INTO WaterConservationInitiatives (Id, Initiative, Location, Cost, StartDate, EndDate) VALUES (4, 'Smart Landscaping', 'CityB', 30000, '2018-01-01', '2018-12-31'); \n[/INST]\nSELECT SUM(Cost) FROM WaterConservationInitiatives WHERE Location = 'CityB' AND StartDate <= '2018-12-31' AND EndDate >= '2018-01-01';\nThis query calculates the total cost of water conservation initiatives in CityB in 2018 by filtering the WaterConservationInitiatives table using the Location, StartDate, and EndDate columns, and then calculating the sum of the Cost column for those initiatives.</s>"}
{"text": "<s>[INST] \nWhat is the average quantity of sustainable material used per product by each brand?\nCREATE TABLE brands (brand_id INT, brand_name VARCHAR(255)); INSERT INTO brands VALUES (1, 'BrandA'), (2, 'BrandB'); CREATE TABLE products (product_id INT, brand_id INT, sustainable_material_qty INT); \n[/INST]\nSELECT brand_id, AVG(sustainable_material_qty) as avg_qty FROM products GROUP BY brand_id;\nCalculate the average quantity of sustainable material used per product for each brand.</s>"}
{"text": "<s>[INST] \nWhat is the total value of investments in the real estate sector?\nCREATE TABLE investments (id INT, investor_id INT, sector VARCHAR(20), value FLOAT); INSERT INTO investments (id, investor_id, sector, value) VALUES (1, 1, 'Real Estate', 50000.0), (2, 2, 'Real Estate', 75000.0), (3, 3, 'Technology', 60000.0); \n[/INST]\nSELECT SUM(value) FROM investments WHERE sector = 'Real Estate';\nThis query calculates the total value of investments in the real estate sector. It does so by using the SUM function on the value column, while filtering the data for rows with a sector value of 'Real Estate'.</s>"}
{"text": "<s>[INST] \nWhat is the total cultural competency training hours for each community health worker?\nCREATE TABLE cultural_competency_training (id INT, community_health_worker_id INT, hours INT); INSERT INTO cultural_competency_training (id, community_health_worker_id, hours) VALUES (1, 1, 10), (2, 1, 5), (3, 2, 8), (4, 3, 12); \n[/INST]\nSELECT c.name, SUM(ct.hours) as total_hours FROM cultural_competency_training ct JOIN community_health_workers c ON ct.community_health_worker_id = c.id GROUP BY c.name;\nThe SQL query calculates the total cultural competency training hours for each community health worker. It uses the JOIN clause to combine the records from the cultural_competency_training and community_health_workers tables. The SUM function is used to calculate the total training hours and the GROUP BY clause is used to group the records by community health worker name.</s>"}
{"text": "<s>[INST] \nList all the public libraries in the state of California and Washington, including their number of branches.\nCREATE TABLE Libraries (library VARCHAR(50), state VARCHAR(20), branches INT); INSERT INTO Libraries (library, state, branches) VALUES ('LibraryA', 'California', 3), ('LibraryB', 'California', 4), ('LibraryC', 'Washington', 5); \n[/INST]\nSELECT library, state, branches FROM Libraries WHERE state IN ('California', 'Washington');\nThis SQL query lists all the public libraries in the state of California and Washington by selecting the relevant columns from the Libraries table and filtering the rows based on the specified conditions.</s>"}
{"text": "<s>[INST] \nList the top 10 miners with the highest transaction fees earned in the EFG blockchain.\nCREATE TABLE EFG_transaction (transaction_hash VARCHAR(255), block_number INT, transaction_index INT, from_address VARCHAR(255), to_address VARCHAR(255), value DECIMAL(18,2), gas_price DECIMAL(18,2), gas_limit INT, timestamp TIMESTAMP, miner VARCHAR(255)); \n[/INST]\nSELECT miner, SUM(gas_price * gas_limit) AS total_fees_earned FROM EFG_transaction GROUP BY miner ORDER BY total_fees_earned DESC LIMIT 10;\nCalculate the total transaction fees earned by each miner in the EFG blockchain. First, group the transaction data by miner, and calculate the total transaction fees earned by multiplying the gas price and gas limit. Then, order the result by total fees earned and return the top 10 rows.</s>"}
{"text": "<s>[INST] \nCreate a table named 'ocean_health_metrics'\nCREATE TABLE ocean_health_indicators (indicator_id INT PRIMARY KEY, indicator_name VARCHAR(255)); \n[/INST]\nCREATE TABLE ocean_health_metrics (metric_id INT PRIMARY KEY, location_id INT, indicator_id INT, year INT, value FLOAT, FOREIGN KEY (location_id) REFERENCES farm_locations(location_id), FOREIGN KEY (indicator_id) REFERENCES ocean_health_indicators(indicator_id));\n1. Create a new table named 'ocean_health_metrics' with a primary key 'metric_id' of type INT.   2. Allow for storing ocean health metrics records with foreign keys 'location_id' referencing the 'location_id' in the 'farm_locations' table, and 'indicator_id' referencing the 'indicator_id' in the 'ocean_health_indicators' table.   3. Allow for storing metric values in the 'value' column.</s>"}
{"text": "<s>[INST] \nGet the number of trees in the 'old_growth_forest' table older than 200 years.\nCREATE TABLE old_growth_forest (id INT, species VARCHAR(50), age INT); \n[/INST]\nSELECT COUNT(*) FROM old_growth_forest WHERE age > 200;\nThis query calculates the number of trees in the 'old_growth_forest' table that are older than 200 years by using the WHERE clause and the COUNT function.</s>"}
{"text": "<s>[INST] \nWhat was the total number of job openings in the public sector for each month in 2023, and how many of them were full-time positions?\nCREATE TABLE JobOpenings (Month INT, Position VARCHAR(10), Count INT); INSERT INTO JobOpenings (Month, Position, Count) VALUES (202301, 'FullTime', 3500), (202301, 'PartTime', 1500), (202302, 'FullTime', 4000), (202302, 'PartTime', 1000); \n[/INST]\nSELECT Month, SUM(CASE WHEN Position = 'FullTime' THEN Count ELSE 0 END) AS FullTime, SUM(CASE WHEN Position = 'PartTime' THEN Count ELSE 0 END) AS PartTime FROM JobOpenings WHERE Year = 2023 GROUP BY Month;\nThis query calculates the total number of job openings in the public sector for each month in 2023, and how many of them were full-time positions, by summing the counts for full-time and part-time positions in each month.</s>"}
{"text": "<s>[INST] \nWhat was the highest military spending in 2020 by a Southeast Asian country?\nCREATE TABLE se_asian_spending (country VARCHAR(50), year INT, spending FLOAT); INSERT INTO se_asian_spending (country, year, spending) VALUES ('Indonesia', 2020, 8700000000), ('Thailand', 2020, 6600000000), ('Malaysia', 2020, 5200000000), ('Singapore', 2020, 11000000000), ('Vietnam', 2020, 5700000000), ('Philippines', 2020, 3700000000); \n[/INST]\nSELECT MAX(spending) FROM se_asian_spending WHERE year = 2020;\nThis query identifies the highest military spending in 2020 by a Southeast Asian country by selecting the maximum value from the 'spending' column in the 'se_asian_spending' table, filtering rows by 'year' to only include data from 2020.</s>"}
{"text": "<s>[INST] \nFind the number of donors from each country\nCREATE TABLE donors (id INT, name VARCHAR(50), country VARCHAR(50)); INSERT INTO donors (id, name, country) VALUES (1, 'John Doe', 'USA'); INSERT INTO donors (id, name, country) VALUES (2, 'Jane Smith', 'Canada'); \n[/INST]\nSELECT country, COUNT(*) as num_donors FROM donors GROUP BY country;\nThis query groups donors by their country and counts the number of donors in each country.</s>"}
{"text": "<s>[INST] \nWhat is the average temperature recorded for each crop type in the past month, grouped by day?\nCREATE TABLE WeatherData (temp FLOAT, time DATETIME, crop VARCHAR(255)); \n[/INST]\nSELECT crop, DATE(time) as day, AVG(temp) FROM WeatherData WHERE time > DATE_SUB(CURRENT_TIMESTAMP(), INTERVAL 1 MONTH) GROUP BY crop, day;\nThis query calculates the average temperature recorded for each crop type in the past month, grouped by day. It does this by selecting the crop, the day of time, and the average temp (temperature) from the WeatherData table, where the time is within the last month. The results are then grouped by the crop type and the day of time.</s>"}
{"text": "<s>[INST] \nWhat is the total revenue generated from digital music sales in the United States?\nCREATE TABLE digital_sales (sale_id INT, platform VARCHAR(20), genre VARCHAR(20), units_sold INT, sale_price DECIMAL(5,2)); CREATE TABLE countries (country_code CHAR(2), country_name VARCHAR(50)); INSERT INTO countries (country_code, country_name) VALUES ('US', 'United States'); \n[/INST]\nSELECT SUM(d.sale_price * d.units_sold) as total_revenue FROM digital_sales d INNER JOIN countries c ON d.platform = c.country_name WHERE c.country_code = 'US';\nThe SQL query calculates the total revenue by joining the digital_sales table with the countries table using an inner join. It filters the results to only include sales from the United States by matching the platform to the country_name. Finally, it calculates the revenue by multiplying the sale_price and units_sold, and summing the results.</s>"}
{"text": "<s>[INST] \nHow many marine species have been observed in the 'Coral Triangle' marine protected area?\nCREATE TABLE marine_species_observations (id INT, species_id INT, location_id INT); CREATE TABLE marine_protected_areas (id INT, name TEXT); INSERT INTO marine_species_observations (id, species_id, location_id) VALUES (1, 1, 1), (2, 2, 1), (3, 3, 2); INSERT INTO marine_protected_areas (id, name) VALUES (1, 'Coral Triangle'), (2, 'Great Barrier Reef'); \n[/INST]\nSELECT COUNT(DISTINCT species_id) FROM marine_species_observations INNER JOIN marine_protected_areas ON marine_species_observations.location_id = marine_protected_areas.id WHERE marine_protected_areas.name = 'Coral Triangle';\nThis query performs an inner join between the marine_species_observations and marine_protected_areas tables on the location_id column. It then counts the number of distinct species IDs in the marine_species_observations table, but only for observations made in the 'Coral Triangle' marine protected area.</s>"}
{"text": "<s>[INST] \nWhat is the total number of students who received accommodations in the arts department and the physical education department, for the fall 2021 semester?\nCREATE TABLE arts_accommodations (student_id INT, semester VARCHAR(10));CREATE TABLE pe_accommodations (student_id INT, semester VARCHAR(10)); INSERT INTO arts_accommodations VALUES (4, 'fall 2021'), (5, 'fall 2021'), (6, 'fall 2021'); INSERT INTO pe_accommodations VALUES (5, 'fall 2021'), (6, 'fall 2021'), (7, 'fall 2021'); \n[/INST]\nSELECT COUNT(*) FROM arts_accommodations WHERE semester = 'fall 2021' UNION ALL SELECT COUNT(*) FROM pe_accommodations WHERE semester = 'fall 2021';\nThe query uses the UNION ALL operator to combine the count of students who received accommodations in the arts department and the count of students who received accommodations in the physical education department for the fall 2021 semester.</s>"}
{"text": "<s>[INST] \nWhat is the total budget allocated to each habitat preservation project?\nCREATE TABLE habitat_projects (project_id INT, project_name VARCHAR(50));CREATE TABLE budget_allocations (allocation_id INT, project_id INT, allocation_amount DECIMAL(10, 2)); INSERT INTO habitat_projects (project_id, project_name) VALUES (1, 'Habitat Project A'), (2, 'Habitat Project B'), (3, 'Habitat Project C'); INSERT INTO budget_allocations (allocation_id, project_id, allocation_amount) VALUES (101, 1, 5000.00), (102, 2, 7500.00), (103, 3, 10000.00); \n[/INST]\nSELECT p.project_name, SUM(ba.allocation_amount) AS total_budget FROM habitat_projects p JOIN budget_allocations ba ON p.project_id = ba.project_id GROUP BY p.project_name;\nThis query joins the habitat_projects table and the budget_allocations table on the project_id field. Then, it groups the results by project_name and calculates the total budget for each project by summing the allocation_amount values.</s>"}
{"text": "<s>[INST] \nShow warehouse statistics for warehouses located in the state of California.\nCREATE TABLE Warehouse (warehouse_id INT, warehouse_name VARCHAR(50), state VARCHAR(50)); INSERT INTO Warehouse (warehouse_id, warehouse_name, state) VALUES (1, 'W1', 'California'), (2, 'W2', 'New York'), (3, 'W3', 'California'); \n[/INST]\nSELECT * FROM Warehouse WHERE state = 'California';\nThis query filters the Warehouse table to only show records where the state is 'California'.</s>"}
{"text": "<s>[INST] \nWhat is the total emission reduction for projects in the United Kingdom between 2015 and 2020?\nCREATE TABLE projects (id INT, name VARCHAR(255), location VARCHAR(255), start_date DATE, end_date DATE, budget DECIMAL(10,2), emissions_reduced DECIMAL(10,2)); INSERT INTO projects (id, name, location, start_date, end_date, budget, emissions_reduced) VALUES (1, 'Wind Turbine Park', 'UK', '2015-01-01', '2020-12-31', 10000000.00, 5000000.00); \n[/INST]\nSELECT location AS region, SUM(emissions_reduced) as total_reduction FROM projects WHERE start_date >= '2015-01-01' AND end_date <= '2020-12-31' GROUP BY region;\nThe SQL query filters projects based on the start and end dates, then groups them by location (renamed as region) and calculates the total emission reduction for each region.</s>"}
{"text": "<s>[INST] \nWhat's the total amount of donations made by individual donors from the USA in May 2021?\nCREATE TABLE donors (id INT, name TEXT, country TEXT); INSERT INTO donors (id, name, country) VALUES (1, 'John Doe', 'USA'), (2, 'Jane Smith', 'Canada'); CREATE TABLE donations (id INT, donor_id INT, amount INT, donation_date DATE); INSERT INTO donations (id, donor_id, amount, donation_date) VALUES (1, 1, 500, '2021-05-05'), (2, 1, 700, '2021-05-10'), (3, 2, 600, '2021-04-15'); \n[/INST]\nSELECT SUM(donations.amount) FROM donations INNER JOIN donors ON donations.donor_id = donors.id WHERE donors.country = 'USA' AND donation_date >= '2021-05-01' AND donation_date < '2021-06-01';\nThis query calculates the total amount of donations made by individual donors from the USA in May 2021. It performs an inner join between the donors and donations tables, filtering by country and donation date range. Finally, it sums up the amount column.</s>"}
{"text": "<s>[INST] \nFind the total volume of all marine trenches\nCREATE TABLE marine_trenches (name TEXT, location TEXT, max_depth INTEGER, avg_depth INTEGER);INSERT INTO marine_trenches (name, location, max_depth, avg_depth) VALUES ('Mariana Trench', 'Pacific Ocean', 10994, 5000), ('Southern Antiltic Trench', 'Southern Ocean', 7235, 4000); \n[/INST]\nSELECT SUM(pi() * (max_depth * avg_depth * avg_depth) / 3) FROM marine_trenches;\nThe query calculates the total volume of all marine trenches in the 'marine_trenches' table by using the SUM function and the formula for the volume of a frustum of a cone.</s>"}
{"text": "<s>[INST] \nWhat is the total number of user complaints received by each news agency in the last month?\nCREATE TABLE complaints (complaint_id INT, complaint_date DATE, agency VARCHAR(255)); INSERT INTO complaints (complaint_id, complaint_date, agency) VALUES (1, '2022-01-01', 'CNN'), (2, '2022-01-02', 'FOX News'), (3, '2022-01-03', 'BBC'); \n[/INST]\nSELECT agency, COUNT(complaint_id) FROM complaints WHERE complaint_date >= DATEADD(month, -1, GETDATE()) GROUP BY agency;\nThe SQL query counts the total number of user complaints received by each news agency in the last month. It uses the WHERE clause to filter the results to only include complaints received in the last month. It then uses the GROUP BY clause to group the results by agency.</s>"}
{"text": "<s>[INST] \nCalculate the average rating of food suppliers in 'Florida'\nCREATE TABLE food_suppliers (supplier_id INT PRIMARY KEY, name VARCHAR(255), rating INT); \n[/INST]\nSELECT AVG(rating) FROM food_suppliers WHERE state = 'Florida';\nThis command calculates the average rating of food suppliers located in 'Florida' by filtering the 'food_suppliers' table with the state column set to 'Florida' and using the AVG function.</s>"}
{"text": "<s>[INST] \nDelete all mental health parity regulations that have not been implemented.\nCREATE TABLE mental_health_parity (id INT, regulation VARCHAR(100), state VARCHAR(20), implementation_date DATE); INSERT INTO mental_health_parity (id, regulation, state, implementation_date) VALUES (1, 'Regulation 1', 'New York', '2011-01-01'), (2, 'Regulation 2', 'Florida', '2012-01-01'), (3, 'Regulation 3', 'New York', NULL); \n[/INST]\nDELETE FROM mental_health_parity WHERE implementation_date IS NULL;\nThis query deletes all mental health parity regulations that have not been implemented by using the DELETE statement and filtering the records based on the implementation_date column.</s>"}
{"text": "<s>[INST] \nWhat is the success rate of legal service providers by type?\nCREATE TABLE Legal_Service_Providers_Success_Rates (ID INT, Provider_Type VARCHAR(30), Success_Rate DECIMAL(5,2)); INSERT INTO Legal_Service_Providers_Success_Rates (ID, Provider_Type, Success_Rate) VALUES (1, 'Legal Aid', 0.90), (2, 'Public Defender', 0.80), (3, 'Community Legal Clinic', 0.75); \n[/INST]\nSELECT Provider_Type, AVG(Success_Rate) FROM Legal_Service_Providers_Success_Rates GROUP BY Provider_Type;\nThe SQL query uses the Legal_Service_Providers_Success_Rates table and the AVG() and GROUP BY functions to calculate the success rate of legal service providers by type.</s>"}
{"text": "<s>[INST] \nFind the total investment in agricultural innovation projects in Southeast Asia, excluding Singapore and Indonesia.\nCREATE TABLE Investments (id INT, project_name TEXT, location TEXT, investment FLOAT); INSERT INTO Investments (id, project_name, location, investment) VALUES (1, 'AgriTech Asia', 'Southeast Asia', 500000); INSERT INTO Investments (id, project_name, location, investment) VALUES (2, 'Smart Farm SEA', 'Singapore', 300000); INSERT INTO Investments (id, project_name, location, investment) VALUES (3, 'Farm Innovation', 'Indonesia', 400000); \n[/INST]\nSELECT SUM(investment) FROM Investments WHERE location NOT IN ('Singapore', 'Indonesia') AND location LIKE '%Southeast Asia%';\nThis SQL query calculates the sum of the investment column from the Investments table, filters the rows where the location is not Singapore or Indonesia and where the location contains 'Southeast Asia' (representing Southeast Asian countries other than Singapore and Indonesia).</s>"}
{"text": "<s>[INST] \nWhat was the average social impact score of organizations in the East region in 2022?\nCREATE TABLE organizations (id INT, name VARCHAR(50), region VARCHAR(20), social_impact_score INT, year INT); INSERT INTO organizations (id, name, region, social_impact_score, year) VALUES (1, 'Org1', 'East', 85, 2022); INSERT INTO organizations (id, name, region, social_impact_score, year) VALUES (2, 'Org2', 'East', 90, 2022); \n[/INST]\nSELECT region, AVG(social_impact_score) as avg_score FROM organizations WHERE region = 'East' AND year = 2022 GROUP BY region;\nThis SQL query calculates the average social impact score of organizations in the East region in 2022 by filtering the region and year, then grouping and averaging the social_impact_score by region.</s>"}
{"text": "<s>[INST] \nWhat is the maximum salary of employees in the 'manufacturing' or 'engineering' department?\nCREATE TABLE salaries (id INT, name VARCHAR(50), department VARCHAR(50), salary INT); INSERT INTO salaries (id, name, department, salary) VALUES (1, 'John Doe', 'manufacturing', 50000); INSERT INTO salaries (id, name, department, salary) VALUES (2, 'Jane Smith', 'engineering', 65000); INSERT INTO salaries (id, name, department, salary) VALUES (3, 'Alice Johnson', 'manufacturing', 55000); \n[/INST]\nSELECT MAX(salary) FROM salaries WHERE department IN ('manufacturing', 'engineering');\nThis SQL query calculates the maximum salary of employees in the 'manufacturing' or 'engineering' department. It uses the WHERE clause to filter the records based on the department and then applies the MAX function to the salary column.</s>"}
{"text": "<s>[INST] \nList the top 5 mining sites with the highest environmental impact score in 2020.\nCREATE TABLE MiningSites (SiteID INT, SiteName VARCHAR(50), Location VARCHAR(50), OpenDate DATE, EnvironmentalImpactScore INT); \n[/INST]\nSELECT SiteName, EnvironmentalImpactScore FROM MiningSites WHERE YEAR(OpenDate) = 2020 AND SiteID IN (SELECT SiteID FROM (SELECT SiteID, RANK() OVER(PARTITION BY NULL ORDER BY EnvironmentalImpactScore DESC) as rnk FROM MiningSites WHERE YEAR(OpenDate) = 2020) tmp WHERE rnk <= 5) ORDER BY EnvironmentalImpactScore DESC;\nThe query first filters the MiningSites table for sites opened in 2020. Then, it assigns a rank to each site based on the environmental impact score and selects the top 5 sites.</s>"}
{"text": "<s>[INST] \nCalculate the maximum number of retweets for tweets with the hashtag #zerowaste in the \"sustainable_living\" schema.\nCREATE TABLE tweets (id INT, user_id INT, content TEXT, retweets INT, hashtags TEXT); \n[/INST]\nSELECT MAX(retweets) FROM tweets WHERE hashtags LIKE '%#zerowaste%';\nThe query calculates the maximum number of retweets for tweets with the hashtag #zerowaste in the tweets table.</s>"}
{"text": "<s>[INST] \nHow many donors from the United Kingdom have made a donation in 2019 or later?\nCREATE TABLE Donors (DonorID int, DonorName varchar(50), Country varchar(50)); INSERT INTO Donors (DonorID, DonorName, Country) VALUES (1, 'John Doe', 'USA'); INSERT INTO Donors (DonorID, DonorName, Country) VALUES (2, 'Jane Smith', 'Canada'); INSERT INTO Donors (DonorID, DonorName, Country) VALUES (3, 'Richard Thompson', 'UK'); CREATE TABLE Donations (DonationID int, DonorID int, DonationAmount decimal(10,2), DonationDate date); INSERT INTO Donations (DonationID, DonorID, DonationAmount, DonationDate) VALUES (1, 1, 500, '2020-01-01'); INSERT INTO Donations (DonationID, DonorID, DonationAmount, DonationDate) VALUES (2, 1, 750, '2020-05-15'); INSERT INTO Donations (DonationID, DonorID, DonationAmount, DonationDate) VALUES (3, 3, 300, '2019-12-31'); \n[/INST]\nSELECT COUNT(DISTINCT DON.DonorID) FROM Donors DON INNER JOIN Donations D ON D.DonorID = DON.DonorID WHERE DON.Country = 'UK' AND D.DonationDate >= '2019-01-01';\nThis SQL query counts the number of distinct donors from the United Kingdom who have made a donation in 2019 or later. It does this by joining the Donors and Donations tables on the DonorID column, then filtering the records where the Donor's country is 'UK' and the DonationDate is greater than or equal to '2019-01-01'. The COUNT() function is used to count the distinct DonorID values, which represent the unique donors.</s>"}
{"text": "<s>[INST] \nHow many public services are available in each state?\nCREATE TABLE StateServices (State TEXT, Service TEXT); INSERT INTO StateServices (State, Service) VALUES ('State A', 'Education'), ('State A', 'Healthcare'), ('State B', 'Education'), ('State B', 'Healthcare'), ('State B', 'Transportation'), ('State C', 'Education'); \n[/INST]\nSELECT State, COUNT(DISTINCT Service) FROM StateServices GROUP BY State;\nThe query counts the number of unique public services available in each state.</s>"}
{"text": "<s>[INST] \nWhat is the total rainfall recorded in 'Field010' in the last 24 hours?\nCREATE TABLE rainfall_data (id INT, field_id VARCHAR(10), rainfall FLOAT, timestamp TIMESTAMP); INSERT INTO rainfall_data (id, field_id, rainfall, timestamp) VALUES (1, 'Field010', 2.5, '2022-03-10 12:00:00'), (2, 'Field010', 3.3, '2022-03-11 12:00:00'); \n[/INST]\nSELECT SUM(rainfall) FROM rainfall_data WHERE field_id = 'Field010' AND timestamp BETWEEN DATE_SUB(CURRENT_TIMESTAMP, INTERVAL 24 HOUR) AND CURRENT_TIMESTAMP;\nThis query calculates the total rainfall for 'Field010' by filtering the records between the current time and 24 hours ago, and then applying the SUM function to the rainfall column.</s>"}
{"text": "<s>[INST] \nWhat is the minimum donation amount for donors from India?\nCREATE TABLE donations (id INT, donor_id INT, amount DECIMAL); INSERT INTO donations (id, donor_id, amount) VALUES (1, 1, 50.00), (2, 2, 100.00); CREATE TABLE donors (id INT, name TEXT, country TEXT); INSERT INTO donors (id, name, country) VALUES (1, 'Ravi', 'India'), (2, 'Sita', 'Nepal'); \n[/INST]\nSELECT MIN(amount) FROM donations JOIN donors ON donations.donor_id = donors.id WHERE donors.country = 'India';\nThe SQL query calculates the minimum donation amount for donors from India by joining the donations and donors tables on donor_id, filtering for rows with the country value 'India', and calculating the minimum of the amount column.</s>"}
{"text": "<s>[INST] \nWhat is the maximum discovery date of exoplanets found by ESA missions?\nCREATE TABLE missions (id INT, name VARCHAR(50), agency VARCHAR(50), start_date DATE, end_date DATE); INSERT INTO missions (id, name, agency, start_date, end_date) VALUES (1, 'Gaia', 'ESA', '2013-12-19', 'ONGOING'); INSERT INTO missions (id, name, agency, start_date, end_date) VALUES (2, 'CHEOPS', 'ESA', '2019-12-18', 'ONGOING');   CREATE TABLE exoplanets (id INT, name VARCHAR(50), mission VARCHAR(50), discovery_date DATE); INSERT INTO exoplanets (id, name, mission, discovery_date) VALUES (1, 'HD 219134 b', 'CHEOPS', '2020-05-20'); INSERT INTO exoplanets (id, name, mission, discovery_date) VALUES (2, 'TOI-1235 b', 'CHEOPS', '2021-02-26'); \n[/INST]\nSELECT MAX(discovery_date) FROM exoplanets INNER JOIN missions ON exoplanets.mission = missions.name WHERE missions.agency = 'ESA';\nFind the maximum discovery date of exoplanets found by ESA missions by joining the missions and exoplanets tables and filtering the records based on the agency, then selecting the maximum discovery_date.</s>"}
{"text": "<s>[INST] \nWhat is the number of tourists from African countries visiting sustainable destinations in Europe?\nCREATE TABLE countries (country_code CHAR(3), country_name VARCHAR(100), continent VARCHAR(50));CREATE TABLE destinations (destination_id INT, destination_name VARCHAR(100), is_sustainable BOOLEAN, continent VARCHAR(50));CREATE TABLE bookings (booking_id INT, guest_id INT, destination_id INT, country_code CHAR(3));INSERT INTO countries (country_code, country_name, continent) VALUES ('ZAF', 'South Africa', 'Africa'), ('TZA', 'Tanzania', 'Africa'), ('EGY', 'Egypt', 'Africa'), ('COD', 'Democratic Republic of the Congo', 'Africa'), ('MAR', 'Morocco', 'Africa'); \n[/INST]\nSELECT COUNT(*) FROM bookings b JOIN countries c ON b.country_code = c.country_code JOIN destinations d ON b.destination_id = d.destination_id WHERE d.is_sustainable = TRUE AND c.continent = 'Africa' AND d.continent = 'Europe';\n1. JOIN countries, bookings, and destinations tables. 2. WHERE clause to filter sustainable destinations in Europe and African tourists. 3. COUNT to get the number of tourists.</s>"}
{"text": "<s>[INST] \nWhat are the renewable energy projects in the United States and their respective capacities in MW?\nCREATE TABLE renewable_projects (project_name VARCHAR(255), country VARCHAR(255), capacity INT); \n[/INST]\nSELECT project_name, capacity FROM renewable_projects WHERE country = 'United States';\nThe SQL query selects the project_name and capacity columns from the renewable_projects table, filtering the rows by the country column set to 'United States'. This will result in a list of renewable energy projects in the United States along with their respective capacities in MW.</s>"}
{"text": "<s>[INST] \nWhat is the total quantity of garments, in the 'inventory' table, that are made of sustainable materials and have not been sold yet?\nCREATE TABLE inventory (id INT, garment_id INT, garment_name VARCHAR(50), garment_material VARCHAR(50), quantity INT); CREATE VIEW sustainable_materials AS SELECT 'organic cotton' AS material UNION ALL SELECT 'hemp' UNION ALL SELECT 'recycled polyester' UNION ALL SELECT 'tencel' UNION ALL SELECT 'modal'; \n[/INST]\nSELECT SUM(quantity) AS total_quantity FROM inventory WHERE garment_material IN (SELECT material FROM sustainable_materials) AND quantity > 0;\nThis SQL query calculates the total quantity of garments that are made of sustainable materials and have not been sold yet. It uses the IN clause to filter the records by material, and calculates the total quantity using the SUM function.</s>"}
{"text": "<s>[INST] \nHow many users from India have updated their profile information in the last week?\nCREATE TABLE users (id INT, country VARCHAR(255), last_update DATE); \n[/INST]\nSELECT COUNT(*) FROM users WHERE country = 'India' AND last_update >= DATE_SUB(CURDATE(), INTERVAL 1 WEEK);\nWe join the users table with itself on the id column. Then, we filter the data where country is 'India' and last_update is within the last week. Lastly, we count the number of records that match the filter criteria.</s>"}
{"text": "<s>[INST] \nWhat is the average rating of vegan dishes, excluding dishes with less than 5 ratings?\nCREATE TABLE dish_ratings (id INT, dish_name TEXT, rating INT); \n[/INST]\nSELECT AVG(rating) FROM dish_ratings WHERE dish_name IN (SELECT dish_name FROM dish_ratings GROUP BY dish_name HAVING COUNT(*) >= 5) AND dish_name IN (SELECT dish_name FROM menu_items WHERE is_vegan = TRUE);\nThe SQL query first selects the dish_names of all vegan dishes from the menu_items table. It then uses this result to filter the dish_ratings table to only include records for dishes with at least 5 ratings. Finally, it calculates the average rating of vegan dishes in the result.</s>"}
{"text": "<s>[INST] \nWhat is the maximum altitude of any aircraft?\nCREATE TABLE aircraft (maker TEXT, model TEXT, altitude INTEGER); INSERT INTO aircraft (maker, model, altitude) VALUES ('Boeing', '747', 35000), ('Boeing', '777', 37000), ('Airbus', 'A320', 33000), ('Airbus', 'A350', 35000); \n[/INST]\nSELECT MAX(altitude) FROM aircraft;\nThis SQL query calculates the maximum altitude of any aircraft by finding the maximum value in the altitude column.</s>"}
{"text": "<s>[INST] \nCalculate the average Yttrium production per month in 2018.\nCREATE TABLE Yttrium_Production (Year INT, Month INT, Quantity INT); INSERT INTO Yttrium_Production (Year, Month, Quantity) VALUES (2017, 1, 125), (2017, 2, 140), (2017, 3, 155), (2017, 4, 170), (2018, 1, 185), (2018, 2, 210), (2018, 3, 235), (2018, 4, 260), (2018, 5, 285), (2018, 6, 310), (2018, 7, 335), (2018, 8, 360), (2018, 9, 385), (2018, 10, 410), (2018, 11, 435), (2018, 12, 460); \n[/INST]\nSELECT AVG(Quantity) FROM Yttrium_Production WHERE Year = 2018;\nThe SQL query calculates the average Yttrium production quantity per month for the year 2018.</s>"}
{"text": "<s>[INST] \nWhat are the most popular vegan dishes in each category of restaurants with a sustainability focus, in the last month?\nCREATE TABLE Restaurants (id INT, name TEXT, focus TEXT); INSERT INTO Restaurants (id, name, focus) VALUES (1, 'Bean Scene', 'Sustainability'), (2, 'Cafe Delirium', 'Coffee'), (3, 'Eco Brew', 'Sustainability'); CREATE TABLE Menu (id INT, name TEXT, category TEXT, type TEXT, vegan BOOLEAN, restaurant_id INT); CREATE TABLE Orders (id INT, menu_id INT, order_date DATE, quantity INT); \n[/INST]\nSELECT menu.name, menu.category, SUM(orders.quantity) as total_quantity, ROW_NUMBER() OVER (PARTITION BY menu.category ORDER BY SUM(orders.quantity) DESC) as rank FROM Orders JOIN Menu ON Orders.menu_id = Menu.id JOIN Restaurants ON Menu.restaurant_id = Restaurants.id WHERE Restaurants.focus = 'Sustainability' AND Menu.vegan = 1 AND Orders.order_date >= CURRENT_DATE - INTERVAL '1 month' GROUP BY menu.name, menu.category ORDER BY menu.category, rank;\nThis query ranks vegan dishes by popularity in each category of sustainability-focused restaurants for the last month. It first calculates the total quantity of orders for each vegan dish in each category of sustainability-focused restaurants by joining the Orders, Menu, and Restaurants tables and grouping by dish name and category. Then, it assigns a rank to each vegan dish within its category based on the total quantity of orders, using the ROW_NUMBER() window function with partitioning by category and ordering by total quantity of orders in descending order. Finally, it orders the results by category and rank.</s>"}
{"text": "<s>[INST] \nList all autonomous driving research programs in Germany and the number of safety tests conducted.\nCREATE TABLE SafetyTests (Id INT, TestType VARCHAR(50), VehicleId INT, TestDate DATE, Program VARCHAR(100)); CREATE TABLE AutonomousVehicles (Id INT, Name VARCHAR(100), Program VARCHAR(100)); INSERT INTO SafetyTests (Id, TestType, VehicleId, TestDate, Program) VALUES (9, 'Lane Keeping', 5, '2021-04-15', 'AutonomousDrivingGermany'), (10, 'Traffic Sign Recognition', 5, '2021-04-16', 'AutonomousDrivingGermany'); INSERT INTO AutonomousVehicles (Id, Name, Program) VALUES (5, 'AutonomousCarGermany', 'AutonomousDrivingGermany'); \n[/INST]\nSELECT AutonomousVehicles.Program, COUNT(SafetyTests.Id) FROM AutonomousVehicles INNER JOIN SafetyTests ON AutonomousVehicles.Id = SafetyTests.VehicleId WHERE Program LIKE '%Germany%' GROUP BY AutonomousVehicles.Program;\nThis query lists all autonomous driving research programs in Germany and the number of safety tests conducted by using the INNER JOIN clause to combine the data from two tables (SafetyTests and AutonomousVehicles), filtering the records based on the program using the WHERE clause, and grouping the results by the program name using the GROUP BY clause.</s>"}
{"text": "<s>[INST] \nWhat is the total number of high severity vulnerabilities reported by external sources in the last month?\nCREATE TABLE vulnerabilities (id INT, severity TEXT, source TEXT, reported_date DATE); INSERT INTO vulnerabilities (id, severity, source, reported_date) VALUES (1, 'high', 'external', '2021-10-05'); INSERT INTO vulnerabilities (id, severity, source, reported_date) VALUES (2, 'medium', 'internal', '2021-10-07'); INSERT INTO vulnerabilities (id, severity, source, reported_date) VALUES (3, 'high', 'external', '2021-11-02'); \n[/INST]\nSELECT COUNT(*) FROM vulnerabilities WHERE severity = 'high' AND reported_date >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH) AND source = 'external';\nThis query counts the number of high severity vulnerabilities reported by external sources in the last month by filtering the vulnerabilities table by severity, source, and reported_date.</s>"}
{"text": "<s>[INST] \nWhat is the average length of songs (in seconds) by female artists in the Pop genre released between 2010 and 2020?\nCREATE TABLE Artists (ArtistID INT, Name TEXT, Gender TEXT); INSERT INTO Artists (ArtistID, Name, Gender) VALUES (1, 'Taylor Swift', 'Female'), (2, 'Ariana Grande', 'Female'); CREATE TABLE Songs (SongID INT, Title TEXT, Length FLOAT, ArtistID INT, Genre TEXT, ReleaseYear INT); INSERT INTO Songs (SongID, Title, Length, ArtistID, Genre, ReleaseYear) VALUES (1, 'Shake it Off', 210, 1, 'Pop', 2014), (2, 'Thank U, Next', 186, 2, 'Pop', 2018); \n[/INST]\nSELECT AVG(Length) FROM Songs WHERE Gender = 'Female' AND Genre = 'Pop' AND ReleaseYear BETWEEN 2010 AND 2020;\nThis query calculates the average length of songs (in seconds) by female artists in the Pop genre released between 2010 and 2020. It uses the AVG function to calculate the average length of songs, and the WHERE clause to filter songs by gender, genre, and release year.</s>"}
{"text": "<s>[INST] \nWhat is the minimum energy efficiency rating of appliances in South Korea?\nCREATE TABLE energy_efficiency_south_korea (id INT, appliance TEXT, rating FLOAT); INSERT INTO energy_efficiency_south_korea (id, appliance, rating) VALUES (1, 'Fridge', 4.0), (2, 'TV', 3.5); \n[/INST]\nSELECT MIN(rating) FROM energy_efficiency_south_korea;\nThis query calculates the minimum energy efficiency rating of appliances in South Korea by finding the minimum value of the rating column in the energy_efficiency_south_korea table.</s>"}
{"text": "<s>[INST] \nFind the number of times each crop type was planted in the last 30 days\nCREATE TABLE planting_data (planting_date DATE, crop_type VARCHAR(20)); INSERT INTO planting_data (planting_date, crop_type) VALUES ('2022-05-01', 'Corn'), ('2022-05-15', 'Soybeans'), ('2022-05-30', 'Wheat'), ('2022-06-01', 'Corn'), ('2022-06-15', 'Soybeans'); \n[/INST]\nSELECT crop_type, COUNT(*) FROM planting_data WHERE planting_date >= DATE_SUB(CURDATE(), INTERVAL 30 DAY) GROUP BY crop_type;\nThis SQL query finds the number of times each crop type was planted in the last 30 days. It filters the records to only include those with a planting_date within the last 30 days using the DATE_SUB() function and a WHERE clause. It then groups the records by the 'crop_type' column and counts the number of records in each group using the COUNT() function.</s>"}
{"text": "<s>[INST] \nWhich countries have astronauts with the most medical issues?\nCREATE TABLE AstronautMedicalData (astronaut_name VARCHAR(30), country VARCHAR(20), medical_issues INT); INSERT INTO AstronautMedicalData (astronaut_name, country, medical_issues) VALUES ('Michael Johnson', 'Canada', 2), ('Jessica Smith', 'Australia', 3), ('Oliver Lee', 'UK', 1); \n[/INST]\nSELECT country, SUM(medical_issues) as total_issues FROM AstronautMedicalData GROUP BY country ORDER BY total_issues DESC;\nThis query calculates the total medical issues for astronauts from each country by summing the medical_issues column values and grouping by country, then ordering the results by total medical issues in descending order.</s>"}
{"text": "<s>[INST] \nWhich menu items have been ordered more than 5 times?\nCREATE TABLE Orders (OrderID INT, MenuItemID INT, OrderDate DATETIME); INSERT INTO Orders (OrderID, MenuItemID, OrderDate) VALUES (1, 1, '2022-01-01 10:00:00'); INSERT INTO Orders (OrderID, MenuItemID, OrderDate) VALUES (2, 2, '2022-01-02 12:00:00'); INSERT INTO Orders (OrderID, MenuItemID, OrderDate) VALUES (3, 1, '2022-01-03 14:00:00'); \n[/INST]\nSELECT MenuItemID, COUNT(*) FROM Orders GROUP BY MenuItemID HAVING COUNT(*) > 5\nThis query selects the MenuItemID column and the count of each MenuItemID from the Orders table, grouped by MenuItemID and filtered to only show those with a count greater than 5.</s>"}
{"text": "<s>[INST] \nWhich genetic research studies have been conducted in Africa?\nCREATE SCHEMA if not exists genetics;CREATE TABLE if not exists genetics.studies (id INT, name VARCHAR(100), location VARCHAR(100)); INSERT INTO genetics.studies (id, name, location) VALUES (1, 'StudyA', 'Cape Town'), (2, 'StudyB', 'Nairobi'), (3, 'StudyC', 'Alexandria'); \n[/INST]\nSELECT name FROM genetics.studies WHERE location = 'Africa';\nThis query retrieves the names of all genetic research studies conducted in Africa. It filters the studies table to only include rows where the location is 'Africa', and then returns the name column from the filtered set.</s>"}
{"text": "<s>[INST] \nWhat is the maximum installed capacity of any wind energy project in the city of Chicago, Illinois?\nCREATE TABLE wind_energy_projects ( id INT PRIMARY KEY, project_name VARCHAR(255), project_type VARCHAR(255), city VARCHAR(255), state VARCHAR(255), capacity FLOAT ); \n[/INST]\nSELECT MAX(capacity) FROM wind_energy_projects WHERE city = 'Chicago' AND state = 'Illinois';\nThe SQL query filters the wind_energy_projects table by the city and state, then calculates the maximum capacity of the projects.</s>"}
{"text": "<s>[INST] \nWhat is the average number of primary care physicians per 100k people?\nCREATE TABLE physicians (name PRIMARY KEY, specialty VARCHAR(50), state VARCHAR(20), population INT); INSERT INTO physicians (name, specialty, state, population) VALUES ('Dr. A', 'Primary Care', 'California', 1000000), ('Dr. B', 'Cardiology', 'California', 1000000), ('Dr. C', 'Primary Care', 'New York', 2000000), ('Dr. D', 'Oncology', 'New York', 2000000); \n[/INST]\nSELECT AVG(p.num_physicians_per_100k) FROM (SELECT states.name, (COUNT(physicians.name) / (states.population / 100000)) AS num_physicians_per_100k FROM physicians JOIN states ON physicians.state = states.name WHERE physicians.specialty = 'Primary Care' GROUP BY states.name) AS p;\n1. Join the physicians and states tables on the state column. 2. Filter rows where the specialty is 'Primary Care'. 3. Calculate the number of primary care physicians per 100,000 people for each state. 4. Average the number of primary care physicians per 100,000 people for all states.</s>"}
{"text": "<s>[INST] \nInsert new records into the DefenseProjectTimelines table\nCREATE TABLE DefenseProjectTimelines (id INT, project_name VARCHAR(50), start_date DATE, end_date DATE); INSERT INTO DefenseProjectTimelines (id, project_name, start_date, end_date) VALUES (1, 'Project X', '2021-01-01', '2022-01-01'), (2, 'Project Y', '2021-02-01', '2023-02-01'); \n[/INST]\nINSERT INTO DefenseProjectTimelines (id, project_name, start_date, end_date) VALUES (3, 'Project Z', '2022-03-01', '2024-03-01');\nThe SQL query inserts a new record with id 3, project_name Project Z, start_date 2022-03-01, and end_date 2024-03-01 into DefenseProjectTimelines table.</s>"}
{"text": "<s>[INST] \nReturn the earliest launch date in the satellite_database table\nCREATE TABLE satellite_database (id INT, name VARCHAR(50), type VARCHAR(50), orbit_type VARCHAR(50), country VARCHAR(50), launch_date DATE); \n[/INST]\nSELECT MIN(launch_date) as earliest_launch_date FROM satellite_database;\nThis query calculates the earliest launch date of a satellite in the satellite_database table.</s>"}
{"text": "<s>[INST] \nWhat is the total number of female employees in each department?\nCREATE TABLE EmployeeData (EmployeeID INT, Department TEXT, Gender TEXT); INSERT INTO EmployeeData (EmployeeID, Department, Gender) VALUES (1, 'HR', 'Female'); \n[/INST]\nSELECT Department, COUNT(*) FROM EmployeeData WHERE Gender = 'Female' GROUP BY Department;\nTo find the total number of female employees in each department, we use the COUNT function along with GROUP BY to group the results by department and filter the rows with the WHERE clause to only include female employees.</s>"}
{"text": "<s>[INST] \nDelete all records from the art exhibitions table for attendees aged 35 and older\nCREATE TABLE art_exhibitions (id INT, exhibition_type VARCHAR(20), attendance INT, attendee_age INT); \n[/INST]\nDELETE FROM art_exhibitions WHERE attendee_age >= 35;\nThis query deletes all records from the art_exhibitions table where the attendee_age is greater than or equal to 35. This will remove all attendees aged 35 and older from the table.</s>"}
{"text": "<s>[INST] \nList the number of rural hospitals and clinics in each state, ordered by the number of rural hospitals and clinics.\nCREATE TABLE hospitals (hospital_id INT, name TEXT, type TEXT, rural BOOLEAN); CREATE TABLE states (state_code TEXT, state_name TEXT); INSERT INTO hospitals (hospital_id, name, type, rural) VALUES (1, 'Rural General Hospital', 'Hospital', TRUE), (2, 'Rural Clinic', 'Clinic', TRUE); INSERT INTO states (state_code, state_name) VALUES ('NY', 'New York'), ('TX', 'Texas'); \n[/INST]\nSELECT states.state_name, SUM(CASE WHEN hospitals.type = 'Hospital' THEN 1 ELSE 0 END) as num_hospitals, SUM(CASE WHEN hospitals.type = 'Clinic' THEN 1 ELSE 0 END) as num_clinics, SUM(CASE WHEN hospitals.type IN ('Hospital', 'Clinic') THEN 1 ELSE 0 END) as total_rural_healthcare_services FROM hospitals INNER JOIN states ON TRUE WHERE hospitals.rural = TRUE GROUP BY states.state_name ORDER BY num_hospitals + num_clinics DESC;\n1. Perform an inner join between the hospitals and states tables on the rural field.   2. Filter the records to only include rural hospitals and clinics.   3. Group the results by the state_name field.   4. Calculate the sum of hospitals and clinics.   5. Order the results by the sum of hospitals and clinics in descending order.</s>"}
{"text": "<s>[INST] \nHow many vegan products does the company offer?\nCREATE TABLE products (product_id INT, product_name VARCHAR(255), is_vegan BOOLEAN); \n[/INST]\nSELECT COUNT(*) FROM products WHERE is_vegan = TRUE;\nThe SQL query counts the number of products that have the is_vegan column set to TRUE, which represents vegan products.</s>"}
{"text": "<s>[INST] \nWhat is the success rate of cases in which the plaintiff's age is greater than 65?\nCREATE TABLE cases (id INT, plaintiff_age INT, case_outcome VARCHAR(10)); INSERT INTO cases (id, plaintiff_age, case_outcome) VALUES (1, 68, 'won'); \n[/INST]\nSELECT 100.0 * AVG(CASE WHEN cases.plaintiff_age > 65 THEN (CASE WHEN cases.case_outcome = 'won' THEN 1 ELSE 0 END) ELSE 0 END) / COUNT(*) AS success_rate FROM cases;\nThis query calculates the success rate of cases in which the plaintiff's age is greater than 65 by counting the number of cases where the plaintiff's age is greater than 65 and the case outcome is 'won' and dividing it by the total number of cases. It uses a conditional statement to only consider rows where the plaintiff's age is greater than 65 and uses a subquery to calculate the total number of cases.</s>"}
{"text": "<s>[INST] \nList the total number of claims and total claim amount for each product type.\nCREATE TABLE Claim (ClaimID INT, PolicyholderID INT, ClaimDate DATE, Product VARCHAR(10), ClaimAmount DECIMAL(10,2)); INSERT INTO Claim (ClaimID, PolicyholderID, ClaimDate, Product, ClaimAmount) VALUES (1, 1, '2020-01-01', 'Auto', 500), (2, 1, '2021-01-01', 'Auto', 1000), (3, 2, '2020-01-01', 'Home', 2000), (4, 3, '2018-01-01', 'Auto', 1500); \n[/INST]\nSELECT Product, COUNT(*) AS TotalClaims, SUM(ClaimAmount) AS TotalClaimAmount FROM Claim GROUP BY Product;\nThis query uses the COUNT and SUM functions to calculate the total number of claims and total claim amount for each product type, respectively. The GROUP BY clause is used to group the records by the Product column. The result set includes one row for each product type, showing the total number of claims and total claim amount for that product type.</s>"}
{"text": "<s>[INST] \nDelete startups that have no funding records.\nCREATE TABLE startups (id INT, name TEXT, location TEXT, founder_gender TEXT, funding_amount INT); INSERT INTO startups (id, name, location, founder_gender, funding_amount) VALUES (1, 'Startup A', 'USA', 'male', 3000000); INSERT INTO startups (id, name, location, founder_gender, funding_amount) VALUES (2, 'Startup B', 'Canada', 'female', NULL); \n[/INST]\nDELETE FROM startups WHERE funding_amount IS NULL;\nThis SQL query deletes the rows in the startups table where the funding_amount is NULL, effectively removing startups without any funding records.</s>"}
{"text": "<s>[INST] \nWhat is the total quantity of garments sold by each brand, excluding those that have never been sold?\nCREATE TABLE brands (brand_id INT, brand_name VARCHAR(50)); INSERT INTO brands (brand_id, brand_name) VALUES (1, 'Versace'), (2, 'Gucci'), (3, 'Chanel'); CREATE TABLE sales (sale_id INT, brand_id INT, quantity INT); INSERT INTO sales (sale_id, brand_id, quantity) VALUES (1, 1, 10), (2, 1, 20), (3, 2, 30), (4, 3, 40), (5, 3, 50); \n[/INST]\nSELECT s.brand_id, SUM(s.quantity) AS total_quantity_sold FROM sales s WHERE s.quantity IS NOT NULL GROUP BY s.brand_id;\nThis SQL query calculates the total quantity of garments sold by each brand. It first selects the brand_id and sum of quantity sold from the sales table. The WHERE clause filters out rows with NULL values in the quantity column, excluding brands that have never had sales. Finally, the GROUP BY clause groups the results by brand_id.</s>"}
{"text": "<s>[INST] \nCreate a table named 'conditions'\nCREATE TABLE conditions ( condition_id INT PRIMARY KEY, name VARCHAR(100), description TEXT); \n[/INST]\nCREATE TABLE conditions ( condition_id INT PRIMARY KEY, name VARCHAR(100), description TEXT);\nThis SQL statement creates a new table named 'conditions' with 3 columns: - condition_id: an integer type and primary key - name: a variable character type with a length of 100 - description: a text type</s>"}
{"text": "<s>[INST] \nWhat is the average score difference between the home team and the away team in the NBA?\nCREATE TABLE nba_games (game_id INT, home_team VARCHAR(50), away_team VARCHAR(50), home_score INT, away_score INT); INSERT INTO nba_games (game_id, home_team, away_team, home_score, away_score) VALUES (1, 'Golden State Warriors', 'Los Angeles Lakers', 115, 105); \n[/INST]\nSELECT AVG(home_score - away_score) AS avg_score_difference FROM nba_games;\nThis query calculates the average difference between home_score and away_score columns.</s>"}
{"text": "<s>[INST] \nWhich animal has the highest population?\nCREATE TABLE animal_population (id INT, animal_name VARCHAR(50), population INT); INSERT INTO animal_population (id, animal_name, population) VALUES (1, 'Tiger', 2500), (2, 'Elephant', 5000), (3, 'Lion', 3000); \n[/INST]\nSELECT animal_name, MAX(population) FROM animal_population;\nThe SQL query retrieves the animal with the highest population by selecting the 'animal_name' and the maximum 'population' value from the 'animal_population' table.</s>"}
{"text": "<s>[INST] \nList all unique satellite image filenames for the 'west_field' from the 'imagery' table?\nCREATE TABLE imagery (id INT, field_name VARCHAR(20), filename VARCHAR(30)); INSERT INTO imagery (id, field_name, filename) VALUES (1, 'north_field', 'img101.jpg'), (2, 'west_field', 'img102.jpg'), (3, 'west_field', 'img103.jpg'), (4, 'east_field', 'img104.jpg'); \n[/INST]\nSELECT DISTINCT filename FROM imagery WHERE field_name = 'west_field';\nThis SQL query lists all unique satellite image filenames for the 'west_field' by selecting DISTINCT filenames from the 'imagery' table where the field_name is 'west_field'.</s>"}
{"text": "<s>[INST] \nFind the number of tunnels built before 2000\nCREATE TABLE tunnels (id INT, name TEXT, build_year INT, location TEXT); INSERT INTO tunnels (id, name, build_year, location) VALUES (1, 'Tunnel A', 1990, 'California'), (2, 'Tunnel B', 2005, 'Texas'); \n[/INST]\nSELECT COUNT(*) FROM tunnels WHERE build_year < 2000;\nThis query counts the number of records where the build_year is before 2000.</s>"}
{"text": "<s>[INST] \nIdentify the bottom 3 rural counties with the highest percentage of residents living below the poverty line.\nCREATE TABLE county (name VARCHAR(50), population INT, poverty_rate FLOAT); INSERT INTO county (name, population, poverty_rate) VALUES ('Greenfield', 25000, 15.5); INSERT INTO county (name, population, poverty_rate) VALUES ('Pineville', 18000, 18.0); INSERT INTO county (name, population, poverty_rate) VALUES ('Riverton', 32000, 12.8); INSERT INTO county (name, population, poverty_rate) VALUES ('Seabrook', 21000, 16.2); INSERT INTO county (name, population, poverty_rate) VALUES ('Whitmore', 19000, 19.5); INSERT INTO county (name, population, poverty_rate) VALUES ('Elmfield', 27000, 14.3); \n[/INST]\nSELECT name, poverty_rate FROM county ORDER BY poverty_rate DESC LIMIT 3;\nThis query identifies the bottom 3 rural counties with the highest percentage of residents living below the poverty line by calculating the poverty_rate for each county and ordering the results in descending order, then limiting the results to the bottom 3.</s>"}
{"text": "<s>[INST] \nDelete all records from the genetics table where the project name is 'ProjectX'.\nCREATE SCHEMA if not exists genetics; CREATE TABLE if not exists genetics.projects (id INT, name VARCHAR(100), start_date DATE, end_date DATE); INSERT INTO genetics.projects (id, name, start_date, end_date) VALUES (1, 'ProjectX', '2020-01-01', '2021-01-01'), (2, 'ProjectY', '2019-01-01', '2020-01-01'), (3, 'ProjectZ', '2022-01-01', NULL); \n[/INST]\nDELETE FROM genetics.projects WHERE name = 'ProjectX';\nThis query deletes all records from the genetics table where the project name is 'ProjectX'. It does so by selecting all records from the genetics.projects table where the project name is 'ProjectX' and then deleting those records.</s>"}
{"text": "<s>[INST] \nWhat is the average safety score for all creative AI applications?\nCREATE TABLE Creative_AI (app_name TEXT, safety_score INT); INSERT INTO Creative_AI (app_name, safety_score) VALUES ('AI Painter', 85), ('AI Poet', 92), ('AI Music Composer', 88); \n[/INST]\nSELECT AVG(safety_score) FROM Creative_AI;\nThis SQL query calculates the average safety score for all creative AI applications in the Creative_AI table. It does this by using the AVG() function, which returns the average value of a numeric column.</s>"}
{"text": "<s>[INST] \nCalculate the total fare collected at each station on the Blue Line on 2022-07-01\nCREATE TABLE stations (station_id INT, station_name VARCHAR(255), line VARCHAR(255));CREATE TABLE trips (trip_id INT, station_id INT, entry_time TIMESTAMP, fare FLOAT); INSERT INTO stations (station_id, station_name, line) VALUES (1, 'Bowdoin', 'Blue Line'), (2, 'Aquarium', 'Blue Line'), (3, 'Maverick', 'Blue Line'); INSERT INTO trips (trip_id, station_id, entry_time, fare) VALUES (1, 1, '2022-07-01 06:00:00', 2.5), (2, 1, '2022-07-01 18:00:00', 3.0), (3, 2, '2022-07-01 12:00:00', 1.5), (4, 3, '2022-07-01 10:00:00', 4.0); \n[/INST]\nSELECT s.station_name, SUM(t.fare) as total_fare FROM trips t JOIN stations s ON t.station_id = s.station_id WHERE s.line = 'Blue Line' AND t.entry_time::date = '2022-07-01' GROUP BY s.station_name;\nJOIN the trips and stations table on station_id; FILTER rows where line is 'Blue Line' and entry_time is on 2022-07-01; GROUP results by station_name and calculate the SUM of fare for each group.</s>"}
{"text": "<s>[INST] \nWhat are the names of forests in Australia and their respective wildlife species, along with their populations?\nCREATE TABLE Forests (Fid INT PRIMARY KEY, Name VARCHAR(50), Country VARCHAR(50), Area FLOAT); CREATE TABLE Wildlife (Wid INT PRIMARY KEY, Fid INT, Species VARCHAR(50), Population INT, FOREIGN KEY (Fid) REFERENCES Forests(Fid)); \n[/INST]\nSELECT Forests.Name, Wildlife.Species, Wildlife.Population FROM Forests FULL OUTER JOIN Wildlife ON Forests.Fid = Wildlife.Fid WHERE Forests.Country = 'Australia';\nThis query retrieves the names of forests in Australia, along with their respective wildlife species and populations. It does so by performing a full outer join between the Forests and Wildlife tables on their foreign key.</s>"}
{"text": "<s>[INST] \nIdentify the top 3 cruelty-free certified cosmetic products with the highest sales volume that contain 'rose' as an ingredient in the Canadian market.\nCREATE TABLE ingredients (ingredient_id INT, product_id INT, ingredient_name VARCHAR(50)); INSERT INTO ingredients (ingredient_id, product_id, ingredient_name) VALUES (1, 1, 'aloe vera'), (2, 2, 'lavender'), (3, 4, 'rose'), (4, 5, 'rose'); CREATE TABLE products (product_id INT, product_name VARCHAR(100), sales INT, certification VARCHAR(20)); INSERT INTO products (product_id, product_name, sales, certification) VALUES (1, 'Lipstick A', 6000, 'cruelty-free'), (2, 'Mascara B', 7000, 'not_certified'), (4, 'Lotion D', 9000, 'cruelty-free'), (5, 'Serum E', 10000, 'cruelty-free'); CREATE TABLE countries (country_code CHAR(2), country_name VARCHAR(50)); INSERT INTO countries (country_code, country_name) VALUES ('CA', 'Canada'); \n[/INST]\nSELECT products.product_name, products.sales FROM ingredients JOIN products ON ingredients.product_id = products.product_id JOIN countries ON products.country_code = countries.country_code WHERE ingredients.ingredient_name = 'rose' AND products.certification = 'cruelty-free' AND countries.country_name = 'Canada' ORDER BY products.sales DESC LIMIT 3;\nThis query performs an inner join between the 'ingredients', 'products', and 'countries' tables. It then filters the records to only include products that contain rose as an ingredient, are certified cruelty-free, and are sold in the Canadian market. It orders the results by sales in descending order and limits the output to the top 3 records.</s>"}
{"text": "<s>[INST] \nWhat is the total revenue generated from concerts for artist 'Ariana Grande' in Germany?\nCREATE TABLE Concerts (id INT, artist VARCHAR(100), country VARCHAR(100), price DECIMAL(5,2), tickets INT); INSERT INTO Concerts (id, artist, country, price, tickets) VALUES (1, 'Ariana Grande', 'Germany', 120.00, 15000), (2, 'Ariana Grande', 'Germany', 150.00, 20000); \n[/INST]\nSELECT SUM(price*tickets) FROM Concerts WHERE artist = 'Ariana Grande' AND country = 'Germany'\nThis query calculates the total revenue generated from concerts for artist 'Ariana Grande' in Germany by selecting the 'price' and 'tickets' columns from the 'Concerts' table where the 'artist' is 'Ariana Grande' and the 'country' is 'Germany', multiplying these two columns to get the revenue and then summing up the values using the SUM() function.</s>"}
{"text": "<s>[INST] \nWhat was the total weight of shipments from China to the USA in Q3 2021?\nCREATE TABLE Shipments (id INT, source VARCHAR(50), destination VARCHAR(50), weight FLOAT, ship_date DATE); INSERT INTO Shipments (id, source, destination, weight, ship_date) VALUES (1, 'China', 'USA', 500.5, '2021-07-01'); INSERT INTO Shipments (id, source, destination, weight, ship_date) VALUES (2, 'China', 'USA', 700.3, '2021-09-15'); \n[/INST]\nSELECT SUM(weight) FROM Shipments WHERE source = 'China' AND destination = 'USA' AND ship_date BETWEEN '2021-07-01' AND '2021-09-30';\nThis query calculates the total weight of shipments from China to the USA in Q3 2021 by summing the weight column where the source is China, the destination is the USA, and the ship_date is within Q3 2021.</s>"}
{"text": "<s>[INST] \nUpdate the price of all vegetarian dishes by 10% in the Texas region.\nCREATE TABLE Menu (menu_id INT PRIMARY KEY, menu_item VARCHAR(255), category VARCHAR(255), price DECIMAL(5,2), region VARCHAR(255)); \n[/INST]\nUPDATE Menu SET price = price * 1.10 WHERE category = 'Vegetarian' AND region = 'Texas';\nThis query updates the price of all vegetarian dishes by 10% in the Texas region by filtering for vegetarian dishes in the Texas region and then updating their prices.</s>"}
{"text": "<s>[INST] \nWhat is the total number of fishing vessels in the Indian Ocean and South Pacific regions?\nCREATE TABLE fishing_vessels (id INT, name VARCHAR(255), location VARCHAR(255), length FLOAT); INSERT INTO fishing_vessels (id, name, location, length) VALUES (1, 'Indian Ocean Tuna Fleet', 'Indian Ocean', 500); INSERT INTO fishing_vessels (id, name, location, length) VALUES (2, 'South Pacific Squid Fleet', 'South Pacific', 450); \n[/INST]\nSELECT SUM(length) FROM fishing_vessels WHERE location IN ('Indian Ocean', 'South Pacific');\nThe SQL query calculates the total length of fishing vessels in the Indian Ocean and South Pacific regions by summing up the length column where the location is either 'Indian Ocean' or 'South Pacific'.</s>"}
{"text": "<s>[INST] \nDetermine the number of transactions and their total value, separated by currency, for all transactions made in the last month.\nCREATE TABLE transaction_data (transaction_id INT, transaction_date DATE, product VARCHAR(20), currency VARCHAR(10), sales_amount DECIMAL(10,2)); INSERT INTO transaction_data VALUES (1, '2022-02-01', 'Laptop', 'USD', 1200.00), (2, '2022-02-05', 'Phone', 'EUR', 500.00), (3, '2022-03-01', 'Tablet', 'USD', 800.00), (4, '2022-03-10', 'Phone', 'USD', 300.00), (5, '2022-03-15', 'Tablet', 'EUR', 500.00); \n[/INST]\nSELECT currency, COUNT(*) AS num_transactions, SUM(sales_amount) AS total_value FROM transaction_data WHERE transaction_date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 MONTH) GROUP BY currency;\nThe SQL query filters the transaction data for the last month using the WHERE clause, and then calculates the number of transactions and their total value for each currency using the COUNT() and SUM() functions. The results are grouped by currency using the GROUP BY clause.</s>"}
{"text": "<s>[INST] \nList the organizations that have allocated the highest budget for ethical AI.\nCREATE TABLE allocations (id INT, organization VARCHAR(50), budget DECIMAL(10,2)); INSERT INTO allocations (id, organization, budget) VALUES (1, 'EthicalAI', 750000.00), (2, 'AIforGood', 800000.00); \n[/INST]\nSELECT organization FROM allocations WHERE budget = (SELECT MAX(budget) FROM allocations WHERE prompt LIKE '%ethical AI%');\nThis SQL query lists the organizations that have allocated the highest budget for ethical AI. It does this by using a subquery to find the maximum budget for ethical AI, then selecting the 'organization' column where the 'budget' column matches this maximum value.</s>"}
{"text": "<s>[INST] \nWhat is the risk score for each policyholder?\nSee context \n[/INST]\nSELECT * FROM policyholder_risk_scores;\nThis query retrieves the risk score for each policyholder by querying the \"policyholder_risk_scores\" view.</s>"}
{"text": "<s>[INST] \nHow many cargo handling incidents were reported in the Indian Ocean in 2020?\nCREATE TABLE cargo_handling (id INT, incident_date DATE, region VARCHAR(50), description VARCHAR(1000)); \n[/INST]\nSELECT COUNT(*) FROM cargo_handling WHERE region = 'Indian Ocean' AND YEAR(incident_date) = 2020;\nThis query counts the number of cargo handling incidents reported in the Indian Ocean in 2020 by selecting all records with 'Indian Ocean' in the region column and the year 2020 in the incident_date column, then counting the number of records using the COUNT() function.</s>"}
{"text": "<s>[INST] \nWhat is the number of units manufactured for each garment type by month in 2021?\nCREATE TABLE garment_manufacturing (garment_id INT, garment_type VARCHAR(50), production_date DATE, units_manufactured INT); CREATE TABLE garments (garment_id INT, garment_name VARCHAR(50)); \n[/INST]\nSELECT garment_type, EXTRACT(MONTH FROM production_date) AS month, SUM(units_manufactured) FROM garment_manufacturing JOIN garments ON garment_manufacturing.garment_id = garments.garment_id WHERE EXTRACT(YEAR FROM production_date) = 2021 GROUP BY garment_type, month;\nThis query calculates the number of units manufactured for each garment type by month in 2021. It does so by filtering the garment_manufacturing table for sales in 2021 and then grouping the results by garment type and month. The total number of units manufactured for each garment type and month is then calculated using the SUM function.</s>"}
{"text": "<s>[INST] \nHow many job training programs were held in each region in Q2 2022?\nCREATE TABLE Trainings (Quarter INT, Region TEXT, Programs INT); INSERT INTO Trainings (Quarter, Region, Programs) VALUES (2, 'North', 30), (2, 'South', 40), (2, 'East', 50), (2, 'West', 20); \n[/INST]\nSELECT Region, Programs FROM Trainings WHERE Quarter = 2;\nSimply selecting the existing data.</s>"}
{"text": "<s>[INST] \nRank the Education department's schools based on the number of students?\nCREATE TABLE Education_Dept (School_Name VARCHAR(255), Dept_Name VARCHAR(255), Number_Of_Students INT); INSERT INTO Education_Dept VALUES ('School A', 'Education', 1000), ('School B', 'Education', 1200), ('School C', 'Education', 800); \n[/INST]\nSELECT School_Name, Number_Of_Students, ROW_NUMBER() OVER (ORDER BY Number_Of_Students DESC) AS Rank FROM Education_Dept WHERE Dept_Name = 'Education';\nRank the schools in the Education department based on the number of students by ordering the data by Number_Of_Students in descending order and assigning a unique row number to each row.</s>"}
{"text": "<s>[INST] \nHow many European destinations did Russian tourists visit in 2020?\nCREATE TABLE tourism_stats (id INT PRIMARY KEY, year INT, country VARCHAR(255), destination VARCHAR(255));   INSERT INTO tourism_stats (id, year, country, destination) VALUES (1, 2020, 'Russia', 'France'), (2, 2020, 'Russia', 'Italy'), (3, 2020, 'Russia', 'Spain'), (4, 2020, 'Russia', 'Germany'); \n[/INST]\nSELECT COUNT(DISTINCT destination) FROM tourism_stats WHERE country = 'Russia' AND destination LIKE 'Europe%' AND year = 2020;\nThis query counts the number of unique European destinations visited by Russian tourists in the year 2020 by filtering the records with the specified country, destination starting with 'Europe', and year, and then applying the COUNT function to the distinct destination column.</s>"}
{"text": "<s>[INST] \nWhat is the number of patients who received psychotherapy in Mexico and had a positive outcome?\nCREATE TABLE mental_health.therapy (patient_id INT, therapy_type VARCHAR(50), country VARCHAR(50), outcome VARCHAR(50)); INSERT INTO mental_health.therapy (patient_id, therapy_type, country, outcome) VALUES (1, 'Psychotherapy', 'Mexico', 'Positive'); INSERT INTO mental_health.therapy (patient_id, therapy_type, country, outcome) VALUES (2, 'Medication', 'Mexico', 'Negative'); CREATE TABLE mental_health.patient (patient_id INT, age INT); INSERT INTO mental_health.patient (patient_id, age) VALUES (1, 35); INSERT INTO mental_health.patient (patient_id, age) VALUES (2, 28); \n[/INST]\nSELECT COUNT(therapy.patient_id) FROM mental_health.therapy INNER JOIN mental_health.patient ON therapy.patient_id = patient.patient_id WHERE therapy.therapy_type = 'Psychotherapy' AND therapy.country = 'Mexico' AND therapy.outcome = 'Positive';\nThis query calculates the number of patients who received psychotherapy in Mexico and had a positive outcome. It performs an inner join between the therapy and patient tables on the patient_id column, filters the records where the therapy_type is 'Psychotherapy', the country is 'Mexico', and the outcome is 'Positive', and then counts the number of those patients.</s>"}
{"text": "<s>[INST] \nInsert a new record for a customer 'Marie Dubois' from 'Europe' region with assets value $700,000.00.\nCREATE TABLE customers (id INT, name VARCHAR(100), region VARCHAR(50), assets_value FLOAT); \n[/INST]\nINSERT INTO customers (name, region, assets_value) VALUES ('Marie Dubois', 'Europe', 700000.00);\nThis query inserts a new record for a customer 'Marie Dubois' from the 'Europe' region with assets value $700,000.00 by inserting the values into the 'name', 'region', and 'assets_value' columns.</s>"}
{"text": "<s>[INST] \nWhat is the average temperature change in Iceland from 2010 to 2020?\nCREATE TABLE TemperatureChange (year INT, avg_change FLOAT); INSERT INTO TemperatureChange (year, avg_change) VALUES (2010, 0.4); INSERT INTO TemperatureChange (year, avg_change) VALUES (2011, 0.5); INSERT INTO TemperatureChange (year, avg_change) VALUES (2012, 0.6); INSERT INTO TemperatureChange (year, avg_change) VALUES (2013, 0.7); INSERT INTO TemperatureChange (year, avg_change) VALUES (2014, 0.8); INSERT INTO TemperatureChange (year, avg_change) VALUES (2015, 0.9); INSERT INTO TemperatureChange (year, avg_change) VALUES (2016, 1.0); INSERT INTO TemperatureChange (year, avg_change) VALUES (2017, 1.1); INSERT INTO TemperatureChange (year, avg_change) VALUES (2018, 1.2); INSERT INTO TemperatureChange (year, avg_change) VALUES (2019, 1.3); INSERT INTO TemperatureChange (year, avg_change) VALUES (2020, 1.4); \n[/INST]\nSELECT AVG(avg_change) FROM TemperatureChange WHERE year BETWEEN 2010 AND 2020 AND location = 'Iceland';\nThis query selects the average of the avg_change column from the TemperatureChange table where the year is between 2010 and 2020 and the location is Iceland, returning the average temperature change in Iceland from 2010 to 2020.</s>"}
{"text": "<s>[INST] \nWhat is the total number of aircraft manufactured by each company in 2020?\nCREATE TABLE Manufacturers (Id INT, Name VARCHAR(50), Country VARCHAR(50)); INSERT INTO Manufacturers (Id, Name, Country) VALUES (1, 'Boeing', 'USA'), (2, 'Airbus', 'Europe'); CREATE TABLE Aircraft (Id INT, ManufacturerId INT, Model VARCHAR(50), ProductionYear INT); INSERT INTO Aircraft (Id, ManufacturerId, Model, ProductionYear) VALUES (1, 1, '737', 2020), (2, 1, '787', 2020), (3, 2, 'A320', 2020), (4, 2, 'A350', 2020); \n[/INST]\nSELECT m.Name, COUNT(a.Id) as Total FROM Manufacturers m JOIN Aircraft a ON m.Id = a.ManufacturerId WHERE a.ProductionYear = 2020 GROUP BY m.Name;\nThe SQL query first joins the Manufacturers and Aircraft tables on the ManufacturerId column. Then, it filters the records to only include aircraft produced in 2020. Finally, it uses the GROUP BY statement to group the results by manufacturer and the COUNT function to count the number of aircraft for each manufacturer.</s>"}
{"text": "<s>[INST] \nWhat is the minimum water temperature recorded for each farm?\nCREATE TABLE FarmWaterTemp (FarmID int, Date date, WaterTemp float); INSERT INTO FarmWaterTemp (FarmID, Date, WaterTemp) VALUES (1, '2022-01-01', 10.5), (1, '2022-01-02', 11.2), (2, '2022-01-01', 12.1), (2, '2022-01-02', 12.6); \n[/INST]\nSELECT FarmID, MIN(WaterTemp) as MinTemp FROM FarmWaterTemp GROUP BY FarmID;\nThis query calculates the minimum water temperature recorded for each farm. It groups the records by farm ID and calculates the minimum water temperature for each group.</s>"}
{"text": "<s>[INST] \nWhat is the average listing price for green-certified properties in Seattle?\nCREATE TABLE properties (id INT, city VARCHAR(20), listing_price INT, green_certified BOOLEAN); INSERT INTO properties (id, city, listing_price, green_certified) VALUES (1, 'Seattle', 500000, true); INSERT INTO properties (id, city, listing_price, green_certified) VALUES (2, 'Seattle', 700000, false); \n[/INST]\nSELECT AVG(listing_price) FROM properties WHERE city = 'Seattle' AND green_certified = true;\nThis SQL query calculates the average listing price for properties in Seattle that have a green certification. It does this by using the AVG() function on the listing_price column, while filtering the rows with the WHERE clause for the city of Seattle and green-certified properties.</s>"}
{"text": "<s>[INST] \nList all podcasts produced in the 'education' category, ordered by title.\nCREATE TABLE podcasts (id INT, title VARCHAR(255), category VARCHAR(255), date DATE); \n[/INST]\nSELECT title FROM podcasts WHERE category='education' ORDER BY title;\nThe SQL query first selects all records from the 'podcasts' table where the category is 'education'. It then orders the results by title by using the ORDER BY function.</s>"}
{"text": "<s>[INST] \nWhat is the total production output of the plant located in 'CityA'?\nCREATE TABLE plants (plant_id INT, plant_name VARCHAR(50), city VARCHAR(50), production_output INT); INSERT INTO plants (plant_id, plant_name, city, production_output) VALUES (1, 'PlantA', 'CityA', 500), (2, 'PlantB', 'CityB', 700), (3, 'PlantC', 'CityC', 600); \n[/INST]\nSELECT SUM(production_output) FROM plants WHERE city = 'CityA';\nThis query calculates the total production output of the plant located in 'CityA'. It sums up the production_output of the 'plants' table where the city is 'CityA'.</s>"}
{"text": "<s>[INST] \nHow many community development initiatives were implemented in the Pacific Islands in 2017?\nCREATE TABLE CommunityDevelopment (id INT, location VARCHAR(20), initiative_count INT, year INT); INSERT INTO CommunityDevelopment (id, location, initiative_count, year) VALUES (1, 'Pacific Islands', 20, 2017), (2, 'Caribbean Islands', 30, 2018), (3, 'Atlantic Islands', 15, 2019); \n[/INST]\nSELECT SUM(initiative_count) FROM CommunityDevelopment WHERE location = 'Pacific Islands' AND year = 2017;\nThis query calculates the total number of community development initiatives implemented in the Pacific Islands in 2017 by summing the 'initiative_count' column where 'location' is 'Pacific Islands' and 'year' is 2017.</s>"}
{"text": "<s>[INST] \nWhich infrastructure projects in Texas have experienced cost overruns of over 20%?\nCREATE TABLE projects (project_id INT, project_name VARCHAR(100), state CHAR(2), planned_cost FLOAT, actual_cost FLOAT); INSERT INTO projects VALUES (1, 'TX Bullet Train', 'TX', 12000000000, 14000000000), (2, 'Dallas-Fort Worth Connector', 'TX', 800000000, 900000000), (3, 'Houston Ship Channel Expansion', 'TX', 1000000000, 1100000000); \n[/INST]\nSELECT * FROM projects WHERE state = 'TX' AND actual_cost > planned_cost * 1.2;\nThe SQL query selects all records from the projects table where the state is 'TX' and the actual cost is over 20% higher than the planned cost (1.2 times the planned cost).</s>"}
{"text": "<s>[INST] \nWhat is the maximum biosensor temperature recorded in the United States?\nCREATE SCHEMA if not exists biosensors;CREATE TABLE if not exists biosensors.measurements (id INT PRIMARY KEY, location VARCHAR(100), temperature FLOAT); INSERT INTO biosensors.measurements (id, location, temperature) VALUES (1, 'New York', 25.5), (2, 'Los Angeles', 28.2), (3, 'Chicago', 24.3), (4, 'Houston', 27.1), (5, 'Phoenix', 30.0); \n[/INST]\nSELECT MAX(temperature) FROM biosensors.measurements WHERE location = 'United States';\nThe SQL query retrieves the maximum biosensor temperature recorded in the United States by using the MAX() function on the temperature column and filtering the results to only include rows where the location is 'United States'.</s>"}
{"text": "<s>[INST] \nWhich countries have more than 75 violations of maritime laws related to plastic waste disposal?\nCREATE TABLE Maritime_Laws (id INT PRIMARY KEY, country VARCHAR(255), law_name VARCHAR(255), description TEXT); CREATE TABLE Vessel_Violations (id INT PRIMARY KEY, vessel_id INT, maritime_law_id INT, violation_date DATE, FOREIGN KEY (vessel_id) REFERENCES Vessels(id), FOREIGN KEY (maritime_law_id) REFERENCES Maritime_Laws(id)); \n[/INST]\nSELECT Maritime_Laws.country, COUNT(Vessel_Violations.id) FROM Maritime_Laws JOIN Vessel_Violations ON Maritime_Laws.id = Vessel_Violations.maritime_law_id WHERE law_name LIKE '%plastic%' GROUP BY Maritime_Laws.country HAVING COUNT(Vessel_Violations.id) > 75;\nIdentify countries with more than 75 maritime law violations related to plastic waste disposal.</s>"}
{"text": "<s>[INST] \nFind the number of Mars missions conducted by each agency\nCREATE TABLE missions (agency VARCHAR(255), mission_name VARCHAR(255), mission_type VARCHAR(255)); INSERT INTO missions (agency, mission_name, mission_type) VALUES ('ESA', 'MarsMission1', 'Mars'); INSERT INTO missions (agency, mission_name, mission_type) VALUES ('NASA', 'MarsMission2', 'Mars'); INSERT INTO missions (agency, mission_name, mission_type) VALUES ('ESA', 'MoonMission3', 'Moon'); \n[/INST]\nSELECT agency, COUNT(*) FROM missions WHERE mission_type = 'Mars' GROUP BY agency;\nThis query finds the number of Mars missions conducted by each agency by selecting the 'agency' and the count of all records, grouped by 'agency' where 'mission_type' is 'Mars'.</s>"}
{"text": "<s>[INST] \nWhat are the transactions related to High risk level accounts?\nCREATE TABLE Accounts (AccountId INT, AccountType VARCHAR(20), Balance DECIMAL(10,2)); INSERT INTO Accounts (AccountId, AccountType, Balance) VALUES (1, 'Checking', 2500.00); CREATE TABLE Risk (RiskId INT, AccountId INT, RiskLevel VARCHAR(20)); INSERT INTO Risk (RiskId, AccountId, RiskLevel) VALUES (1, 1, 'High'); CREATE TABLE Transactions (TransactionId INT, AccountId INT, TransactionType VARCHAR(20), Amount DECIMAL(10,2)); INSERT INTO Transactions (TransactionId, AccountId, TransactionType, Amount) VALUES (1, 1, 'Deposit', 1000.00); \n[/INST]\nSELECT T.TransactionId, T.AccountId, T.TransactionType, T.Amount FROM Transactions T JOIN Accounts A ON T.AccountId = A.AccountId JOIN Risk R ON A.AccountId = R.AccountId WHERE R.RiskLevel = 'High';\nJoin Transactions, Accounts, and Risk tables on AccountId, then filter for High risk level accounts.</s>"}
{"text": "<s>[INST] \nWhat was the total revenue for 'Crepe Cafe' in the second quarter of 2022?\nCREATE TABLE Pizzeria (Date DATE, Revenue INT); INSERT INTO Pizzeria (Date, Revenue) VALUES ('2022-04-01', 600), ('2022-04-02', 700), ('2022-04-03', 800), ('2022-05-01', 600), ('2022-05-02', 700), ('2022-05-03', 800), ('2022-06-01', 600), ('2022-06-02', 700), ('2022-06-03', 800); \n[/INST]\nSELECT SUM(Revenue) FROM Pizzeria WHERE Date BETWEEN '2022-04-01' AND '2022-06-30' AND Date LIKE '2022-04%' OR Date LIKE '2022-05%' OR Date LIKE '2022-06%' AND Restaurant = 'Crepe Cafe';\nThis SQL query calculates the total revenue for 'Crepe Cafe' in the second quarter of 2022 by finding the sum of the Revenue column for dates between '2022-04-01' and '2022-06-30' that start with '2022-04', '2022-05', or '2022-06' and where the Restaurant column equals 'Crepe Cafe'.</s>"}
{"text": "<s>[INST] \nWhat is the total number of maintenance tasks performed on trains in the last month?\nCREATE TABLE TrainMaintenance (TaskID INT, TaskDate DATE, TaskType VARCHAR(20)); INSERT INTO TrainMaintenance (TaskID, TaskDate, TaskType) VALUES (1, '2022-01-05', 'Oil Change'), (2, '2022-01-10', 'Inspection'), (3, '2022-02-03', 'Tire Rotation'), (4, '2022-01-15', 'Brake Adjustment'), (5, '2022-02-12', 'Oil Change'); \n[/INST]\nSELECT COUNT(*) FROM TrainMaintenance WHERE TaskDate >= '2022-01-01' AND TaskDate < '2022-02-01';\nCount the total number of maintenance tasks performed on trains in the last month by filtering records with 'TaskDate' greater than or equal to the start of the month and less than the start of the next month.</s>"}
{"text": "<s>[INST] \nWhat are the names and ranks of all military personnel in country Z who were promoted in the year 2020?\nCREATE TABLE military_promotions (id INT, name TEXT, country TEXT, rank TEXT, promotion_year INT);INSERT INTO military_promotions (id, name, country, rank, promotion_year) VALUES (1, 'John Doe', 'Country Z', 'Sergeant', 2020), (2, 'Jane Smith', 'Country Z', 'Captain', 2020); \n[/INST]\nSELECT name, rank FROM military_promotions WHERE country = 'Country Z' AND promotion_year = 2020;\nThis SQL query uses the WHERE statement to filter the results to only include rows where the country is Country Z and the promotion year is 2020. It then uses the SELECT statement to retrieve the name and rank for each of these rows.</s>"}
{"text": "<s>[INST] \nFind the number of policyholders in each state\nCREATE TABLE policyholders (id INT, name TEXT, dob DATE, gender TEXT, state TEXT); INSERT INTO policyholders (id, name, dob, gender, state) VALUES (1, 'John Doe', '1960-01-01', 'Male', 'NY'), (2, 'Jane Smith', '1970-05-10', 'Female', 'CA'), (3, 'Mike Johnson', '1985-08-15', 'Male', 'TX'), (4, 'Aaliyah Brown', '1990-06-20', 'Female', 'CA'), (5, 'Kento Nakamura', '1988-03-14', 'Male', 'JP'); \n[/INST]\nSELECT state, COUNT(*) FROM policyholders GROUP BY state;\nThis query groups the policyholders table by the state column and then calculates the count of records for each state.</s>"}
{"text": "<s>[INST] \nWhich brands have the highest number of organic products?\n CREATE TABLE product_organic (product_id INT, brand VARCHAR(255), is_organic BOOLEAN); INSERT INTO product_organic (product_id, brand, is_organic) VALUES (1, 'Lush', true), (2, 'The Body Shop', false), (3, 'Sephora', false);  \n[/INST]\n SELECT brand, COUNT(*) as organic_products FROM product_organic WHERE is_organic = true GROUP BY brand ORDER BY organic_products DESC;\nThis query retrieves the number of organic products for each brand, grouped by brand and sorted in descending order by the number of organic products.</s>"}
{"text": "<s>[INST] \nWhat is the total socially responsible lending for each country?\nCREATE TABLE socially_responsible_lending_data (lending_id INT, amount DECIMAL(15, 2), country VARCHAR(50)); INSERT INTO socially_responsible_lending_data (lending_id, amount, country) VALUES (1, 5000000, 'Brazil'), (2, 7000000, 'India'), (3, 6000000, 'South Africa'), (4, 8000000, 'Indonesia'), (5, 9000000, 'China'); CREATE VIEW socially_responsible_lending_view AS SELECT country, SUM(amount) as total_lending FROM socially_responsible_lending_data GROUP BY country; \n[/INST]\nSELECT country, total_lending FROM socially_responsible_lending_view;\nThe SQL query calculates the total socially responsible lending for each country by using a view that groups the data by country and calculates the sum of amounts for each group. The view is then queried to return the country and total lending for each group.</s>"}
{"text": "<s>[INST] \nFind the number of unique circular supply chain members in the 'supply_chain' table, excluding those with 'company_type' as 'manufacturer'.\nCREATE TABLE supply_chain (member_id INT, company_name TEXT, company_type TEXT); INSERT INTO supply_chain (member_id, company_name, company_type) VALUES (1, 'ABC Enterprises', 'manufacturer'), (2, 'Green Solutions', 'recycler'), (3, 'XYZ Logistics', 'distributor'), (4, 'Fair Trade Co.', 'wholesaler'), (5, 'Eco-friendly Imports', 'importer'); \n[/INST]\nSELECT COUNT(DISTINCT member_id) FROM supply_chain WHERE company_type != 'manufacturer';\nThe SQL query finds the number of unique circular supply chain members, excluding manufacturers, by counting the distinct member_id values where the company_type is not 'manufacturer'.</s>"}
{"text": "<s>[INST] \nWhat is the average K/D ratio for players from Japan?\nCREATE TABLE players (id INT, name VARCHAR(50), country VARCHAR(50)); CREATE TABLE games (id INT, player_id INT, kills INT, deaths INT); INSERT INTO players VALUES (1, 'Hiroshi Tanaka', 'Japan'); INSERT INTO players VALUES (2, 'Sophia Lee', 'USA'); INSERT INTO games VALUES (1, 1, 12, 6); INSERT INTO games VALUES (2, 1, 18, 4); INSERT INTO games VALUES (3, 2, 7, 3); INSERT INTO games VALUES (4, 2, 10, 5); \n[/INST]\nSELECT player_id, AVG(kills/deaths) as K_D_ratio FROM players INNER JOIN games ON players.id = games.player_id WHERE country = 'Japan' GROUP BY player_id;\nThis query first joins the 'players' table with the 'games' table on the 'player_id' column, and then filters the results to only include rows where the player's country is 'Japan'. It then calculates the average K/D ratio for each player by dividing the sum of kills by the sum of deaths.</s>"}
{"text": "<s>[INST] \nWhat is the number of military personnel in each branch, sorted by the total number of personnel in descending order?\nCREATE TABLE MilitaryPersonnel (PersonnelID INT, PersonnelBranch VARCHAR(20), PersonnelCountry VARCHAR(30), PersonnelCount INT); INSERT INTO MilitaryPersonnel (PersonnelID, PersonnelBranch, PersonnelCountry, PersonnelCount) VALUES (1, 'Army', 'USA', 500000), (2, 'Navy', 'USA', 350000), (3, 'Air Force', 'Canada', 20000), (4, 'Marines', 'UK', 25000), (5, 'Coast Guard', 'USA', 50000); \n[/INST]\nSELECT PersonnelBranch, SUM(PersonnelCount) as Total FROM MilitaryPersonnel GROUP BY PersonnelBranch ORDER BY Total DESC;\nThis SQL query groups the data by branch, then sums the number of personnel for each branch, providing the number of military personnel in each branch, sorted by the total number of personnel in descending order.</s>"}
{"text": "<s>[INST] \nWhich countries have the most wind power projects?\nCREATE TABLE project_wind (project_name TEXT, country TEXT); INSERT INTO project_wind (project_name, country) VALUES ('Project A', 'Country A'), ('Project B', 'Country A'), ('Project C', 'Country B'), ('Project D', 'Country C'), ('Project E', 'Country D'), ('Project F', 'Country D'); \n[/INST]\nSELECT country, COUNT(*) FROM project_wind GROUP BY country ORDER BY COUNT(*) DESC;\nThis SQL query counts the number of wind power projects for each country and orders the results in descending order by the count of records in the project_wind table.</s>"}
{"text": "<s>[INST] \nWhat is the average salary of employees in each department, excluding those on paternity leave?\nCREATE TABLE Employees (EmployeeID int, Department varchar(20), Salary int, LeaveStatus varchar(10)); INSERT INTO Employees (EmployeeID, Department, Salary, LeaveStatus) VALUES (1, 'Marketing', 70000, 'Active'); INSERT INTO Employees (EmployeeID, Department, Salary, LeaveStatus) VALUES (2, 'Marketing', 75000, 'Maternity'); INSERT INTO Employees (EmployeeID, Department, Salary, LeaveStatus) VALUES (3, 'IT', 80000, 'Paternity'); \n[/INST]\nSELECT Department, AVG(Salary) FROM Employees WHERE LeaveStatus <> 'Paternity' GROUP BY Department;\nThe SQL query calculates the average salary of employees in each department, excluding those on paternity leave. It uses the AVG function to find the average salary and the WHERE clause to filter employees based on the leave status. The GROUP BY clause is used to group the results by department.</s>"}
{"text": "<s>[INST] \nWhat is the maximum age of a student in the database?\nCREATE TABLE Students (StudentID INT, Age INT, Gender VARCHAR(10), CoursesTaken VARCHAR(20)); INSERT INTO Students (StudentID, Age, Gender, CoursesTaken) VALUES (1, 22, 'Male', 'Lifelong Learning'); INSERT INTO Students (StudentID, Age, Gender, CoursesTaken) VALUES (2, 20, 'Female', 'Open Pedagogy'); INSERT INTO Students (StudentID, Age, Gender, CoursesTaken) VALUES (3, 25, 'Male', 'Lifelong Learning'); \n[/INST]\nSELECT MAX(Age) FROM Students;\nThe SQL query calculates the maximum age of a student in the database by filtering the Students table based on the Age column and then calculating the maximum using the MAX function.</s>"}
{"text": "<s>[INST] \nWhat is the average depth of all expeditions for the 'Ocean Explorer' organization?\nCREATE TABLE expedition (org VARCHAR(20), depth INT); INSERT INTO expedition VALUES ('Ocean Explorer', 2500), ('Ocean Explorer', 3000), ('Sea Discoverers', 2000); \n[/INST]\nSELECT AVG(depth) FROM expedition WHERE org = 'Ocean Explorer';\nThis query calculates the average depth of all expeditions for the 'Ocean Explorer' organization by summing the depths and dividing by the count of expeditions.</s>"}
{"text": "<s>[INST] \nHow many employees from underrepresented communities are employed in the 'Mining Operations' department across all sites?\nCREATE TABLE Employees (EmployeeID INT, Name VARCHAR(50), Department VARCHAR(50), Community VARCHAR(50), Site VARCHAR(50)); INSERT INTO Employees (EmployeeID, Name, Department, Community, Site) VALUES (1, 'John Doe', 'Mining Operations', 'Underrepresented', 'Site A'); INSERT INTO Employees (EmployeeID, Name, Department, Community, Site) VALUES (2, 'Jane Smith', 'Mining Operations', 'Represented', 'Site B'); INSERT INTO Employees (EmployeeID, Name, Department, Community, Site) VALUES (3, 'Alice Johnson', 'Mining Operations', 'Underrepresented', 'Site A'); INSERT INTO Employees (EmployeeID, Name, Department, Community, Site) VALUES (4, 'Bob Brown', 'Mining Operations', 'Represented', 'Site B'); \n[/INST]\nSELECT COUNT(*) FROM Employees WHERE Department = 'Mining Operations' AND Community = 'Underrepresented';\nThis SQL query calculates the number of employees from underrepresented communities employed in the 'Mining Operations' department by filtering the 'Employees' table for employees in the 'Mining Operations' department and from underrepresented communities using the WHERE clause. It then calculates the count using the COUNT function.</s>"}
{"text": "<s>[INST] \nHow many people have been tested for Hepatitis C in 2020?\nCREATE TABLE hepatitis_tests (id INT, patient_id INT, test_date DATE); CREATE VIEW hepatitis_c_tests AS SELECT * FROM hepatitis_tests WHERE test_type = 'Hepatitis C'; \n[/INST]\nSELECT COUNT(*) FROM hepatitis_c_tests WHERE YEAR(test_date) = 2020;\nThis query counts the number of records in the hepatitis_c_tests view (which is a subset of the hepatitis_tests table) where the test_date is in the year 2020.</s>"}
{"text": "<s>[INST] \nShow the number of accommodations provided for students with different types of disabilities, and the percentage of total accommodations for each disability type?\nCREATE TABLE students (student_id INT, student_name VARCHAR(255), disability_type VARCHAR(255)); CREATE TABLE accommodations (accommodation_id INT, student_id INT, accommodation_date DATE); \n[/INST]\nSELECT s.disability_type, COUNT(a.accommodation_id) as accommodations_count, ROUND(COUNT(a.accommodation_id) * 100.0 / (SELECT COUNT(*) FROM accommodations) , 2) as percentage_of_total FROM students s JOIN accommodations a ON s.student_id = a.student_id GROUP BY s.disability_type;\nThe SQL query first joins the 'students' table with the 'accommodations' table on the 'student_id' column. Then, it groups the results by the 'disability_type' column and calculates the total number of accommodations for each disability type. Finally, it calculates the percentage of total accommodations for each disability type by dividing the total number of accommodations for each disability type by the total number of accommodations and multiplying by 100.0. The results are rounded to 2 decimal places.</s>"}
{"text": "<s>[INST] \nGet the top 5 strains with the highest THC content from labs in Colorado and California.\nCREATE TABLE StrainLabResults (StrainName VARCHAR(255), Lab VARCHAR(255), THCResult DECIMAL(5,2), CBNResult DECIMAL(5,2), DateTested DATE); INSERT INTO StrainLabResults (StrainName, Lab, THCResult, CBNResult, DateTested) VALUES ('Strain A', 'Lab A', 25.0, 1.0, '2022-01-01'), ('Strain B', 'Lab B', 30.0, 1.5, '2022-01-02'), ('Strain C', 'Lab C', 22.5, 0.5, '2022-01-03'), ('Strain D', 'Lab D', 27.0, 1.2, '2022-01-04'), ('Strain E', 'Lab E', 28.5, 1.8, '2022-01-05'); \n[/INST]\nSELECT StrainName, THCResult FROM (SELECT StrainName, THCResult, ROW_NUMBER() OVER(ORDER BY THCResult DESC) as rn FROM StrainLabResults WHERE Lab IN ('Colorado Lab', 'California Lab')) t WHERE rn <= 5;\nThis query uses a subquery and ROW_NUMBER() function to rank strain THC content in descending order, then filters for the top 5 ranked strains and returns strain names and THC results.</s>"}
{"text": "<s>[INST] \nHow many units of product A are stored in each warehouse?\nCREATE TABLE warehouses (warehouse_id INT, location TEXT); INSERT INTO warehouses (warehouse_id, location) VALUES (1, 'New York'), (2, 'Chicago'), (3, 'Los Angeles'); CREATE TABLE inventory (product TEXT, warehouse_id INT, quantity INT); INSERT INTO inventory (product, warehouse_id, quantity) VALUES ('Product A', 1, 100), ('Product A', 2, 200), ('Product A', 3, 300); \n[/INST]\nSELECT i.product, w.location, SUM(i.quantity) as total_quantity FROM inventory i JOIN warehouses w ON i.warehouse_id = w.warehouse_id WHERE i.product = 'Product A' GROUP BY w.location;\nThis query joins the warehouses and inventory tables based on the warehouse_id. It then filters the data to show only the inventory for 'Product A' using the WHERE clause and calculates the total quantity for each location using the SUM function. The result is grouped by the location.</s>"}
{"text": "<s>[INST] \nHow many europium units were extracted in Australia after 2016?\nCREATE TABLE australia_europium (id INT, year INT, units INT); INSERT INTO australia_europium (id, year, units) VALUES (1, 2014, 350), (2, 2015, 400), (3, 2016, 450), (4, 2017, 500), (5, 2018, 550); \n[/INST]\nSELECT COUNT(*) FROM australia_europium WHERE year > 2016;\nThe SQL query counts the number of europium units extracted in Australia after 2016 by using the COUNT function with the asterisk (*) symbol.</s>"}
{"text": "<s>[INST] \nWhat is the number of days with temperature above 30 degrees in Field11 and Field12 in the month of August?\nCREATE TABLE Field11 (date DATE, temperature FLOAT); INSERT INTO Field11 VALUES ('2021-08-01', 31), ('2021-08-02', 28); CREATE TABLE Field12 (date DATE, temperature FLOAT); INSERT INTO Field12 VALUES ('2021-08-01', 33), ('2021-08-02', 29); \n[/INST]\nSELECT COUNT(*) as days_above_30 FROM (SELECT f11.date FROM Field11 f11 WHERE f11.temperature > 30 UNION ALL SELECT f12.date FROM Field12 f12 WHERE f12.temperature > 30) as days_above_30;\nThis query calculates the number of days with temperature above 30 degrees in Field11 and Field12 in the month of August by selecting all the dates in each table where temperature is greater than 30 and unioning the two tables together. It then counts the total number of rows in the unioned table to get the number of days above 30 degrees.</s>"}
{"text": "<s>[INST] \nWhich users have the most followers, and what is the total number of posts, comments, and likes for those users in the past month?\nCREATE TABLE user_info (user_id INT, username VARCHAR(50), country VARCHAR(50), followers INT); CREATE TABLE user_activity (user_id INT, post_date DATE, post_type VARCHAR(10), activity INT); INSERT INTO user_info (user_id, username, country, followers) VALUES (1, 'johndoe', 'USA', 1000), (2, 'janedoe', 'Canada', 2000), (3, 'samantha', 'Mexico', 500); INSERT INTO user_activity (user_id, post_date, post_type, activity) VALUES (1, '2022-02-01', 'post', 10), (1, '2022-02-05', 'comment', 5), (2, '2022-02-03', 'like', 1); \n[/INST]\nSELECT ui.username, SUM(ua.activity) as total_activity FROM user_info ui JOIN user_activity ua ON ui.user_id = ua.user_id WHERE ui.followers IN (SELECT MAX(followers) FROM user_info) AND ua.post_date BETWEEN DATE_SUB(NOW(), INTERVAL 1 MONTH) AND NOW() GROUP BY ui.username;\nThis query identifies users with the most followers and calculates their total activity (posts, comments, and likes) in the past month. It does this by joining the user_info and user_activity tables on user_id and filtering for users with the maximum number of followers, and where the post_date is within the past month. The SUM function is used to calculate the total activity for each user, which is grouped by username.</s>"}
{"text": "<s>[INST] \nWhat is the total amount donated by each donor in the last 6 months?\nCREATE TABLE Donors (DonorID INT, Name TEXT); CREATE TABLE Donations (DonationID INT, DonorID INT, DonationDate DATE, DonationAmount DECIMAL); \n[/INST]\nSELECT D.Name as DonorName, SUM(DonationAmount) as TotalDonationLast6Months FROM Donors D INNER JOIN Donations Don ON D.DonorID = Don.DonorID WHERE DonationDate >= DATE_SUB(CURDATE(), INTERVAL 6 MONTH) GROUP BY D.DonorID, D.Name;\nThis query joins the Donors and Donations table on DonorID and filters for donations made in the last 6 months. It then groups the result by DonorID and Name, calculating the total donation amount for each donor in the last 6 months.</s>"}
{"text": "<s>[INST] \nHow many public hospitals are there in each region?\nCREATE TABLE regions (region_id INT, region_name VARCHAR(255)); INSERT INTO regions (region_id, region_name) VALUES (1, 'North'), (2, 'South'), (3, 'East'), (4, 'West'); CREATE TABLE hospitals (hospital_id INT, hospital_name VARCHAR(255), region_id INT); INSERT INTO hospitals (hospital_id, hospital_name, region_id) VALUES (1, 'North General', 1), (2, 'South City', 2), (3, 'East End', 3), (4, 'Westview', 4); \n[/INST]\nSELECT region_name, COUNT(*) FROM hospitals JOIN regions ON hospitals.region_id = regions.region_id GROUP BY region_name;\nThis query counts the number of hospitals in each region. It first creates a join between the hospitals and regions tables based on the region_id. The query then groups the rows by region_name and calculates the count of hospitals for each region.</s>"}
{"text": "<s>[INST] \nWhat is the minimum enrollment for community education programs?\nCREATE TABLE community_education (id INT, program_name VARCHAR(50), enrollment INT); INSERT INTO community_education (id, program_name, enrollment) VALUES (1, 'Wildlife Conservation', 1500), (2, 'Biodiversity Awareness', 1200), (3, 'Climate Change Education', 1800); \n[/INST]\nSELECT MIN(enrollment) FROM community_education;\nThe SQL query finds the minimum enrollment for community education programs by selecting the minimum value of the 'enrollment' column in the 'community_education' table.</s>"}
{"text": "<s>[INST] \nWhat is the total number of building permits issued in the city of New York in 2021 and 2022?\nCREATE TABLE BuildingPermitsNY (id INT, city VARCHAR(20), year INT, permit_number VARCHAR(20)); INSERT INTO BuildingPermitsNY (id, city, year, permit_number) VALUES (1, 'New York', 2021, 'ABC123'), (2, 'New York', 2022, 'DEF456'), (3, 'New York', 2021, 'GHI789'); \n[/INST]\nSELECT permit_number FROM BuildingPermitsNY WHERE city = 'New York' AND year IN (2021, 2022);\nThis query selects all rows from the BuildingPermitsNY table where the city is 'New York' and the year is either 2021 or 2022, returning the permit_number for all building permits issued in New York in 2021 and 2022.</s>"}
{"text": "<s>[INST] \nHow many 'vegan' options exist on the menu at 'El Bio Vegan'?\nCREATE TABLE menus (restaurant VARCHAR(255), item VARCHAR(255), vegan BOOLEAN); INSERT INTO menus (restaurant, item, vegan) VALUES ('El Bio Vegan', 'vegan burger', 1), ('El Bio Vegan', 'beef burger', 0); \n[/INST]\nSELECT COUNT(*) FROM menus WHERE restaurant = 'El Bio Vegan' AND vegan = 1;\nThis query filters the 'menus' table for rows with the restaurant 'El Bio Vegan' and 'vegan' value 1 (true), then returns the count of those rows.</s>"}
{"text": "<s>[INST] \nWhat is the average rating of theater performances, in the past year, broken down by age group and language?\nCREATE TABLE Events (id INT, date DATE, language VARCHAR(50), event_type VARCHAR(50)); INSERT INTO Events (id, date, language, event_type) VALUES (1, '2021-01-01', 'English', 'Theater'), (2, '2021-02-01', 'Spanish', 'Theater'); CREATE TABLE Ratings (id INT, event_id INT, age_group VARCHAR(20), rating DECIMAL(3,2)); INSERT INTO Ratings (id, event_id, age_group, rating) VALUES (1, 1, '18-24', 4.5), (2, 1, '25-34', 4.0), (3, 2, '35-44', 4.7); \n[/INST]\nSELECT e.language, r.age_group, AVG(r.rating) AS avg_rating FROM Events e INNER JOIN Ratings r ON e.id = r.event_id WHERE e.date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR) AND e.event_type = 'Theater' GROUP BY e.language, r.age_group;\nThis query joins the Events and Ratings tables on the event_id field, filters for theater events in the past year, and groups the results by language and age group, calculating the average rating for each group.</s>"}
{"text": "<s>[INST] \nWhat is the total number of union members in each occupation category?\nCREATE TABLE union_members (id INT, member_id INT, occupation VARCHAR(20)); INSERT INTO union_members (id, member_id, occupation) VALUES (1, 1001, 'Engineer'), (2, 1002, 'Teacher'), (3, 1003, 'Engineer'), (4, 1004, 'Doctor'); \n[/INST]\nSELECT occupation, SUM(1) OVER (PARTITION BY occupation) AS total_union_members FROM union_members;\nThe SQL query calculates the total number of union members in each occupation category by partitioning the data by occupation and counting the number of members.</s>"}
{"text": "<s>[INST] \nList the top 5 cities with the highest renewable energy capacity installed.\nCREATE TABLE renewable_projects (project_id INT, project_name VARCHAR(100), city_name VARCHAR(50), installed_capacity FLOAT); CREATE TABLE cities (city_name VARCHAR(50), state VARCHAR(50), country VARCHAR(50)); \n[/INST]\nSELECT r.city_name, SUM(r.installed_capacity) AS total_capacity FROM renewable_projects r INNER JOIN cities c ON r.city_name = c.city_name GROUP BY r.city_name ORDER BY total_capacity DESC LIMIT 5;\nThis SQL query lists the top 5 cities with the highest renewable energy capacity installed by summing the installed_capacity column in the renewable_projects table, grouped by city_name, and ordered in descending order. It uses an inner join with the cities table to include the city name information.</s>"}
{"text": "<s>[INST] \nWhat is the average budget allocated for cybersecurity operations in the Pacific region?\nCREATE TABLE Regions (region_id INT, region_name VARCHAR(50)); CREATE TABLE Cybersecurity_Budgets (budget_id INT, region_id INT, year INT, amount DECIMAL(10,2)); INSERT INTO Regions (region_id, region_name) VALUES (1, 'Pacific'); INSERT INTO Cybersecurity_Budgets (budget_id, region_id, year, amount) VALUES (1, 1, 2020, 5000000.00), (2, 1, 2021, 5500000.00); \n[/INST]\nSELECT AVG(amount) FROM Cybersecurity_Budgets WHERE year BETWEEN 2020 AND 2021 AND region_id = (SELECT region_id FROM Regions WHERE region_name = 'Pacific');\nThe SQL query calculates the average amount of the 'amount' column for records with 'region_id' corresponding to the 'Pacific' region and between the years 2020 and 2021.</s>"}
{"text": "<s>[INST] \nList the first and last name of the youngest donor for each country?\nCREATE TABLE Donors (DonorID INT, FirstName VARCHAR(50), LastName VARCHAR(50), Country VARCHAR(100), DateOfBirth DATE); INSERT INTO Donors (DonorID, FirstName, LastName, Country, DateOfBirth) VALUES (1, 'John', 'Doe', 'USA', '1980-01-01'), (2, 'Jane', 'Doe', 'Canada', '1990-01-01'); \n[/INST]\nSELECT FirstName, LastName, Country, MIN(DateOfBirth) as YoungestDonor FROM Donors GROUP BY Country;\nThis query groups the Donors table by Country, then calculates the minimum DateOfBirth within each group using the MIN() function.</s>"}
{"text": "<s>[INST] \nWhich mental health campaigns had the highest and lowest budgets?\nCREATE TABLE Campaigns (CampaignID INT, Year INT, Budget INT); CREATE TABLE MentalHealthCampaigns (CampaignID INT, CampaignName VARCHAR(50)); \n[/INST]\nSELECT MentalHealthCampaigns.CampaignName, Campaigns.Budget, RANK() OVER (ORDER BY Campaigns.Budget DESC) AS Rank FROM Campaigns INNER JOIN MentalHealthCampaigns ON Campaigns.CampaignID = MentalHealthCampaigns.CampaignID;\nThe SQL query joins the Campaigns table and the MentalHealthCampaigns table on the CampaignID field, which is a common field in both tables. The RANK() function is then used to rank the campaigns by budget in descending order. The results show the campaigns with the highest and lowest budgets.</s>"}
{"text": "<s>[INST] \nWhat is the average number of military personnel per peacekeeping mission for each country?\nCREATE TABLE peacekeeping_missions (country VARCHAR(255), mission VARCHAR(255), personnel INT); INSERT INTO peacekeeping_missions (country, mission, personnel) VALUES ('USA', 'Mission1', 100), ('USA', 'Mission2', 150), ('China', 'Mission1', 200), ('China', 'Mission3', 250), ('France', 'Mission2', 120), ('France', 'Mission3', 180), ('UK', 'Mission1', 80), ('UK', 'Mission2', 130), ('UK', 'Mission3', 170); \n[/INST]\nSELECT country, AVG(personnel) as avg_personnel_per_mission FROM peacekeeping_missions GROUP BY country;\nThis query calculates the average number of military personnel per peacekeeping mission for each country. It does this by averaging the 'personnel' column for each 'country', and then grouping by 'country'.</s>"}
{"text": "<s>[INST] \nList the top 3 most successful teams in the NBA by wins and provide their coaches' names.\nCREATE TABLE nba_teams (team_id INT, team_name VARCHAR(50), wins INT, coach_name VARCHAR(50)); INSERT INTO nba_teams (team_id, team_name, wins, coach_name) VALUES (1, 'Boston Celtics', 62, 'Ime Udoka'), (2, 'Golden State Warriors', 53, 'Steve Kerr'), (3, 'Milwaukee Bucks', 51, 'Mike Budenholzer'); \n[/INST]\nSELECT team_name, coach_name, wins FROM nba_teams ORDER BY wins DESC LIMIT 3;\nThis SQL query lists the top 3 most successful teams in the nba_teams table by wins and retrieves their respective team_name and coach_name.</s>"}
{"text": "<s>[INST] \nIdentify the top three farms with the highest average soil moisture for the past year.\nCREATE TABLE farm_soil_moisture (farm_id INT, timestamp TIMESTAMP, soil_moisture INT); \n[/INST]\nSELECT farm_id, AVG(soil_moisture) AS avg_moisture FROM farm_soil_moisture WHERE timestamp >= NOW() - INTERVAL '1 year' GROUP BY farm_id ORDER BY avg_moisture DESC LIMIT 3;\nUsing the farm_soil_moisture table, find the top three farms with the highest average soil moisture for the past year. The query filters the data to include only records from the past year, calculates the average soil moisture for each farm, and orders the results in descending order. The LIMIT clause is used to return only the top three farms.</s>"}
{"text": "<s>[INST] \nFind the maximum and minimum population counts of marine life species in each region.\nCREATE SCHEMA MarineLife; CREATE TABLE Species (id INT, name TEXT, population INT); CREATE SCHEMA Geography; CREATE TABLE Regions (id INT, name TEXT); \n[/INST]\nSELECT r.name, MIN(s.population) AS min_population, MAX(s.population) AS max_population FROM MarineLife.Species s JOIN Geography.Regions r ON s.id = r.id GROUP BY r.name;\nThe SQL query joins the 'Species' table in the 'MarineLife' schema with the 'Regions' table in the 'Geography' schema based on the species id. It then calculates the minimum and maximum population counts for each region using the GROUP BY clause.</s>"}
{"text": "<s>[INST] \nWhat is the percentage of companies founded by immigrants in the biotechnology sector?\nCREATE TABLE company (id INT, name TEXT, industry TEXT, founder_immigrant BOOLEAN, founding_date DATE); INSERT INTO company (id, name, industry, founder_immigrant, founding_date) VALUES (1, 'BioTechPlus', 'Biotechnology', true, '2020-08-15'); \n[/INST]\nSELECT (COUNT(*) FILTER (WHERE founder_immigrant = true)) * 100.0 / COUNT(*) FROM company WHERE industry = 'Biotechnology';\nThis query calculates the percentage of companies founded by immigrants in the biotechnology sector. It first filters the results to only include records where the industry is 'Biotechnology'. Then, it uses a conditional expression (FILTER) to count the number of records where the founder_immigrant field is true. Finally, it calculates the percentage by dividing this count by the total number of records in the filtered set.</s>"}
{"text": "<s>[INST] \nWhat is the number of patients with depression, anxiety, or PTSD who were prescribed medication, and what is the most common medication prescribed for each condition?\nCREATE TABLE patients (patient_id INT, age INT, gender TEXT, state TEXT, condition TEXT); INSERT INTO patients (patient_id, age, gender, state, condition) VALUES (1, 35, 'Female', 'California', 'Depression'); INSERT INTO patients (patient_id, age, gender, state, condition) VALUES (2, 45, 'Male', 'Texas', 'Anxiety'); CREATE TABLE prescriptions (prescription_id INT, patient_id INT, medication TEXT, date DATE); INSERT INTO prescriptions (prescription_id, patient_id, medication, date) VALUES (1, 1, 'Prozac', '2021-01-01'); INSERT INTO prescriptions (prescription_id, patient_id, medication, date) VALUES (2, 2, 'Xanax', '2021-01-02'); \n[/INST]\nSELECT condition, medication, COUNT(patient_id) as count FROM patients INNER JOIN prescriptions ON patients.patient_id = prescriptions.patient_id WHERE condition IN ('Depression', 'Anxiety', 'PTSD') GROUP BY condition, medication HAVING count > 1 ORDER BY count DESC;\nThe SQL query calculates the number of patients with depression, anxiety, or PTSD who were prescribed medication, and what is the most common medication prescribed for each condition, by joining the patients and prescriptions tables on the patient_id field, filtering for patients with depression, anxiety, or PTSD, and grouping by condition and medication with a count greater than 1. The results are ordered by count in descending order.</s>"}
{"text": "<s>[INST] \nWhat is the minimum donation amount in the 'Donations' table for each quarter in 2021?\nCREATE TABLE Donations (DonationID INT, DonorID INT, DonationAmount DECIMAL(10,2), DonationDate DATE); \n[/INST]\nSELECT DATE_FORMAT(DonationDate, '%Y-%m') AS Month, MIN(DonationAmount) FROM Donations WHERE YEAR(DonationDate) = 2021 GROUP BY YEAR(DonationDate), QUARTER(DonationDate);\nThe SQL query groups donations by quarter in the year 2021 using the GROUP BY clause on the Year and Quarter of the DonationDate column, and calculates the minimum donation amount for each quarter using the MIN function.</s>"}
{"text": "<s>[INST] \nWhat is the average number of refugees helped per day by aid_organization 2 in the refugee_support table?\nCREATE TABLE refugee_support (id INT PRIMARY KEY, aid_organization INT, refugees_helped INT, date DATE); INSERT INTO refugee_support (id, aid_organization, refugees_helped, date) VALUES (1, 1, 100, '2022-01-01'); INSERT INTO refugee_support (id, aid_organization, refugees_helped, date) VALUES (2, 2, 200, '2022-01-02'); INSERT INTO refugee_support (id, aid_organization, refugees_helped, date) VALUES (3, 2, 300, '2022-01-03'); \n[/INST]\nSELECT AVG(refugees_helped) FROM refugee_support WHERE aid_organization = 2;\nThis query calculates the average number of refugees helped per day by aid_organization 2 by averaging the refugees_helped column where the aid_organization is equal to 2. It does not include the date column in the query.</s>"}
{"text": "<s>[INST] \nWhat is the percentage of students passing the exam in each subject?\nCREATE TABLE exam_results (student_id INT, subject VARCHAR(10), passed BOOLEAN); INSERT INTO exam_results (student_id, subject, passed) VALUES (1, 'Math', TRUE), (1, 'English', FALSE), (2, 'Math', TRUE), (2, 'English', TRUE), (3, 'Math', FALSE), (3, 'English', TRUE); \n[/INST]\nSELECT subject, COUNT(*) * 100.0 / (SELECT COUNT(*) FROM exam_results) as pass_percentage FROM exam_results WHERE passed = TRUE GROUP BY subject;\nCalculate the percentage of students passing the exam in each subject by dividing the count of passed exams in each subject by the total number of exams, then multiplying by 100. Group by subject column.</s>"}
{"text": "<s>[INST] \nWhich locations have had the most safety inspections in the past 2 years?\nCREATE TABLE safety_inspections (id INT PRIMARY KEY, location VARCHAR(255), inspection_date DATE); INSERT INTO safety_inspections (id, location, inspection_date) VALUES ('Lab A', '2022-01-01'); INSERT INTO safety_inspections (id, location, inspection_date) VALUES ('Lab B', '2022-02-01'); \n[/INST]\nSELECT location, COUNT(*) as num_inspections, RANK() OVER(ORDER BY COUNT(*) DESC) as inspection_rank FROM safety_inspections WHERE inspection_date >= DATEADD(year, -2, GETDATE()) GROUP BY location;\nThis query ranks the locations based on the number of safety inspections in the past 2 years using the RANK() function, ordering the data in descending order of the count of inspections.</s>"}
{"text": "<s>[INST] \nWhat is the number of safety incidents for vessel 'Caledonia'?\nCREATE TABLE vessels (id INT, name VARCHAR(20)); INSERT INTO vessels (id, name) VALUES (1, 'Aurelia'), (2, 'Belfast'), (3, 'Caledonia'); CREATE TABLE safety_incidents (vessel_id INT, incident_type VARCHAR(20)); INSERT INTO safety_incidents (vessel_id, incident_type) VALUES (1, 'Collision'), (1, 'Grounding'), (2, 'Fire'), (2, 'Mechanical failure'), (3, 'Collision'), (3, 'Collision'); \n[/INST]\nSELECT COUNT(*) FROM safety_incidents WHERE vessel_id = (SELECT id FROM vessels WHERE name = 'Caledonia');\nThis SQL query calculates the number of safety incidents for vessel 'Caledonia'. It does this by selecting the count of records from the safety_incidents table where the vessel_id is equal to the id of the vessel 'Caledonia' in the vessels table.</s>"}
{"text": "<s>[INST] \nDelete all records from the 'vendor_data' table where 'vendor_location' is 'USA'\nCREATE TABLE vendor_data (vendor_id INT, vendor_location VARCHAR(20)); \n[/INST]\nDELETE FROM vendor_data WHERE vendor_location = 'USA';\nThis SQL query deletes all records from the 'vendor_data' table where the 'vendor_location' is 'USA'. It uses the DELETE statement, specifying the vendor_data table and a condition in the WHERE clause that filters for vendor_location 'USA'.</s>"}
{"text": "<s>[INST] \nWhat is the total budget of ethical AI and accessibility tech projects?\nCREATE TABLE grants (grant_id INT, name VARCHAR(50), budget DECIMAL(10,2), project_type VARCHAR(50)); INSERT INTO grants (grant_id, name, budget, project_type) VALUES (1, 'Ethical AI Research', 400000, 'ethical AI'); INSERT INTO grants (grant_id, name, budget, project_type) VALUES (2, 'Accessibility Tech Development', 600000, 'accessibility tech'); INSERT INTO grants (grant_id, name, budget, project_type) VALUES (3, 'Digital Divide Education', 500000, 'digital divide'); \n[/INST]\nSELECT SUM(budget) FROM grants WHERE project_type IN ('ethical AI', 'accessibility tech');\nThis query calculates the total budget of ethical AI and accessibility tech projects by filtering the grants table for rows with a project_type of 'ethical AI' or 'accessibility tech' and then calculating the sum of the budget column.</s>"}
{"text": "<s>[INST] \nWhich cybersecurity strategies were implemented by the European Union in the last 5 years?\nCREATE TABLE CybersecurityStrategies (id INT, country VARCHAR(255), strategy VARCHAR(255), implementation_date DATE); INSERT INTO CybersecurityStrategies (id, country, strategy, implementation_date) VALUES (1, 'European Union', 'European Cybersecurity Act', '2016-06-08'); INSERT INTO CybersecurityStrategies (id, country, strategy, implementation_date) VALUES (2, 'European Union', 'Network and Information Systems Directive', '2016-08-05'); \n[/INST]\nSELECT strategy, implementation_date FROM CybersecurityStrategies WHERE country = 'European Union' AND implementation_date >= DATE_SUB(CURDATE(), INTERVAL 5 YEAR);\nThis SQL query retrieves all cybersecurity strategies implemented by the European Union in the last 5 years. It does this by selecting the 'strategy' and 'implementation_date' columns from the 'CybersecurityStrategies' table and filtering the results based on the 'country' and 'implementation_date' columns.</s>"}
{"text": "<s>[INST] \nWhat is the production volume of wells drilled in the North Sea, grouped by production type?\nCREATE TABLE wells (id INT, driller VARCHAR(255), well VARCHAR(255), production_type VARCHAR(255), production_volume INT); INSERT INTO wells (id, driller, well, production_type, production_volume) VALUES (1, 'DrillerA', 'WellA', 'Oil', 1000), (2, 'DrillerB', 'WellB', 'Gas', 2000), (3, 'DrillerA', 'WellC', 'Oil', 1200), (4, 'DrillerC', 'WellD', 'Oil', 1500), (5, 'DrillerB', 'WellE', 'Gas', 2500), (6, 'DrillerE', 'WellF', 'Oil', 1800), (7, 'DrillerF', 'WellG', 'Gas', 2200), (8, 'DrillerE', 'WellH', 'Oil', 1100), (9, 'DrillerF', 'WellI', 'Gas', 2700), (10, 'DrillerA', 'WellJ', 'Oil', 1600); \n[/INST]\nSELECT production_type, SUM(production_volume) FROM wells WHERE location = 'North Sea' GROUP BY production_type;\nCalculate the production volume of wells drilled in the North Sea, grouped by production type by selecting the production_type and summing the production_volume for wells in the North Sea, then grouping the result by production_type.</s>"}
{"text": "<s>[INST] \nWhat is the average depth of the ocean by longitude range?\nCREATE TABLE ocean_depths (location VARCHAR(255), longitude FLOAT, depth FLOAT); \n[/INST]\nSELECT AVG(depth) FROM ocean_depths WHERE longitude BETWEEN -180 AND -90 OR longitude BETWEEN 90 AND 180;\nThis query calculates the average depth of the ocean by longitude range by filtering for rows where the longitude is between -180 and -90 or between 90 and 180, and returning the average depth.</s>"}
{"text": "<s>[INST] \nList the programs that have received donations in the last 3 months but have not yet reached their budgeted amount, and their respective budgets and total donations received.\nCREATE TABLE programs(id INT, name TEXT, budget FLOAT);CREATE TABLE donations(id INT, program_id INT, amount FLOAT, donation_date DATE); \n[/INST]\nSELECT programs.name, programs.budget, SUM(donations.amount) as total_donations FROM programs JOIN donations ON programs.id = donations.program_id WHERE donations.donation_date BETWEEN DATE_SUB(CURDATE(), INTERVAL 3 MONTH) AND CURDATE() AND programs.budget > (SELECT SUM(donations.amount) FROM donations WHERE donations.program_id = programs.id) GROUP BY programs.id;\nThe SQL query first joins the programs table with the donations table on the program_id and id columns respectively. Then, it filters the records where the donation_date is within the last 3 months and the budget is greater than the total donations received for each program. Next, it calculates the total donation for each of the remaining programs by applying the SUM function on the amount column of the donations table. The query then returns the program name, budget, and total donations.</s>"}
{"text": "<s>[INST] \nWhat is the average investment amount in renewable energy projects for each country?\nCREATE TABLE projects (id INT, name VARCHAR(255), investment_amount DECIMAL(10,2), sector VARCHAR(255), country VARCHAR(255), project_start_date DATE); \n[/INST]\nSELECT country, AVG(investment_amount) FROM projects WHERE sector = 'Renewable Energy' GROUP BY country;\nThis query calculates the average investment amount for renewable energy projects for each country by grouping projects by the country column and averaging the investment_amount where sector is 'Renewable Energy'.</s>"}
{"text": "<s>[INST] \nList the number of athletes enrolled in each program and the average age of athletes in the 'wellbeing' program, grouped by gender.\nCREATE TABLE athletes (athlete_id INT, name VARCHAR(255), age INT, program VARCHAR(255), gender VARCHAR(255)); INSERT INTO athletes (athlete_id, name, age, program, gender) VALUES (1, 'John Doe', 25, 'Wellbeing', 'Male'), (2, 'Jane Smith', 30, 'Fitness', 'Female'), (3, 'Alice Johnson', 35, 'Wellbeing', 'Female'), (4, 'Bob Brown', 40, 'Fitness', 'Male'), (5, 'Charlie Davis', 45, 'Fitness', 'Male'), (6, 'Diana White', 50, 'Fitness', 'Female'), (7, 'Eva Green', 55, 'Wellbeing', 'Female'); \n[/INST]\nSELECT program, gender, COUNT(*), AVG(age) FROM athletes WHERE program = 'Wellbeing' GROUP BY program, gender;\nList the number of athletes enrolled in each program and the average age of athletes in the 'wellbeing' program, grouped by gender by grouping by the 'program' and 'gender' columns and using 'COUNT' and 'AVG' aggregation functions on the 'athletes' table where 'program' is 'Wellbeing'.</s>"}
{"text": "<s>[INST] \nDisplay the total number of employees for each company\nCREATE TABLE company_employees (id INT, company VARCHAR(255), num_employees INT); INSERT INTO company_employees (id, company, num_employees) VALUES (1, 'Acme Inc', 500), (2, 'Beta Corp', 800), (3, 'Gamma Inc', 300), (4, 'Delta Ltd', 700); \n[/INST]\nSELECT company, num_employees FROM company_employees;\nThe query retrieves the company and num_employees columns from the company_employees table, listing each company and its total number of employees.</s>"}
{"text": "<s>[INST] \nWhat is the total donation amount by each cause?\nCREATE TABLE causes (cause_id INT, cause_name VARCHAR(50)); INSERT INTO causes (cause_id, cause_name) VALUES (1, 'Education'), (2, 'Health'), (3, 'Environment'); CREATE TABLE donations (donation_id INT, cause_id INT, donation_amount DECIMAL(10,2)); INSERT INTO donations (donation_id, cause_id, donation_amount) VALUES (1, 1, 500), (2, 2, 750), (3, 1, 300), (4, 3, 400); \n[/INST]\nSELECT cause_name, SUM(donation_amount) as total_donation_amount FROM donations JOIN causes ON donations.cause_id = causes.cause_id GROUP BY cause_name;\nThis query joins the 'donations' table with the 'causes' table to combine the donation data with the corresponding cause names. Then, it groups the data by the 'cause_name' and calculates the sum of 'donation_amount' for each group, returning the total donation amount for each cause.</s>"}
{"text": "<s>[INST] \nWhat is the average CO2 emission of green buildings constructed between 2015-2020?\nCREATE TABLE green_buildings (id INT, name TEXT, year INT, co2_emission FLOAT); \n[/INST]\nSELECT AVG(co2_emission) FROM green_buildings WHERE year BETWEEN 2015 AND 2020;\nThe query calculates the average CO2 emission of green buildings constructed during the specified years (2015-2020) by using the AVG function.</s>"}
{"text": "<s>[INST] \nCalculate the percentage of total funding received by each program type in the past year\nCREATE TABLE art_programs (id INT, program_type VARCHAR(20), start_date DATE, end_date DATE); CREATE TABLE funding_received (id INT, program_id INT, amount INT); \n[/INST]\nSELECT p.program_type, 100.0 * SUM(r.amount) / (SELECT SUM(amount) FROM funding_received) AS percentage FROM art_programs p INNER JOIN funding_received r ON p.id = r.program_id WHERE p.start_date <= '2022-12-31' AND p.end_date >= '2022-01-01' GROUP BY p.program_type;\nThis query calculates the percentage of total funding received by each program type in the past year. It uses the program_type, start_date, and end_date columns from the art_programs table, and the amount column from the funding_received table. The query filters for records where the start_date is within the past year and the end_date is within the past year. The query then groups the results by program_type and calculates the percentage of the total funding received for each group.</s>"}
{"text": "<s>[INST] \nWhat is the total number of transactions in the Southwest region with a value greater than $100?\nCREATE TABLE transactions (id INT, region VARCHAR(20), transaction_amount DECIMAL(10, 2)); INSERT INTO transactions (id, region, transaction_amount) VALUES (1, 'Southwest', 120.00), (2, 'Northeast', 75.00), (3, 'Southwest', 150.00); \n[/INST]\nSELECT COUNT(*) FROM transactions WHERE region = 'Southwest' AND transaction_amount > 100;\nThe SQL query counts the number of transactions in the Southwest region with a value greater than $100 by using the COUNT function on all rows (*) and filtering by the region Southwest and transaction amount greater than 100.</s>"}
{"text": "<s>[INST] \nWhat is the total cargo weight for vessels in the 'Fishing Vessel' category?\nCREATE TABLE Vessels (ID INT PRIMARY KEY, Name TEXT, Category TEXT, CargoWeight FLOAT); INSERT INTO Vessels (ID, Name, Category, CargoWeight) VALUES (1, 'Cargo Ship 1', 'Cargo Ship', 5500), (2, 'Fishing Vessel 1', 'Fishing Vessel', 300), (3, 'Cargo Ship 2', 'Cargo Ship', 7000); \n[/INST]\nSELECT SUM(CargoWeight) FROM Vessels WHERE Category = 'Fishing Vessel';\nSum all records in the CargoWeight column for records where Category is 'Fishing Vessel'.</s>"}
{"text": "<s>[INST] \nWhich mental health parity laws were enacted in California?\nCREATE TABLE if not exists mental_health_parity_laws (law_id INT, state VARCHAR(255), enactment_date DATE); INSERT INTO mental_health_parity_laws (law_id, state, enactment_date) VALUES (1, 'California', '2010-09-30'), (2, 'New York', '2016-04-01'), (3, 'Texas', '2017-06-01'); \n[/INST]\nSELECT state, enactment_date FROM mental_health_parity_laws WHERE state = 'California';\nThis SQL query retrieves the mental health parity laws enacted in California by filtering the data based on the state column.</s>"}
{"text": "<s>[INST] \nHow many customers have a subscription that includes both mobile and broadband services?\nCREATE TABLE subscriptions (id INT, customer_id INT, mobile_service BOOLEAN, broadband_service BOOLEAN); INSERT INTO subscriptions (id, customer_id, mobile_service, broadband_service) VALUES (1, 1, true, true), (2, 2, false, true), (3, 3, true, false); \n[/INST]\nSELECT COUNT(*) FROM subscriptions WHERE mobile_service = true AND broadband_service = true;\nThe SQL query counts the number of customers who have a subscription that includes both mobile and broadband services by using the COUNT function on the '*' wildcard, filtering the data for customers who have both 'mobile_service' and 'broadband_service' set to true.</s>"}
{"text": "<s>[INST] \nWhat is the total number of flu vaccinations administered in the US, grouped by state and month, in 2020?\nCREATE TABLE us_flu_vaccinations (id INT, patient_name VARCHAR(50), healthcare_provider VARCHAR(50), state VARCHAR(20), vaccine_type VARCHAR(50), date DATE); INSERT INTO us_flu_vaccinations (id, patient_name, healthcare_provider, state, vaccine_type, date) VALUES (1, 'Emma', 'New York Hospital', 'New York', 'Flu', '2020-02-01'); INSERT INTO us_flu_vaccinations (id, patient_name, healthcare_provider, state, vaccine_type, date) VALUES (2, 'Frank', 'Boston Medical Center', 'Massachusetts', 'Flu', '2020-03-15'); INSERT INTO us_flu_vaccinations (id, patient_name, healthcare_provider, state, vaccine_type, date) VALUES (3, 'Grace', 'Los Angeles Clinic', 'California', 'Flu', '2020-11-05'); \n[/INST]\nSELECT state, MONTH(date) as month, COUNT(*) as num_vaccinations FROM us_flu_vaccinations WHERE vaccine_type = 'Flu' AND YEAR(date) = 2020 GROUP BY state, month;\nThis query counts the number of flu vaccinations administered in the US, grouped by state and month, in 2020. It filters the us_flu_vaccinations table by vaccine_type and year, and then groups the results by state and month using the GROUP BY clause. The COUNT function is used to count the number of records per group.</s>"}
{"text": "<s>[INST] \nWhich suppliers provide raw materials to factories in the electronics industry?\nCREATE TABLE suppliers (id INT, supplier_name VARCHAR(100), industry VARCHAR(50), contact VARCHAR(50)); CREATE TABLE electronics_factories (id INT, factory_name VARCHAR(100), location VARCHAR(50), supplier_id INT); INSERT INTO suppliers (id, supplier_name, industry, contact) VALUES (1, 'Global Resources', 'Electronics', 'contact1@globalresources.com'); INSERT INTO electronics_factories (id, factory_name, location, supplier_id) VALUES (1, 'ElectroTech', 'USA', 1); \n[/INST]\nSELECT s.supplier_name FROM suppliers s INNER JOIN electronics_factories ef ON s.id = ef.supplier_id WHERE s.industry = 'Electronics';\nThis query finds the suppliers that provide raw materials to factories in the electronics industry. It performs an inner join between the suppliers table and the electronics_factories table using the supplier_id, and filters the results to only include suppliers in the electronics industry.</s>"}
{"text": "<s>[INST] \nWhat is the percentage of patients who improved after therapy sessions in Nigeria?\nCREATE TABLE patients (patient_id INT, country VARCHAR(50)); INSERT INTO patients (patient_id, country) VALUES (1, 'Nigeria'), (2, 'Nigeria'), (3, 'USA'), (4, 'Nigeria'); CREATE TABLE therapy_sessions (patient_id INT, session_count INT, improvement BOOLEAN); INSERT INTO therapy_sessions (patient_id, session_count, improvement) VALUES (1, 5, TRUE), (2, 3, TRUE), (3, 4, FALSE), (4, 6, TRUE); \n[/INST]\nSELECT AVG(CASE WHEN therapy_sessions.improvement = TRUE THEN 1.0 ELSE 0.0 END) * 100.0 / COUNT(DISTINCT patients.patient_id) AS percentage FROM patients INNER JOIN therapy_sessions ON patients.patient_id = therapy_sessions.patient_id WHERE patients.country = 'Nigeria';\nThe SQL query calculates the percentage of patients who improved after therapy sessions in Nigeria by joining the patients and therapy_sessions table, filtering based on the condition that the country is Nigeria, and then calculating the percentage of patients who improved after therapy sessions.</s>"}
{"text": "<s>[INST] \nWhat is the average adherence rate for drugs in the Southeast region, excluding those with adherence rates below 50%?\nCREATE TABLE adherence (id INT PRIMARY KEY, patient_id INT, drug_id INT, region VARCHAR(255), adherence DECIMAL(4,2), adherence_date DATE); \n[/INST]\nSELECT AVG(a.adherence) as average_adherence FROM adherence a WHERE a.region = 'Southeast' AND a.adherence >= 0.5;\nThis query calculates the average adherence rate for drugs in the Southeast region, excluding those with adherence rates below 50%. It filters the results to only include rows with a region of 'Southeast' and an adherence rate of 0.5 or greater. It then calculates the average adherence rate for the filtered results.</s>"}
{"text": "<s>[INST] \nWhat is the distribution of policy types by region?\nCREATE TABLE Policy (PolicyID INT, PolicyType VARCHAR(20), Region VARCHAR(20)); INSERT INTO Policy (PolicyID, PolicyType, Region) VALUES (1, 'Auto', 'Northeast'), (2, 'Home', 'Northeast'), (3, 'Life', 'Midwest'); \n[/INST]\nSELECT PolicyType, Region, COUNT(*) OVER (PARTITION BY PolicyType, Region) AS CountByTypeRegion, ROW_NUMBER() OVER (PARTITION BY PolicyType ORDER BY Region) AS RankByPolicyType FROM Policy;\nThis query calculates the distribution of policy types by region by counting the number of policies for each policy type in each region and assigning a row number based on the policy type within each region.</s>"}
{"text": "<s>[INST] \nWhat is the average number of posts per user in the social_media schema?\nCREATE TABLE users (id INT, name VARCHAR(50), age INT, gender VARCHAR(10)); CREATE TABLE posts (id INT, user_id INT, content TEXT, timestamp TIMESTAMP); INSERT INTO users (id, name, age, gender) VALUES (1, 'Alice', 25, 'Female'); INSERT INTO posts (id, user_id, content, timestamp) VALUES (1, 1, 'Hello World!', '2022-01-01 10:00:00'); \n[/INST]\nSELECT AVG(post_count) as avg_posts_per_user FROM (SELECT COUNT(p.id) as post_count, u.id as user_id FROM posts p JOIN users u ON p.user_id = u.id GROUP BY u.id) t;\nFirst, we count the number of posts for each user and then calculate the average number of posts per user.</s>"}
{"text": "<s>[INST] \nWhat is the minimum food safety score for restaurants in San Francisco?\nCREATE TABLE food_safety_inspections(restaurant VARCHAR(255), score INT, city VARCHAR(255)); INSERT INTO food_safety_inspections(restaurant, score, city) VALUES ('Restaurant1', 95, 'New York'), ('Restaurant2', 85, 'Los Angeles'), ('Restaurant3', 90, 'New York'), ('Restaurant4', 92, 'San Francisco'), ('Restaurant5', 88, 'San Francisco'); \n[/INST]\nSELECT MIN(score) FROM food_safety_inspections WHERE city = 'San Francisco';\nThe SQL query uses the MIN() function to find the minimum food safety score for restaurants in San Francisco.</s>"}
{"text": "<s>[INST] \nWhat is the total sales figure for drugs that were approved by the FDA and contain the word 'Plus' in their name?\nCREATE TABLE drug (id INT, name TEXT, approval_authority TEXT, sales FLOAT); INSERT INTO drug (id, name, approval_authority, sales) VALUES (1, 'DrugA Plus', 'FDA', 30000000); INSERT INTO drug (id, name, approval_authority, sales) VALUES (2, 'DrugB', 'FDA', 40000000); INSERT INTO drug (id, name, approval_authority, sales) VALUES (3, 'PlusDrug', 'FDA', 50000000); \n[/INST]\nSELECT SUM(sales) FROM drug WHERE approval_authority = 'FDA' AND name LIKE '%Plus%';\nThis SQL query calculates the total sales figure for drugs that were approved by the FDA and contain the word 'Plus' in their name. It does this by using the SUM() aggregation function on the sales column and filtering the table for rows where the approval_authority is 'FDA' and the name contains 'Plus'.</s>"}
{"text": "<s>[INST] \nWhat is the maximum budget allocated for accessible technology initiatives by non-profit organizations?\nCREATE TABLE npo (npo_id INT, npo_name VARCHAR(100), sector VARCHAR(50)); INSERT INTO npo VALUES (1, 'Tech for All', 'non-profit'), (2, 'AI Empowerment', 'non-profit'); CREATE TABLE initiatives (initiative_id INT, npo_id INT, budget DECIMAL(10,2)); INSERT INTO initiatives VALUES (1, 1, 50000.00), (2, 1, 75000.00), (3, 2, 60000.00); CREATE TABLE accessibility (accessibility_id INT, initiative_id INT, accessibility_level VARCHAR(20)); INSERT INTO accessibility VALUES (1, 1, 'accessible'), (2, 2, 'accessible'), (3, 3, 'accessible'); \n[/INST]\nSELECT MAX(budget) FROM initiatives INNER JOIN npo ON initiatives.npo_id = npo.npo_id INNER JOIN accessibility ON initiatives.initiative_id = accessibility.initiative_id WHERE npo.sector = 'non-profit' AND accessibility.accessibility_level = 'accessible';\nJoin the npo, initiatives, and accessibility tables, filter for non-profit organizations and accessible initiatives, and calculate the maximum budget.</s>"}
{"text": "<s>[INST] \nList the average labor cost for sustainable building projects in 2021 and 2022.\nCREATE TABLE labor_costs (project_id INT, sector VARCHAR(50), labor_cost FLOAT, year INT); INSERT INTO labor_costs (project_id, sector, labor_cost, year) VALUES (1, 'Sustainable', 30000, 2021), (2, 'Sustainable', 25000, 2022), (3, 'Sustainable', 35000, 2021); \n[/INST]\nSELECT year, AVG(labor_cost) FROM labor_costs WHERE sector = 'Sustainable' GROUP BY year;\nThis SQL query lists the average labor cost for sustainable building projects in 2021 and 2022 by grouping the rows by the year column and averaging the labor_cost column for each group.</s>"}
{"text": "<s>[INST] \nWhat is the maximum time taken to resolve a security incident in the 'Privilege Escalation' category in the last quarter?\nCREATE TABLE incident_resolution_times (id INT, category VARCHAR(255), resolution_time INT, resolution_date DATE); \n[/INST]\nSELECT MAX(resolution_time) FROM incident_resolution_times WHERE category = 'Privilege Escalation' AND resolution_date >= DATEADD(quarter, -1, GETDATE());\nThis query calculates the maximum time taken to resolve a security incident in the 'Privilege Escalation' category in the last quarter by selecting the maximum resolution_time field value for all rows that meet the specified conditions.</s>"}
{"text": "<s>[INST] \nWhat is the average production cost of all items produced in 2021?\nCREATE TABLE production_costs (item_type VARCHAR(20), year INT, cost NUMERIC(10,2), quantity INT); INSERT INTO production_costs (item_type, year, cost, quantity) VALUES ('linen blouse', 2021, 14.99, 200), ('linen pants', 2021, 16.99, 150), ('linen shorts', 2021, 13.99, 100), ('linen skirt', 2021, 15.99, 125), ('cotton t-shirt', 2022, 11.99, 250), ('cotton hoodie', 2022, 21.99, 150); \n[/INST]\nSELECT AVG(cost) FROM production_costs WHERE year = 2021;\nThe SQL query calculates the average production cost for all items produced in 2021.</s>"}
{"text": "<s>[INST] \nWhat is the maximum water usage by any user in the state of Florida?\nCREATE TABLE all_users (id INT, state VARCHAR(20), water_usage FLOAT); INSERT INTO all_users (id, state, water_usage) VALUES (1, 'Florida', 20.5), (2, 'Florida', 25.6), (3, 'California', 30.2); \n[/INST]\nSELECT MAX(water_usage) FROM all_users WHERE state = 'Florida';\nThis query calculates the maximum water usage by any user in the state of Florida by selecting the maximum value of the water_usage column for all rows where the state is 'Florida'.</s>"}
{"text": "<s>[INST] \nGet the total energy storage capacity (MWh) in the United Kingdom\nCREATE TABLE energy_storage (id INT, country VARCHAR(50), capacity FLOAT); INSERT INTO energy_storage (id, country, capacity) VALUES (1, 'United Kingdom', 3000), (2, 'Germany', 4000), (3, 'France', 2500); \n[/INST]\nSELECT SUM(capacity) FROM energy_storage WHERE country = 'United Kingdom';\nThis query calculates the total energy storage capacity in the United Kingdom by summing up the capacity values in the energy_storage table where the country is the United Kingdom.</s>"}
{"text": "<s>[INST] \nWhat is the maximum number of incidents per product in a single day?\nCREATE TABLE product_daily_incidents (product_id INT, incident_date DATE, num_incidents INT); INSERT INTO product_daily_incidents (product_id, incident_date, num_incidents) VALUES (1, '2022-01-05', 3); INSERT INTO product_daily_incidents (product_id, incident_date, num_incidents) VALUES (1, '2022-01-10', 1); INSERT INTO product_daily_incidents (product_id, incident_date, num_incidents) VALUES (2, '2022-01-15', 2); INSERT INTO product_daily_incidents (product_id, incident_date, num_incidents) VALUES (2, '2022-01-16', 1); \n[/INST]\nSELECT product_id, MAX(num_incidents) as max_incidents_per_day FROM product_daily_incidents GROUP BY product_id;\nThis query calculates the maximum number of incidents per product in a single day. It does this by grouping the data by product_id and calculating the max value for num_incidents.</s>"}
{"text": "<s>[INST] \nHow many vegetarian options are there on the menu for Restaurant J?\nCREATE TABLE menu (restaurant_id INT, item_name TEXT, item_type TEXT, diet TEXT); INSERT INTO menu (restaurant_id, item_name, item_type, diet) VALUES (1, 'Spaghetti', 'Entree', 'Vegetarian'), (1, 'Quinoa Salad', 'Entree', 'Vegan'), (1, 'Garden Burger', 'Entree', 'Vegan'), (2, 'Tofu Stir Fry', 'Entree', 'Vegan'), (2, 'Vegetable Curry', 'Entree', 'Vegetarian'), (3, 'Eggplant Parmesan', 'Entree', 'Vegetarian'), (3, 'Vegetable Lasagna', 'Entree', 'Vegetarian'), (3, 'Lentil Soup', 'Entree', 'Vegan'), (4, 'Chickpea Salad', 'Entree', 'Vegan'), (4, 'Mushroom Risotto', 'Entree', 'Vegetarian'), (4, 'Spinach Stuffed Shells', 'Entree', 'Vegetarian'), (5, 'Beef Stew', 'Entree', 'Carnivore'), (5, 'Chicken Parmesan', 'Entree', 'Carnivore'), (5, 'Fish Tacos', 'Entree', 'Seafood'), (6, 'Veggie Burger', 'Entree', 'Vegetarian'), (6, 'Cheese Pizza', 'Entree', 'Vegetarian'), (6, 'Garden Salad', 'Entree', 'Vegetarian'); \n[/INST]\nSELECT COUNT(*) as num_vegetarian_options FROM menu m WHERE m.restaurant_id = 8 AND m.diet = 'Vegetarian';\nThis query calculates the number of vegetarian options on the menu for Restaurant J. It filters the menu table by restaurant_id and diet and then counts the number of rows for those items.</s>"}
{"text": "<s>[INST] \nInsert new company with id 4, sector 'renewable_energy', ESG 85.\nCREATE TABLE companies (id INT, sector TEXT, ESG_rating FLOAT); \n[/INST]\nINSERT INTO companies (id, sector, ESG_rating) VALUES (4, 'renewable_energy', 85);\nThis query inserts a new record into the companies table with an id of 4, sector of 'renewable_energy', and ESG_rating of 85 using the INSERT INTO statement, specifying the columns and values for the new record.</s>"}
{"text": "<s>[INST] \nWhat is the average age of artists in the 'artists' table?\nCREATE TABLE artists (artist_id INT, name VARCHAR(50), age INT, country VARCHAR(50)); INSERT INTO artists (artist_id, name, age, country) VALUES (1, 'Pablo Picasso', 91, 'Spain'); INSERT INTO artists (artist_id, name, age, country) VALUES (2, 'Francis Bacon', 82, 'Ireland'); \n[/INST]\nSELECT AVG(age) FROM artists;\nThe SQL query calculates the average age of artists by using the AVG function on the 'age' column from the 'artists' table.</s>"}
{"text": "<s>[INST] \nWhich artist has the most works in the modern art category?\nCREATE TABLE artists (artist_id INT PRIMARY KEY, artist_name TEXT, style TEXT);CREATE TABLE works (work_id INT PRIMARY KEY, work_title TEXT, artist_id INT, category TEXT, FOREIGN KEY (artist_id) REFERENCES artists(artist_id));INSERT INTO artists (artist_id, artist_name, style) VALUES (1, 'Pablo Picasso', 'Cubism'); INSERT INTO works (work_id, work_title, artist_id, category) VALUES (1, 'Guernica', 1, 'Modern Art'); \n[/INST]\nSELECT a.artist_name FROM artists a JOIN works w ON a.artist_id = w.artist_id WHERE w.category = 'Modern Art' GROUP BY a.artist_name ORDER BY COUNT(w.work_id) DESC LIMIT 1;\nThe SQL query joins the artists and works tables on the artist_id foreign key. It then filters for modern art category works and groups the results by artist_name. Finally, it orders by the count of works in descending order and limits the result to the top 1 artist.</s>"}
{"text": "<s>[INST] \nWhat is the average quantity of sustainable fabric sourced (in metric tons) from African suppliers?\nCREATE TABLE AfricanSuppliers (Supplier VARCHAR(255), Quantity FLOAT); INSERT INTO AfricanSuppliers (Supplier, Quantity) VALUES ('SupplierX', 12.3), ('SupplierY', 15.7), ('SupplierZ', 10.6); \n[/INST]\nSELECT AVG(Quantity) FROM AfricanSuppliers;\nCalculate the average sustainable fabric quantity sourced from African suppliers by finding the mean Quantity in the AfricanSuppliers table.</s>"}
{"text": "<s>[INST] \nHow many farms in India use drip irrigation?\nCREATE TABLE farms (id INT PRIMARY KEY, name VARCHAR(255), country VARCHAR(255), drip_irrigation BOOLEAN);   INSERT INTO farms (id, name, country, drip_irrigation) VALUES (1, 'Farm 1', 'India', true), (2, 'Farm 2', 'India', false), (3, 'Farm 3', 'India', true); \n[/INST]\nSELECT COUNT(*) FROM farms WHERE country = 'India' AND drip_irrigation = true;\nThis query counts the number of farms in India that use drip irrigation by selecting all records where the 'country' is 'India' and 'drip_irrigation' is true, and then counting the number of rows.</s>"}
{"text": "<s>[INST] \nWhat was the average community development budget in India for the last 3 years?'\nCREATE TABLE community_development (id INT, country VARCHAR(255), year INT, budget FLOAT); INSERT INTO community_development (id, country, year, budget) VALUES (1, 'India', 2022, 700000.00), (2, 'India', 2021, 800000.00), (3, 'India', 2020, 900000.00); \n[/INST]\nSELECT AVG(budget) FROM community_development WHERE country = 'India' AND year BETWEEN 2020 AND 2022;\nThe SQL query calculates the average community development budget in India for the last 3 years by averaging the 'budget' column where 'country' is 'India' and 'year' is between 2020 and 2022.</s>"}
{"text": "<s>[INST] \nCount the number of hotels without a virtual tour in Australia\nCREATE TABLE hotels (id INT, name TEXT, country TEXT, virtual_tour BOOLEAN); INSERT INTO hotels (id, name, country, virtual_tour) VALUES (1, 'Hotel A', 'Australia', true), (2, 'Hotel B', 'Australia', false), (3, 'Hotel C', 'Australia', false); \n[/INST]\nSELECT COUNT(*) FROM hotels WHERE country = 'Australia' AND virtual_tour = false;\nThis query calculates the number of hotels in Australia that do not have a virtual tour. It only considers records where the country is 'Australia' and virtual_tour is false, then counts those records.</s>"}
{"text": "<s>[INST] \nWhich spacecraft has traveled the farthest from Earth?\nCREATE TABLE Spacecrafts (id INT PRIMARY KEY, name VARCHAR(255), launch_date DATE, max_distance FLOAT); \n[/INST]\nSELECT name, ROUND(max_distance, 1) as distance_from_earth FROM Spacecrafts ORDER BY distance_from_earth DESC LIMIT 1;\nThe SQL query orders the Spacecrafts table by the max_distance column in descending order and returns the top row. It also rounds the max_distance value to one decimal place.</s>"}
{"text": "<s>[INST] \nDelete records of languages with no speakers\nCREATE TABLE languages (id INT, language VARCHAR(50), region VARCHAR(50), num_speakers INT); INSERT INTO languages (id, language, region, num_speakers) VALUES (1, 'Livonian', 'Latvia', 0), (2, 'Ubykh', 'Turkey', 0), (3, 'Eyak', 'USA', 0) \n[/INST]\nDELETE FROM languages WHERE num_speakers = 0\nThe DELETE statement removes records of languages with no speakers. This is important to avoid confusion or misrepresentation of existing, spoken languages.</s>"}
{"text": "<s>[INST] \nWhat is the total revenue for each restaurant in the 'rural' region, grouped by restaurant category?\nCREATE TABLE restaurants (id INT, name TEXT, region TEXT, category TEXT); INSERT INTO restaurants (id, name, region, category) VALUES (1, 'Restaurant A', 'urban', 'fine_dining'), (2, 'Restaurant B', 'rural', 'casual_dining'), (3, 'Restaurant C', 'rural', 'fine_dining'); CREATE TABLE revenue (restaurant_id INT, revenue INT); INSERT INTO revenue (restaurant_id, revenue) VALUES (1, 5000), (1, 6000), (2, 3000), (3, 4000), (3, 5000); \n[/INST]\nSELECT r.category, SUM(re.revenue) as total_revenue FROM restaurants r JOIN revenue re ON r.id = re.restaurant_id WHERE r.region = 'rural' GROUP BY r.category;\nThe SQL query first joins the 'restaurants' table with the 'revenue' table on the 'restaurant_id' column. It then filters for rows where the 'region' column is equal to 'rural' and calculates the sum of the 'revenue' column for each restaurant category.</s>"}
{"text": "<s>[INST] \nlist all unique news topics, ordered by the number of articles published\nCREATE TABLE News (id INT, topic VARCHAR(50), article_count INT); INSERT INTO News (id, topic, article_count) VALUES (1, 'Politics', 2); INSERT INTO News (id, topic, article_count) VALUES (2, 'Sports', 3); INSERT INTO News (id, topic, article_count) VALUES (3, 'Entertainment', 1); \n[/INST]\nSELECT topic FROM News ORDER BY article_count DESC;\nThis query selects the topic column from the News table and orders the results by the article_count column in descending order.</s>"}
{"text": "<s>[INST] \nList all marine research facilities in the Southern Ocean.\nCREATE TABLE marine_research_facilities (id INT, name TEXT, location TEXT, ocean TEXT); INSERT INTO marine_research_facilities (id, name, location, ocean) VALUES (1, 'Palmer Station', 'Antarctica', 'Southern'), (2, 'McMurdo Station', 'Antarctica', 'Southern'); \n[/INST]\nSELECT * FROM marine_research_facilities WHERE ocean = 'Southern';\nThis query filters the marine_research_facilities table to only include rows where the ocean column is equal to 'Southern'.</s>"}
{"text": "<s>[INST] \nWhat is the name and total budget of the intelligence agency with the highest budget in the 'intelligence_budget' view?\nCREATE VIEW intelligence_budget AS SELECT agency_id, agency_name, budget FROM intelligence_agency_data WHERE category = 'budget'; CREATE TABLE intelligence_agency_data (agency_id INT PRIMARY KEY, agency_name VARCHAR(100), category VARCHAR(50), data_value FLOAT); INSERT INTO intelligence_agency_data (agency_id, agency_name, category, data_value) VALUES (1, 'CIA', 'budget', 15000000000), (2, 'NSA', 'budget', 12000000000); \n[/INST]\nSELECT agency_name, SUM(data_value) FROM intelligence_budget WHERE category = 'budget' GROUP BY agency_name ORDER BY SUM(data_value) DESC LIMIT 1;\nThis SQL query retrieves the name and total budget of the intelligence agency with the highest budget in the 'intelligence_budget' view by selecting the 'agency_name' and sum of the 'data_value' column where the 'category' is 'budget', grouped by 'agency_name' and ordered by the sum of 'data_value' in descending order, limited to the top 1 result.</s>"}
{"text": "<s>[INST] \nWhat is the average account balance for customers in the Private Banking division, excluding customers with account balances below $10,000?\nCREATE TABLE Private_Banking (customer_id INT, name VARCHAR(50), division VARCHAR(20), account_balance DECIMAL(10,2)); INSERT INTO Private_Banking (customer_id, name, division, account_balance) VALUES (11, 'Olivia White', 'Private Banking', 12000.00), (12, 'Sophia Black', 'Private Banking', 15000.00), (13, 'Isabella Gray', 'Private Banking', 7000.00); \n[/INST]\nSELECT AVG(account_balance) FROM Private_Banking WHERE account_balance >= 10000;\nCalculate the average account balance for customers in the Private Banking division with account balances of $10,000 or more.</s>"}
{"text": "<s>[INST] \nWhat is the total number of art pieces in 'New York' and 'Los Angeles'?\nCREATE TABLE museums (id INT, city VARCHAR(20), art_pieces INT); INSERT INTO museums (id, city, art_pieces) VALUES (1, 'New York', 5000), (2, 'Los Angeles', 7000), (3, 'Paris', 8000), (4, 'New York', 6000), (5, 'Los Angeles', 8000); \n[/INST]\nSELECT city, SUM(art_pieces) FROM museums GROUP BY city HAVING city IN ('New York', 'Los Angeles');\nThe SQL query calculates the total number of art pieces in 'New York' and 'Los Angeles' by using the SUM function on the 'art_pieces' column, and filtering the data by city using the HAVING clause.</s>"}
{"text": "<s>[INST] \nHow many sightings of marine mammals were recorded in the 'marine_life_sightings' table for each month?\nCREATE TABLE marine_life_sightings (sighting_id INTEGER, species TEXT, sighting_date DATE); INSERT INTO marine_life_sightings (sighting_id, species, sighting_date) VALUES (1, 'Blue Whale', '2022-01-01'), (2, 'Humpback Whale', '2022-01-02'), (3, 'Seal', '2022-02-03'); \n[/INST]\nSELECT EXTRACT(MONTH FROM sighting_date) AS month, COUNT(*) FROM marine_life_sightings GROUP BY month;\nThis query groups the records in the 'marine_life_sightings' table by the month of the sighting_date column and counts the number of records in each group by using the GROUP BY clause and the COUNT(*) function. The EXTRACT function is used to extract the month from the sighting_date column.</s>"}
{"text": "<s>[INST] \nHow many hotels are there in 'New York'?\nCREATE TABLE hotels (id INT, name TEXT, city TEXT); INSERT INTO hotels (id, name, city) VALUES (1, 'Hotel Plaza', 'New York'), (2, 'Hotel Wellington', 'New York'), (3, 'Hotel Giraffe', 'New York'); \n[/INST]\nSELECT COUNT(*) FROM hotels WHERE city = 'New York';\nThis SQL query counts the number of hotels in New York. It does this by using the COUNT() function, which returns the number of rows in a table that match a specified condition. In this case, the condition is that the city column must be equal to 'New York'.</s>"}
{"text": "<s>[INST] \nWhat is the total quantity of gold mined in the first quarter of 2021 from the 'GoldMine'?\nCREATE TABLE GoldMine (date DATE, quantity INT);INSERT INTO GoldMine (date, quantity) VALUES ('2021-01-01', 150), ('2021-01-05', 200), ('2021-02-10', 180), ('2021-03-20', 250); \n[/INST]\nSELECT SUM(quantity) FROM GoldMine WHERE date < '2021-04-01' AND date >= '2021-01-01';\nThis query calculates the total quantity of gold mined in the first quarter of 2021 by summing the 'quantity' column values where the 'date' is within the first quarter of 2021.</s>"}
{"text": "<s>[INST] \nWhat is the maximum number of messages sent by a user in the last month, broken down by country?\nCREATE TABLE messages (id INT, user_id INT, messages INT, country VARCHAR(255), date DATE); INSERT INTO messages (id, user_id, messages, country, date) VALUES (1, 1, 100, 'India', '2022-02-28'), (2, 2, 200, 'Pakistan', '2022-02-27'), (3, 3, 150, 'Bangladesh', '2022-02-26'); \n[/INST]\nSELECT MAX(messages) AS max_messages, country FROM messages WHERE date >= DATE(NOW()) - INTERVAL 1 MONTH GROUP BY country;\nThis query calculates the maximum number of messages sent by a user in the last month, broken down by country. It does this by filtering the data based on the date, and then grouping the data by country and calculating the maximum number of messages.</s>"}
{"text": "<s>[INST] \nFind the number of unique users who prefer matte finish lipsticks.\nCREATE TABLE user_preference (id INT, user_id INT, product_id INT, finish VARCHAR(50), PRIMARY KEY (id)); INSERT INTO user_preference (id, user_id, product_id, finish) VALUES (1, 1, 1, 'Matte'), (2, 2, 1, 'Matte'), (3, 3, 2, 'Gloss'); \n[/INST]\nSELECT COUNT(DISTINCT user_id) as unique_users FROM user_preference WHERE finish = 'Matte';\nThis query selects the count of distinct user IDs from the user_preference table where the finish is matte, to find the number of unique users who prefer matte finish lipsticks.</s>"}
{"text": "<s>[INST] \nWho made the most recent donation?\nCREATE TABLE Donors (DonorID INT, Name TEXT, DonationDate DATE); \n[/INST]\nSELECT Name, MAX(DonationDate) FROM Donors GROUP BY Name ORDER BY MAX(DonationDate) DESC LIMIT 1;\nThis SQL query groups the Donors table by the Name column, finds the maximum donation date for each donor, orders the results in descending order by the maximum donation date, and returns the name of the donor who made the most recent donation.</s>"}
{"text": "<s>[INST] \nWhich pollution control initiatives have overlapping jurisdictions with ocean floor mapping projects in the Indian Ocean?\nCREATE TABLE pollution_control_initiatives (id INT, name VARCHAR(255), region VARCHAR(255)); CREATE TABLE ocean_floor_mapping_projects (id INT, name VARCHAR(255), region VARCHAR(255)); \n[/INST]\nSELECT p.name, o.name FROM pollution_control_initiatives p INNER JOIN ocean_floor_mapping_projects o ON p.region = o.region WHERE p.region = 'Indian Ocean';\nThis SQL query finds pollution control initiatives and ocean floor mapping projects that overlap in the Indian Ocean. It does so by joining the pollution_control_initiatives and ocean_floor_mapping_projects tables on the region column and then filtering the results to only include rows where the region is 'Indian Ocean'.</s>"}
{"text": "<s>[INST] \nWhat is the maximum number of passengers for a single autonomous shuttle ride?\nCREATE TABLE autonomous_shuttles (shuttle_id INT, ride_id INT, start_time TIMESTAMP, end_time TIMESTAMP, passengers INT); \n[/INST]\nSELECT MAX(passengers) FROM autonomous_shuttles;\nThe query finds the maximum number of passengers for a single autonomous shuttle ride by using the MAX function to find the maximum value in the passengers column.</s>"}
{"text": "<s>[INST] \nFind the highest price of a painting from an African artist.\nCREATE TABLE Artists (id INT, name VARCHAR(100), country VARCHAR(50)); INSERT INTO Artists (id, name, country) VALUES (1, 'Artist 1', 'Nigeria'), (2, 'Artist 2', 'France'), (3, 'Artist 3', 'Egypt'); CREATE TABLE Paintings (id INT, name VARCHAR(100), artist_id INT, price DECIMAL(10,2)); INSERT INTO Paintings (id, name, artist_id, price) VALUES (1, 'Painting 1', 1, 10000.00), (2, 'Painting 2', 2, 20000.00), (3, 'Painting 3', 3, 15000.00); \n[/INST]\nSELECT MAX(price) FROM Paintings JOIN Artists ON Paintings.artist_id = Artists.id WHERE Artists.country = 'Africa';\nFind the maximum price of paintings from African artists by using the MAX function on the price column and filtering rows with the WHERE clause for the country Africa in the Artists table using a JOIN clause to combine the two tables.</s>"}
{"text": "<s>[INST] \nWhat is the percentage of schools meeting environmental standards in each region?\nCREATE TABLE Schools (region_id INT, meets_standard BOOLEAN); INSERT INTO Schools (region_id, meets_standard) VALUES (1, true), (1, false), (2, true), (2, true), (3, false), (3, true), (4, true), (4, true); CREATE TABLE Regions (id INT, name VARCHAR(50)); INSERT INTO Regions (id, name) VALUES (1, 'North'), (2, 'South'), (3, 'East'), (4, 'West'); \n[/INST]\nSELECT R.name, (COUNT(S.id) * 100.0 / (SELECT COUNT(*) FROM Schools WHERE region_id = R.id)) as Percentage_Meeting_Standards FROM Schools S JOIN Regions R ON S.region_id = R.id WHERE S.meets_standard = true GROUP BY R.name;\nThis SQL query joins the Schools table and the Regions table to get the names of the regions. It then calculates the percentage of schools meeting environmental standards in each region.</s>"}
{"text": "<s>[INST] \nFind the country with the highest production quantity of chemical 'C123'\nCREATE TABLE chemical_production (id INT PRIMARY KEY, chemical_id VARCHAR(10), quantity INT, country VARCHAR(50)); INSERT INTO chemical_production (id, chemical_id, quantity, country) VALUES (1, 'C123', 500, 'USA'), (2, 'C456', 300, 'Canada'), (3, 'C123', 100, 'Germany'), (4, 'C456', 250, 'USA'), (5, 'C456', 350, 'Canada'), (6, 'C123', 400, 'Mexico'); \n[/INST]\nSELECT country FROM chemical_production WHERE chemical_id = 'C123' GROUP BY country ORDER BY SUM(quantity) DESC LIMIT 1;\nThis query finds the country with the highest production quantity of chemical 'C123' by grouping by country and calculating the sum of quantity for chemical 'C123', then ordering by sum(quantity) in descending order and limiting to the first row.</s>"}
{"text": "<s>[INST] \nList the total CO2 emissions for each agricultural machine in the past month.\nCREATE TABLE machine_emissions (machine TEXT, co2_emissions INTEGER, start_time TIMESTAMP, end_time TIMESTAMP); \n[/INST]\nSELECT machine, SUM(co2_emissions) as total_emissions FROM machine_emissions WHERE start_time BETWEEN DATEADD(month, -1, CURRENT_TIMESTAMP) AND CURRENT_TIMESTAMP GROUP BY machine;\nWe filter the records to only include the past month's data. Then, we use the GROUP BY clause to group the results by machine, and the SUM function to calculate the total CO2 emissions for each machine.</s>"}
{"text": "<s>[INST] \nList the unique 'Workout' types offered at each studio, excluding 'Yoga' workouts.\nCREATE TABLE Studios (studio VARCHAR(50)); INSERT INTO Studios (studio) VALUES ('Boston'), ('Seattle'), ('New York'); CREATE TABLE Workouts (studio VARCHAR(50), workout VARCHAR(50)); INSERT INTO Workouts (studio, workout) VALUES ('Boston', 'Pilates'), ('Boston', 'Boxing'), ('Seattle', 'Cycling'), ('Seattle', 'Yoga'), ('New York', 'Cycling'), ('New York', 'Boxing'); \n[/INST]\nSELECT DISTINCT studio, workout FROM Workouts WHERE workout != 'Yoga';\nThe SQL query uses the DISTINCT keyword to return each unique combination of studio and workout type offered, excluding 'Yoga' workouts.</s>"}
{"text": "<s>[INST] \nWhat is the total quantity of ingredients used in the past week, broken down by ingredient?\nCREATE TABLE menu (menu_id INT, item_name VARCHAR(255), category VARCHAR(255), price DECIMAL(5,2), inventory_count INT, last_updated TIMESTAMP);CREATE TABLE inventory (ingredient_id INT, ingredient_name VARCHAR(255), quantity INT, reorder_threshold INT, last_updated TIMESTAMP);CREATE TABLE inventory_transactions (transaction_id INT, ingredient_id INT, transaction_type VARCHAR(50), quantity INT, transaction_date TIMESTAMP, PRIMARY KEY (transaction_id), FOREIGN KEY (ingredient_id) REFERENCES inventory(ingredient_id)); \n[/INST]\nSELECT ingredient_name, SUM(quantity) as total_quantity FROM inventory_transactions JOIN inventory ON inventory_transactions.ingredient_id = inventory.ingredient_id WHERE transaction_date >= CURRENT_DATE - INTERVAL '7 days' GROUP BY ingredient_name;\nThis query calculates the total quantity of ingredients used in the past week, broken down by ingredient. It starts by joining the inventory and inventory_transactions tables based on the ingredient_id. Then, it filters the results to only include transactions that occurred in the past week by using the INTERVAL keyword and the CURRENT_DATE keyword. Finally, it calculates the total quantity of ingredients used by summing the quantity column in the inventory_transactions table and groups the results by ingredient name.</s>"}
{"text": "<s>[INST] \nWhat is the percentage of employees who are from underrepresented racial or ethnic groups?\nCREATE TABLE EmployeeData (EmployeeID int, Race varchar(50)); INSERT INTO EmployeeData (EmployeeID, Race) VALUES (1, 'White'), (2, 'Asian'), (3, 'Hispanic'), (4, 'Black'); \n[/INST]\nSELECT (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM EmployeeData)) AS Percentage FROM EmployeeData WHERE Race IN ('Hispanic', 'Black');\nThis query calculates the percentage of employees who are from underrepresented racial or ethnic groups (in this case, Hispanic and Black) by using the COUNT function to count the number of employees who meet the criteria, and dividing that by the total number of employees.</s>"}
{"text": "<s>[INST] \nWhat is the total number of autonomous driving research papers published per year?\nCREATE TABLE AutonomousDrivingResearch (Title VARCHAR(100), Author VARCHAR(50), Country VARCHAR(50), Year INT); INSERT INTO AutonomousDrivingResearch (Title, Author, Country, Year) VALUES ('Deep Learning for Autonomous Driving', 'John Smith', 'USA', 2018), ('Computer Vision in Autonomous Vehicles', 'Anna Johnson', 'Germany', 2019), ('Autonomous Driving in Urban Environments', 'Peter Lee', 'China', 2018), ('Sensors in Autonomous Vehicles', 'Lisa Kim', 'South Korea', 2019); \n[/INST]\nSELECT Year, COUNT(*) as Total_Papers FROM AutonomousDrivingResearch GROUP BY Year;\nThis query calculates the total number of autonomous driving research papers published per year. It groups the records by the year and counts the number of records for each group.</s>"}
{"text": "<s>[INST] \nWhat are the names of chemicals with a safety stock level below 100?\nCREATE TABLE Chemicals (name VARCHAR(255), safety_stock_level INT); INSERT INTO Chemicals (name, safety_stock_level) VALUES ('Acetone', 150), ('Ammonia', 200), ('Chloroform', 50); \n[/INST]\nSELECT name FROM Chemicals WHERE safety_stock_level < 100;\nThe SQL query selects the name column from the Chemicals table, filtering rows where the safety_stock_level is below 100.</s>"}
{"text": "<s>[INST] \nWhat is the total number of explainability incidents for the AI Explainer application in Asia?\nCREATE TABLE ExplainabilityIncidents (id INT, app VARCHAR(255), region VARCHAR(255), incidents INT); INSERT INTO ExplainabilityIncidents (id, app, region, incidents) VALUES (1, 'AI Explainer', 'Asia', 12), (2, 'AI Artist', 'Europe', 15), (3, 'AI Composer', 'Africa', 8), (4, 'AI Explainer', 'South America', 5), (5, 'AI Artist', 'North America', 2), (6, 'AI Composer', 'Asia', 10); \n[/INST]\nSELECT region, SUM(incidents) as total_incidents FROM ExplainabilityIncidents WHERE app = 'AI Explainer' AND region = 'Asia' GROUP BY region;\nThis SQL query calculates the total number of explainability incidents for the AI Explainer application in Asia. It uses the WHERE clause to filter the results to only show rows where the app is 'AI Explainer' and the region is 'Asia', and the SUM function to find the total of the incidents column for each unique region.</s>"}
{"text": "<s>[INST] \nWhich countries have a marine research station in the Pacific Ocean and the Atlantic Ocean?\nCREATE TABLE countries_oceans (country_name VARCHAR(50), pacific_station BOOLEAN, atlantic_station BOOLEAN); INSERT INTO countries_oceans (country_name, pacific_station, atlantic_station) VALUES ('USA', true, true), ('Mexico', false, false); \n[/INST]\nSELECT country_name FROM countries_oceans WHERE pacific_station = true AND atlantic_station = true;\nSelect records from the 'countries_oceans' table where the 'pacific_station' and 'atlantic_station' columns both have a value of true.</s>"}
{"text": "<s>[INST] \nHow many mental health parity violations were reported in each state and by violation type?\nCREATE TABLE mental_health_parity_violations_by_type (id INT, state VARCHAR(20), violation_type VARCHAR(20), violation_count INT); INSERT INTO mental_health_parity_violations_by_type (id, state, violation_type, violation_count) VALUES (1, 'California', 'Lack of coverage', 50), (2, 'New York', 'Inadequate coverage', 75), (3, 'Texas', 'Lack of coverage', 100); \n[/INST]\nSELECT state, violation_type, SUM(violation_count) as total_violations FROM mental_health_parity_violations_by_type GROUP BY state, violation_type;\nThis query sums the number of mental health parity violations by state and violation type, then groups the results by state and violation type.</s>"}
{"text": "<s>[INST] \nFind the number of Obesity cases recorded in California in 2020.\nCREATE TABLE HealthStats (Year INT, Disease VARCHAR(20), State VARCHAR(20), Cases INT); INSERT INTO HealthStats (Year, Disease, State, Cases) VALUES (2018, 'Cancer', 'California', 50000); INSERT INTO HealthStats (Year, Disease, State, Cases) VALUES (2020, 'Obesity', 'California', 35000); \n[/INST]\nSELECT SUM(Cases) FROM HealthStats WHERE Disease = 'Obesity' AND State = 'California' AND Year = 2020;\nSum the Obesity cases in California in 2020.</s>"}
{"text": "<s>[INST] \nList the financial capability programs and their start dates.\nCREATE TABLE financial_capability_programs (program_id INT, program_name VARCHAR(255), start_date DATE); INSERT INTO financial_capability_programs (program_id, program_name, start_date) VALUES (1, 'Financial Literacy', '2021-09-01'); INSERT INTO financial_capability_programs (program_id, program_name, start_date) VALUES (2, 'Budgeting Skills', '2022-02-15'); \n[/INST]\nSELECT program_name, start_date FROM financial_capability_programs;\nThis query lists the financial capability programs and their start dates.</s>"}
{"text": "<s>[INST] \nAdd a new column 'equipment_type' to the 'construction_equipment' table with a default value of 'Heavy'\nCREATE TABLE construction_equipment (equipment_id INT, equipment_name TEXT, equipment_age INT, equipment_status TEXT); \n[/INST]\nALTER TABLE construction_equipment ADD equipment_type TEXT DEFAULT 'Heavy';\nThis SQL query adds a new column 'equipment_type' to the 'construction_equipment' table with a default value of 'Heavy'.</s>"}
{"text": "<s>[INST] \nWhat is the distribution of cities in our news article database?\nCREATE TABLE NewsArticles (id INT, title VARCHAR(255), city VARCHAR(255)); \n[/INST]\nSELECT city, COUNT(*) AS count FROM NewsArticles GROUP BY city;\nWe use the COUNT function to calculate the number of cities in our news article database. We group by the city to ensure that we are getting the correct count for each city.</s>"}
{"text": "<s>[INST] \nList the number of mobile and broadband subscribers in each country, if available. If not, return null values.\nCREATE TABLE subscribers(id INT, subscription_type VARCHAR(10), country VARCHAR(10)); INSERT INTO subscribers VALUES (1, 'mobile', 'USA'); INSERT INTO subscribers VALUES (2, 'broadband', 'Mexico'); INSERT INTO subscribers VALUES (3, NULL, 'Canada'); \n[/INST]\nSELECT country, subscription_type, COUNT(*) as total_subscribers FROM subscribers GROUP BY country, subscription_type;\nThis query groups the subscribers by country and subscription type, then counts the number of subscribers in each group using the COUNT function. The result is a table with the number of mobile and broadband subscribers in each country, grouped by country and type. The LEFT JOIN clause is used to return null values for the countries that do not have any subscribers.</s>"}
{"text": "<s>[INST] \nIncrease the fare for disabled passengers on bus route 105 by 10%.\nCREATE TABLE routes (route_id INT, route_name TEXT); INSERT INTO routes (route_id, route_name) VALUES (101, 'Bus Route 101'), (102, 'Bus Route 102'), (105, 'Bus Route 105'); CREATE TABLE fare_collection (collection_id INT, passenger_type TEXT, route_id INT, fare DECIMAL); INSERT INTO fare_collection (collection_id, passenger_type, route_id, fare) VALUES (1, 'Ambulatory', 101, 3.00), (2, 'Wheelchair', 101, 2.50), (3, 'Able-bodied', 101, 2.00), (4, 'Wheelchair', 105, 2.00); \n[/INST]\nUPDATE fare_collection SET fare = fare * 1.10 WHERE passenger_type = 'Wheelchair' AND route_id = 105;\nThe SQL query updates the fare column in the fare_collection table by 10% for all records where the passenger_type is 'Wheelchair' and the route_id is 105.</s>"}
{"text": "<s>[INST] \nShow the total goals scored by each team\nCREATE TABLE team_performances (team VARCHAR(50), games_played INT, goals_scored INT); INSERT INTO team_performances (team, games_played, goals_scored) VALUES ('Team A', 25, 50), ('Team B', 20, 40), ('Team C', 27, 60); \n[/INST]\nSELECT team, SUM(goals_scored) as total_goals FROM team_performances GROUP BY team;\nThis query groups the 'team_performances' table by the 'team' column and calculates the sum of 'goals_scored' for each team, displaying the total goals scored by each team.</s>"}
{"text": "<s>[INST] \nFind the total number of marine species in the 'species_info' table that belong to the 'Actinopterygii' class.\nCREATE TABLE species_info (species_id INT, species_name VARCHAR(50), scientific_name VARCHAR(50), class VARCHAR(20)); \n[/INST]\nSELECT COUNT(*) FROM species_info WHERE class = 'Actinopterygii';\nThe SQL query filters the 'species_info' table for species belonging to the 'Actinopterygii' class and then counts the total number of species.</s>"}
{"text": "<s>[INST] \nWhat are the names and types of all weapons in the weapons table that were manufactured in the US?\nCREATE TABLE weapons (name TEXT, type TEXT, manufacturer TEXT); INSERT INTO weapons (name, type, manufacturer) VALUES ('M16', 'Assault Rifle', 'US'), ('M1 Abrams', 'Tank', 'US'), ('Tomahawk', 'Missile', 'US'); \n[/INST]\nSELECT name, type FROM weapons WHERE manufacturer = 'US';\nThis query selects the name and type columns from the weapons table and filters the rows where the manufacturer is equal to \"US\".</s>"}
{"text": "<s>[INST] \nWhat is the average cost of spacecraft manufactured by companies in Oceania?\nCREATE TABLE SpacecraftManufacturing (id INT, company VARCHAR(255), cost INT, country VARCHAR(255)); \n[/INST]\nSELECT AVG(cost) FROM SpacecraftManufacturing WHERE country IN ('Australia', 'New Zealand');\nThis query calculates the average cost of spacecraft manufactured by companies in Oceania. It uses the AVG function to find the average cost values in the SpacecraftManufacturing table where the country is Australia or New Zealand.</s>"}
{"text": "<s>[INST] \nWhat is the maximum number of eco-friendly tours in Argentina in the last 6 months?\nCREATE TABLE eco_tours (tour_id INT, country VARCHAR(50), tour_date DATE); INSERT INTO eco_tours (tour_id, country, tour_date) VALUES (1, 'Argentina', '2022-01-01'), (2, 'Argentina', '2022-02-15'), (3, 'Bolivia', '2022-03-01'); \n[/INST]\nSELECT COUNT(*) FROM eco_tours et WHERE et.country = 'Argentina' AND et.tour_date >= DATE_SUB(NOW(), INTERVAL 6 MONTH);\nFirst, we filter the eco_tours table for rows where the country is 'Argentina' and the tour_date is within the last 6 months. Then, we calculate the count of the resulting rows.</s>"}
{"text": "<s>[INST] \nWhich spacecraft have a mass between 5000 and 7000 tons?\nCREATE TABLE SpacecraftManufacturing (id INT, company VARCHAR(255), mass FLOAT); INSERT INTO SpacecraftManufacturing (id, company, mass) VALUES (1, 'Aerospace Inc.', 5000.0), (2, 'Galactic Corp.', 7000.0), (3, 'Space Tech', 6500.0); \n[/INST]\nSELECT * FROM SpacecraftManufacturing WHERE mass BETWEEN 5000 AND 7000;\nThis query retrieves all spacecraft with a mass between 5000 and 7000 tons by selecting all records with a mass between 5000 and 7000.</s>"}
{"text": "<s>[INST] \nWhat is the name and email of the staff member with the most number of disability accommodations requests?\nCREATE TABLE Staff (StaffID INT, FirstName VARCHAR(50), LastName VARCHAR(50), Email VARCHAR(50)); INSERT INTO Staff (StaffID, FirstName, LastName, Email) VALUES (1, 'John', 'Doe', 'johndoe@example.com'), (2, 'Jane', 'Doe', 'janedoe@example.com'); CREATE TABLE DisabilityAccommodations (RequestID INT, StaffID INT, RequestDate DATETIME); INSERT INTO DisabilityAccommodations (RequestID, StaffID, RequestDate) VALUES (1, 1, '2021-01-01'), (2, 1, '2021-02-01'), (3, 2, '2021-03-01'), (4, 1, '2021-04-01'), (5, 2, '2021-05-01'), (6, 2, '2021-06-01'); \n[/INST]\nSELECT Staff.FirstName, Staff.LastName, Staff.Email FROM Staff INNER JOIN (SELECT StaffID, COUNT(*) as NumRequests FROM DisabilityAccommodations GROUP BY StaffID ORDER BY NumRequests DESC LIMIT 1) Subquery ON Staff.StaffID = Subquery.StaffID;\nThis query first calculates the number of disability accommodations requests per staff member and orders them in descending order. It then selects the top staff member with the highest number of requests and returns their name and email.</s>"}
{"text": "<s>[INST] \nWhat is the maximum cargo weight and corresponding port for cargo handled by the vessel 'Sea Serpent'?\nCREATE TABLE ports (id INT, name VARCHAR(50), location VARCHAR(50), un_code VARCHAR(10)); CREATE TABLE vessels (id INT, name VARCHAR(50), type VARCHAR(50), year_built INT, port_id INT); CREATE TABLE captains (id INT, name VARCHAR(50), age INT, license_number VARCHAR(20), vessel_id INT); CREATE TABLE cargo (id INT, description VARCHAR(50), weight FLOAT, port_id INT, vessel_id INT); CREATE VIEW captain_vessel AS SELECT captains.name AS captain_name, vessels.name AS vessel_name FROM captains INNER JOIN vessels ON captains.vessel_id = vessels.id; \n[/INST]\nSELECT ports.name, MAX(cargo.weight) AS max_cargo_weight FROM ports INNER JOIN (vessels INNER JOIN cargo ON vessels.id = cargo.vessel_id) ON ports.id = vessels.port_id WHERE vessels.name = 'Sea Serpent' GROUP BY ports.name;\nThis query retrieves the name of the port and the maximum cargo weight handled by the vessel 'Sea Serpent'. It performs an INNER JOIN between the ports, vessels, and cargo tables, filters the results based on the name of the vessel, groups the data by the name of the port, and finally calculates the maximum weight of the cargo for each port.</s>"}
{"text": "<s>[INST] \nCalculate the average natural gas production per day for each field in the North Sea\nCREATE TABLE field (id INT, name VARCHAR(50), location VARCHAR(50)); CREATE TABLE gas_production (field_id INT, date DATE, gas_production FLOAT); \n[/INST]\nSELECT f.name, AVG(gp.gas_production/DATEDIFF('2022-06-13', gp.date)) FROM gas_production gp JOIN field f ON gp.field_id = f.id WHERE f.location LIKE '%North Sea%' GROUP BY gp.field_id;\nThe SQL query joins the field and gas_production tables on field_id and id, respectively. It then filters for records where the location contains the string \"North Sea\" and calculates the average daily gas production for each field by dividing the gas_production by the number of days between the date and a fixed date (2022-06-13). It then groups the results by field_id.</s>"}
{"text": "<s>[INST] \nShow all records in the 'social_good' table\nCREATE TABLE social_good (organization VARCHAR(255), initiative VARCHAR(255)); INSERT INTO social_good (organization, initiative) VALUES ('CodeForAmerica', 'Civic Technology'), ('BlackGirlsCode', 'Digital Literacy'), ('CodeForAmerica', 'Data Science'); \n[/INST]\nSELECT * FROM social_good;\n1. Select all columns and all records from 'social_good'.</s>"}
{"text": "<s>[INST] \nHow many patients in South Africa were diagnosed with Hepatitis B in 2019?\nCREATE TABLE Patients (ID INT, Gender VARCHAR(10), Disease VARCHAR(20), Country VARCHAR(30), Diagnosis_Date DATE); INSERT INTO Patients (ID, Gender, Disease, Country, Diagnosis_Date) VALUES (1, 'Male', 'Hepatitis B', 'South Africa', '2019-01-01'); \n[/INST]\nSELECT COUNT(*) FROM Patients WHERE Disease = 'Hepatitis B' AND Country = 'South Africa' AND YEAR(Diagnosis_Date) = 2019;\nCount the number of patients diagnosed with Hepatitis B in South Africa in 2019.</s>"}
{"text": "<s>[INST] \nIdentify the space agencies with the most spacecraft in deep space.\nCREATE TABLE Spacecrafts (Id INT, Agency VARCHAR(50), Mission VARCHAR(50), LaunchYear INT, Status VARCHAR(10)); INSERT INTO Spacecrafts (Id, Agency, Mission, LaunchYear, Status) VALUES (1, 'NASA', 'Voyager 1', 1977, 'Active'), (2, 'NASA', 'Voyager 2', 1977, 'Active'), (3, 'NASA', 'New Horizons', 2006, 'Active'), (4, 'ESA', 'Cassini-Huygens', 1997, 'Inactive'), (5, 'JAXA', 'Hayabusa', 2003, 'Inactive'), (6, 'JAXA', 'Hayabusa2', 2014, 'Active'); \n[/INST]\nSELECT Agency, COUNT(*) as DeepSpaceMissions FROM Spacecrafts WHERE Status = 'Active' GROUP BY Agency ORDER BY DeepSpaceMissions DESC;\nThe SQL query identifies (GROUP BY Agency) space agencies (Agency) with the most (ORDER BY DeepSpaceMissions DESC) spacecraft (COUNT(*) as DeepSpaceMissions) in deep space (WHERE Status = 'Active') based on the Spacecrafts table.</s>"}
{"text": "<s>[INST] \nIdentify players who have played for more than 15 hours on a single platform, ordered by the total game duration in descending order.\nCREATE TABLE Players (PlayerID INT, GameDuration FLOAT, Platform VARCHAR(50)); INSERT INTO Players (PlayerID, GameDuration, Platform) VALUES (1, 567.8, 'PC'), (2, 678.9, 'Console'), (3, 345.1, 'Mobile'), (4, 890.1, 'PC'); \n[/INST]\nSELECT * FROM (SELECT PlayerID, Platform, SUM(GameDuration) AS TotalGameDuration, RANK() OVER (ORDER BY SUM(GameDuration) DESC) AS PlayerRank FROM Players GROUP BY PlayerID, Platform) AS PlayerGameTime WHERE PlayerRank <= 2;\nThe query uses a subquery to first calculate the total game duration per player on each platform, and then assigns a rank to each player based on their total game duration. The outer query filters for players who are ranked in the top 2, and returns the required information.</s>"}
{"text": "<s>[INST] \nWhat is the percentage change in international arrivals to each continent compared to the same quarter last year?\nCREATE TABLE quarterly_arrivals (continent VARCHAR(255), year INT, quarter INT, arrivals INT); INSERT INTO quarterly_arrivals (continent, year, quarter, arrivals) VALUES ('Asia', 2021, 1, 4000000); INSERT INTO quarterly_arrivals (continent, year, quarter, arrivals) VALUES ('Asia', 2021, 2, 4500000); INSERT INTO quarterly_arrivals (continent, year, quarter, arrivals) VALUES ('Asia', 2020, 1, 3500000); INSERT INTO quarterly_arrivals (continent, year, quarter, arrivals) VALUES ('Asia', 2020, 2, 4000000); \n[/INST]\nSELECT continent, year, quarter, arrivals, NTILE(4) OVER (ORDER BY arrivals) as quartile, (arrivals - LAG(arrivals) OVER (PARTITION BY continent ORDER BY year, quarter))*100.0 / LAG(arrivals) OVER (PARTITION BY continent ORDER BY year, quarter) as pct_change FROM quarterly_arrivals;\nThis query calculates the percentage change in international arrivals to each continent compared to the same quarter last year by using the LAG function to access the previous year's arrivals and calculating the percentage change. NTILE is used to divide the data into quartiles based on arrivals.</s>"}
{"text": "<s>[INST] \nList the names of all indica strains with an average THC percentage greater than 15%.\nCREATE TABLE Strains (strain_id INT, strain_type TEXT, thc_percentage DECIMAL(4,2)); \n[/INST]\nSELECT strain_name FROM Strains WHERE strain_type = 'indica' GROUP BY strain_name HAVING AVG(thc_percentage) > 15.00;\nThe SQL query lists the names of all indica strains with an average THC percentage greater than 15% by grouping strain_name and averaging thc_percentage for each strain, then filtering the results to only include strains with an average THC percentage greater than 15%.</s>"}
{"text": "<s>[INST] \nWhat is the average salary of workers in the circular economy sector compared to traditional manufacturing?\nCREATE TABLE companies (id INT, name TEXT, sector TEXT); INSERT INTO companies (id, name, sector) VALUES (1, 'Circular Solutions', 'circular economy'); INSERT INTO companies (id, name, sector) VALUES (2, 'Linear Production', 'traditional manufacturing'); INSERT INTO companies (id, name, sector) VALUES (3, 'Sustainable Systems', 'circular economy'); INSERT INTO companies (id, name, sector) VALUES (4, 'Conventional Creations', 'traditional manufacturing'); CREATE TABLE workers (id INT, company_id INT, salary REAL); INSERT INTO workers (id, company_id, salary) VALUES (1, 1, 50000); INSERT INTO workers (id, company_id, salary) VALUES (2, 1, 55000); INSERT INTO workers (id, company_id, salary) VALUES (3, 2, 45000); INSERT INTO workers (id, company_id, salary) VALUES (4, 2, 50000); INSERT INTO workers (id, company_id, salary) VALUES (5, 3, 52000); INSERT INTO workers (id, company_id, salary) VALUES (6, 3, 57000); INSERT INTO workers (id, company_id, salary) VALUES (7, 4, 48000); INSERT INTO workers (id, company_id, salary) VALUES (8, 4, 49000); \n[/INST]\nSELECT AVG(workers.salary) AS avg_salary, companies.sector FROM workers INNER JOIN companies ON workers.company_id = companies.id GROUP BY companies.sector;\nThe SQL query calculates the average salary of workers in the circular economy sector compared to traditional manufacturing by joining the 'workers' and 'companies' table on the company_id, grouping the results by sector, and then applying the AVG function to the salary column for each sector.</s>"}
{"text": "<s>[INST] \nCalculate the total revenue for the last 3 cricket world cups\nCREATE TABLE events (id INT, name VARCHAR(50), sport VARCHAR(20), start_date DATE, end_date DATE, ticket_price INT); \n[/INST]\nSELECT SUM(DATEDIFF(end_date, start_date) + 1) * ticket_price FROM events WHERE sport = 'Cricket' AND name LIKE '%World Cup%' AND start_date >= DATE_SUB(CURDATE(), INTERVAL 3 YEAR);\nThis query calculates the total revenue for the last 3 cricket world cups by filtering events by sport and name, and calculating the number of days between the start and end dates of each event. Then, it multiplies the number of days by the ticket price to get the total revenue.</s>"}
{"text": "<s>[INST] \nWhat is the total production value (in USD) of organic farms in the 'agroecology' schema, in the top 3 largest states by area?\nCREATE SCHEMA agroecology;CREATE TABLE organic_farms (id INT, state VARCHAR(50), production_value INT); \n[/INST]\nSELECT SUM(production_value) FROM agroecology.organic_farms WHERE state IN (SELECT state FROM (SELECT state, ROW_NUMBER() OVER (ORDER BY SUM(area_ha) DESC) rn FROM agroecology.organic_farms GROUP BY state) t WHERE rn <= 3);\nThis query calculates the sum of the 'production_value' column for all rows in the 'organic_farms' table within the 'agroecology' schema, but only for rows where the 'state' column is in the top 3 states by area. The subquery calculates the total area for each state and assigns a row number based on the total area, then selects the states with the top 3 row numbers.</s>"}
{"text": "<s>[INST] \nWhat is the average level of players who played World of Warcraft in the USA?\nCREATE TABLE Players (PlayerID INT, PlayerLevel INT, Game VARCHAR(20), PlayerCountry VARCHAR(20)); INSERT INTO Players (PlayerID, PlayerLevel, Game, PlayerCountry) VALUES (1, 23, 'World of Warcraft', 'USA'), (2, 27, 'World of Warcraft', 'Canada'); \n[/INST]\nSELECT AVG(PlayerLevel) FROM Players WHERE Game = 'World of Warcraft' AND PlayerCountry = 'USA';\nThis query calculates the average level of players who have played World of Warcraft and are from the USA. It does this by filtering the Players table for rows where the Game column is 'World of Warcraft' and the PlayerCountry column is 'USA'. It then calculates the average of the PlayerLevel column from these filtered rows.</s>"}
{"text": "<s>[INST] \nWhat is the average time to resolution for cases in each category?\nCREATE TABLE cases (case_id INT, case_category VARCHAR(255), resolution_date DATE); \n[/INST]\nSELECT case_category, AVG(DATEDIFF(resolution_date, case_date)) as avg_time_to_resolution FROM cases GROUP BY case_category;\nThis query calculates the average time to resolution for cases in each category. It uses the DATEDIFF function to find the difference between the resolution date and the case date for each case, and then groups the results by the case category and calculates the average time to resolution.</s>"}
{"text": "<s>[INST] \nWhat is the age ranking of athletes from Japan in their respective sports?\nCREATE TABLE Athletes (AthleteID INT, Name VARCHAR(50), Age INT, Sport VARCHAR(20), Country VARCHAR(50)); INSERT INTO Athletes (AthleteID, Name, Age, Sport, Country) VALUES (1, 'Hanae Shibata', 22, 'Swimming', 'Japan'); INSERT INTO Athletes (AthleteID, Name, Age, Sport, Country) VALUES (2, 'Kenji Sato', 30, 'Gymnastics', 'Japan'); \n[/INST]\nSELECT AthleteID, Name, Age, ROW_NUMBER() OVER (PARTITION BY Sport ORDER BY Age) AS AgeRank FROM Athletes WHERE Country = 'Japan';\nThis query partitions the Athletes table by the Sport column and orders the rows by the Age column within each partition. The ROW_NUMBER() function assigns a unique ranking to each row based on the partitioning and ordering specified. The WHERE clause filters the data to only include rows with the Country value of 'Japan'.</s>"}
{"text": "<s>[INST] \nUpdate the fish stock data for farm A to 5000\nCREATE TABLE fish_stock (id INT, farm_name VARCHAR(50), fish_count INT); INSERT INTO fish_stock (id, farm_name, fish_count) VALUES (1, 'Farm A', 3000); INSERT INTO fish_stock (id, farm_name, fish_count) VALUES (2, 'Farm B', 4000); \n[/INST]\nUPDATE fish_stock SET fish_count = 5000 WHERE farm_name = 'Farm A';\nThe SQL query updates the fish_count value for farm_name 'Farm A' in the fish_stock table to 5000 using the UPDATE statement and the SET clause. The WHERE clause is used to filter the results to only include rows where farm_name is 'Farm A'.</s>"}
{"text": "<s>[INST] \nWhich country has the highest number of startups founded by women?\nCREATE TABLE startups(id INT, name TEXT, country TEXT, founder_gender TEXT); INSERT INTO startups VALUES (1, 'EcoInnovate', 'Canada', 'Female'); INSERT INTO startups VALUES (2, 'GreenTech', 'USA', 'Male'); INSERT INTO startups VALUES (3, 'TechVenture', 'UK', 'Male'); INSERT INTO startups VALUES (4, 'InnoVida', 'Brazil', 'Female'); \n[/INST]\nSELECT country, COUNT(*) AS count FROM startups WHERE founder_gender = 'Female' GROUP BY country ORDER BY count DESC LIMIT 1;\nFinds the country with the highest number of startups founded by women by grouping the startups table by country and calculating the number of startups founded by women in each country using the COUNT and GROUP BY clauses. The ORDER BY and LIMIT clauses are then used to return the country with the highest number of startups founded by women.</s>"}
{"text": "<s>[INST] \nWhich causes received the highest donation amounts in a specific region?\nCREATE TABLE Donations (DonationID INT, Cause VARCHAR(50), Amount DECIMAL(10,2), Region VARCHAR(50)); INSERT INTO Donations (DonationID, Cause, Amount, Region) VALUES (1, 'Education', 2000, 'Africa'), (2, 'Health', 3000, 'Asia'), (3, 'Education', 1000, 'Africa'), (4, 'Environment', 4000, 'Europe'); \n[/INST]\nSELECT Cause, SUM(Amount) as TotalDonation FROM Donations WHERE Region = 'Asia' GROUP BY Cause ORDER BY TotalDonation DESC;\nThis query finds the causes that received the highest donation amounts in a specific region in the Donations table. It filters the data to only include donations from the specified region, groups the data by cause, calculates the sum of the donation amounts, and orders the results in descending order to find the causes with the highest total donation amounts.</s>"}
{"text": "<s>[INST] \nList the number of unique visitors for each event type (dance, music, visual arts, theater) in the last month.\nCREATE TABLE events (id INT, name VARCHAR(255), type VARCHAR(255), start_date DATE); INSERT INTO events (id, name, type, start_date) VALUES (1, 'Dance Showcase', 'dance', '2022-01-01'), (2, 'Music Festival', 'music', '2022-01-10'), (3, 'Visual Arts Exhibition', 'visual arts', '2022-01-15'), (4, 'Theater Performance', 'theater', '2022-01-30'); \n[/INST]\nSELECT type, COUNT(DISTINCT visitor_id) FROM events e JOIN (VALUES (1), (2), (3), (4), (5)) AS visitor_id(visitor_id) ON TRUE WHERE start_date >= DATEADD(MONTH, -1, GETDATE()) GROUP BY type\nWe generate a table with visitor IDs for each event, filter events within the past month, group by event type, and count the number of unique visitors.</s>"}
{"text": "<s>[INST] \nWhich African countries have the highest percentage of eco-tourism revenue in their overall tourism revenue?\nCREATE TABLE tourism_revenue (country VARCHAR(30), eco_revenue INT, total_revenue INT); INSERT INTO tourism_revenue (country, eco_revenue, total_revenue) VALUES ('Kenya', 1200000, 5000000), ('Tanzania', 1500000, 6000000), ('South Africa', 2000000, 8000000); \n[/INST]\nSELECT country, (eco_revenue * 100.0 / total_revenue) as ecotourism_percentage FROM tourism_revenue ORDER BY ecotourism_percentage DESC;\nCalculate the percentage of eco-tourism revenue in overall tourism revenue for African countries by dividing 'eco_revenue' by 'total_revenue' for each country and multiplying by 100. Order the results by 'ecotourism_percentage' in descending order.</s>"}
{"text": "<s>[INST] \nHow many aircraft maintenance requests were filed in Q2 2021 by military branch?\nCREATE TABLE AircraftMaintenance (id INT, branch VARCHAR(255), quarter INT, requests INT); INSERT INTO AircraftMaintenance (id, branch, quarter, requests) VALUES (1, 'Air Force', 1, 50), (2, 'Navy', 2, 70), (3, 'Army', 1, 60), (4, 'Air Force', 2, 80), (5, 'Navy', 1, 40), (6, 'Army', 2, 65); \n[/INST]\nSELECT branch, SUM(requests) FROM AircraftMaintenance WHERE quarter = 2 GROUP BY branch;\nThis SQL query calculates the number of aircraft maintenance requests filed in Q2 2021 by military branch by grouping the 'AircraftMaintenance' table by 'branch' and calculating the sum of the 'requests' column for each group where the 'quarter' is 2.</s>"}
{"text": "<s>[INST] \nWhat is the age distribution of visitors who attended the \"Surrealism\" exhibition?\nCREATE TABLE visitors (visitor_id INT, age INT, visited_surrealism BOOLEAN); INSERT INTO visitors (visitor_id, age, visited_surrealism) VALUES (123, 35, TRUE), (456, 28, FALSE), (789, 42, TRUE), (111, 60, TRUE), (222, 19, FALSE); \n[/INST]\nSELECT age_range, COUNT(*) AS visitor_count FROM (SELECT CASE WHEN age < 30 THEN '18-29' WHEN age < 50 THEN '30-49' ELSE '50+' END AS age_range, visited_surrealism FROM visitors) AS visitor_age_groups WHERE visited_surrealism = TRUE GROUP BY age_range;\nThe SQL query calculates the age distribution of visitors who attended the \"Surrealism\" exhibition by using a subquery to calculate the age range for each visitor and filtering for visitors who attended the \"Surrealism\" exhibition, and then using the GROUP BY clause to group the results by age range and the COUNT function to calculate the number of visitors in each age range.</s>"}
{"text": "<s>[INST] \nWhat is the maximum number of international visitors to any country in the Middle East in 2022?\nCREATE TABLE middle_east_visitors (country VARCHAR(50), year INT, num_visitors INT); INSERT INTO middle_east_visitors (country, year, num_visitors) VALUES ('UAE', 2022, 12000000), ('Saudi Arabia', 2022, 15000000), ('Qatar', 2022, 10000000); \n[/INST]\nSELECT MAX(num_visitors) FROM middle_east_visitors WHERE country IN (SELECT name FROM countries WHERE region = 'Middle East') AND year = 2022;\nThis SQL query calculates the maximum number of international visitors to any country in the Middle East in 2022. It uses a subquery to get the list of Middle Eastern countries, and then filters the middle_east_visitors table to only include these countries and the year 2022. The maximum num_visitors value is then selected.</s>"}
{"text": "<s>[INST] \nSelect the total number of cases won by attorney 'John Smith'\nCREATE TABLE attorneys (attorney_id INT, name VARCHAR(50), total_wins INT); INSERT INTO attorneys (attorney_id, name, total_wins) VALUES (1, 'John Smith', 30); \n[/INST]\nSELECT SUM(total_wins) FROM attorneys WHERE name = 'John Smith';\nThis SQL query calculates the total number of cases won by the attorney named 'John Smith' by summing up the 'total_wins' column where the 'name' is 'John Smith'.</s>"}
{"text": "<s>[INST] \nHow much water was used for agricultural purposes in California in the year 2019?\nCREATE TABLE water_usage (id INT, state VARCHAR(20), year INT, usage_type VARCHAR(50), usage FLOAT); \n[/INST]\nSELECT SUM(usage) FROM water_usage WHERE state = 'California' AND year = 2019 AND usage_type = 'agricultural';\nThis query calculates the total amount of water used for agricultural purposes in California in the year 2019. It does so by summing up the usage values in the water_usage table for California, 2019, and agricultural usage_type.</s>"}
{"text": "<s>[INST] \nHow many intelligence operations were conducted in '2020'?\nCREATE SCHEMA IF NOT EXISTS intelligence; CREATE TABLE IF NOT EXISTS operations (id INT PRIMARY KEY, name TEXT, year INT); INSERT INTO operations (id, name, year) VALUES (1, 'Operation Red Sparrow', 2020), (2, 'Operation Black Swan', 2019), (3, 'Operation Blue Falcon', 2021); \n[/INST]\nSELECT COUNT(*) FROM intelligence.operations WHERE year = 2020;\nThis query counts the number of intelligence operations conducted in '2020' by selecting all records with the year value '2020' and counting the number of rows returned.</s>"}
{"text": "<s>[INST] \nWhat was the total number of tourists visiting South America in 2018?\nCREATE TABLE tourists (id INT, continent VARCHAR(50), country VARCHAR(50), visitors INT, year INT); INSERT INTO tourists (id, continent, country, visitors, year) VALUES (1, 'South America', 'Brazil', 2000, 2018), (2, 'South America', 'Argentina', 1500, 2018); \n[/INST]\nSELECT SUM(visitors) FROM tourists WHERE continent = 'South America' AND year = 2018;\nThis query calculates the total number of tourists visiting South America in 2018 by summing the visitors column for the corresponding continent and year using the SUM function.</s>"}
{"text": "<s>[INST] \nWhat is the total weight of all astronauts?\nCREATE TABLE MedicalProfiles(astronaut_id INT, height INT, weight INT); \n[/INST]\nSELECT SUM(weight) FROM MedicalProfiles;\nThis query calculates the total weight of all astronauts by summing the 'weight' values in the 'MedicalProfiles' table.</s>"}
{"text": "<s>[INST] \nWhat is the average CO2 emission per international flight arriving in Brazil?\nCREATE TABLE flight_emissions (flight_number VARCHAR(255), origin VARCHAR(255), destination VARCHAR(255), year INT, co2_emission INT); INSERT INTO flight_emissions (flight_number, origin, destination, year, co2_emission) VALUES ('LA21', 'Los Angeles, USA', 'Rio de Janeiro, Brazil', 2018, 120000), ('LH456', 'Frankfurt, Germany', 'S\u00e3o Paulo, Brazil', 2019, 135000); \n[/INST]\nSELECT AVG(co2_emission) FROM flight_emissions WHERE destination = 'Brazil';\nThe SQL query calculates the average CO2 emission for all records in the flight_emissions table where the destination is 'Brazil'.</s>"}
{"text": "<s>[INST] \nWhat is the total number of multiplayer racing games released in North America?\nCREATE TABLE Games (GameID INT, GameType VARCHAR(255), Multiplayer INT, ReleaseCountry VARCHAR(255)); INSERT INTO Games (GameID, GameType, Multiplayer, ReleaseCountry) VALUES (1, 'Racing', 1, 'USA'); INSERT INTO Games (GameID, GameType, Multiplayer, ReleaseCountry) VALUES (2, 'Shooter', 0, 'Canada'); INSERT INTO Games (GameID, GameType, Multiplayer, ReleaseCountry) VALUES (3, 'Racing', 1, 'Mexico'); \n[/INST]\nSELECT COUNT(GameID) FROM Games WHERE GameType = 'Racing' AND Multiplayer = 1 AND ReleaseCountry LIKE '%North%';\nWe filter the Games table to only include multiplayer racing games released in North America using the WHERE clause and the LIKE keyword with a wildcard. Then, we calculate the total number of games by using the COUNT function.</s>"}
{"text": "<s>[INST] \nWhat's the number of unique roles and their count for mining operations in Indonesia and Kazakhstan?\nCREATE TABLE indonesian_provinces (id INT, name VARCHAR(50)); CREATE TABLE kazakhstani_regions (id INT, name VARCHAR(50)); CREATE TABLE mining_operations (id INT, country_id INT, region VARCHAR(20)); CREATE TABLE employees (id INT, operation_id INT, role VARCHAR(20)); INSERT INTO indonesian_provinces (id, name) VALUES (1, 'East Kalimantan'), (2, 'Papua'); INSERT INTO kazakhstani_regions (id, name) VALUES (1, 'Karaganda'), (2, 'Ekibastuz'); INSERT INTO mining_operations (id, country_id, region) VALUES (1, 1, 'Indonesia'), (2, 1, 'Indonesia'), (3, 2, 'Kazakhstan'), (4, 2, 'Kazakhstan'); INSERT INTO employees (id, operation_id, role) VALUES (1, 1, 'Operator'), (2, 1, 'Technician'), (3, 2, 'Engineer'), (4, 3, 'Manager'), (5, 3, 'Supervisor'), (6, 4, 'Operator'); \n[/INST]\nSELECT e.role, COUNT(DISTINCT e.id) as role_count FROM employees e INNER JOIN mining_operations m ON e.operation_id = m.id INNER JOIN (SELECT * FROM indonesian_provinces WHERE name IN ('East Kalimantan', 'Papua') UNION ALL SELECT * FROM kazakhstani_regions WHERE name IN ('Karaganda', 'Ekibastuz')) c ON m.country_id = c.id GROUP BY e.role;\nThe SQL query performs a union between the indonesian_provinces and kazakhstani_regions tables, filtering for East Kalimantan, Papua, Karaganda, and Ekibastuz, then performs an inner join with mining_operations and employees tables to count the distinct employee IDs for each role.</s>"}
{"text": "<s>[INST] \nHow many different crops were grown in 'farm_activities' table per region?\nCREATE TABLE farm_activities (region VARCHAR(50), crop VARCHAR(50), planting_date DATE); INSERT INTO farm_activities VALUES ('West Coast', 'Wheat', '2022-04-01'); INSERT INTO farm_activities VALUES ('West Coast', 'Corn', '2022-05-01'); INSERT INTO farm_activities VALUES ('East Coast', 'Rice', '2022-06-01'); \n[/INST]\nSELECT region, COUNT(DISTINCT crop) AS num_crops FROM farm_activities GROUP BY region;\nCounts the number of distinct crops grown per region.</s>"}
{"text": "<s>[INST] \nList the defense diplomacy events in which the United States participated along with the partner country and the number of attendees from each country from 2016 to 2021.\nCREATE TABLE DefenseDiplomacy (Event VARCHAR(50), Year INT, Attendees INT, PartnerCountry VARCHAR(50), Country VARCHAR(50)); INSERT INTO DefenseDiplomacy (Event, Year, Attendees, PartnerCountry, Country) VALUES ('Operation United Nations Stabilization Mission in Haiti', 2016, 100, 'Haiti', 'United States'), ('Operation United Nations Mission in Liberia', 2017, 120, 'Liberia', 'United States'), ('Operation United Nations Mission in the Republic of South Sudan', 2018, 150, 'South Sudan', 'United States'), ('Operation United Nations Mission in Somalia', 2019, 180, 'Somalia', 'United States'), ('Operation United Nations Mission in South Sudan', 2020, 200, 'South Sudan', 'United States'), ('Operation United Nations Multidimensional Integrated Stabilization Mission in the Central African Republic', 2021, 220, 'Central African Republic', 'United States'); \n[/INST]\nSELECT Event, Year, SUM(Attendees) AS TotalAttendees FROM DefenseDiplomacy WHERE Country = 'United States' AND Year BETWEEN 2016 AND 2021 GROUP BY Event, Year;\nThis query lists the defense diplomacy events in which the United States participated along with the partner country and the number of attendees from each country from 2016 to 2021. It does this by summing the attendees column for rows where the country is the United States and the year is between 2016 and 2021. The query also groups the results by event and year so that the total number of attendees from each country for each event is displayed separately.</s>"}
{"text": "<s>[INST] \nWhich electric vehicles are sold in more than one country?\nCREATE TABLE EVSales (make VARCHAR(20), model VARCHAR(20), country VARCHAR(10)); INSERT INTO EVSales (make, model, country) VALUES ('Tesla', 'Model 3', 'USA'); INSERT INTO EVSales (make, model, country) VALUES ('Tesla', 'Model 3', 'Canada'); INSERT INTO EVSales (make, model, country) VALUES ('Chevrolet', 'Bolt', 'USA'); \n[/INST]\nSELECT make, model FROM EVSales GROUP BY make, model HAVING COUNT(DISTINCT country) > 1;\nThe query selects make and model from the EVSales table, groups by make and model, and having count of distinct country greater than 1.</s>"}
{"text": "<s>[INST] \nList all companies in the 'social_impact' sector.\nCREATE TABLE companies (id INT, name TEXT, sector TEXT); INSERT INTO companies (id, name, sector) VALUES (1, 'SocialCo', 'social_impact'), (2, 'ImpactInc', 'social_impact'), (3, 'ChangeOrg', 'non-profit'), (4, 'GreenCorp', 'renewable_energy'); \n[/INST]\nSELECT * FROM companies WHERE sector = 'social_impact';\nSelect all rows from the companies table where the sector is social_impact.</s>"}
{"text": "<s>[INST] \nWhat is the total donation amount for each donor type in the last quarter?\nCREATE TABLE Donations (DonationID INT, DonorID INT, DonationDate DATE, DonationAmount DECIMAL(10,2), DonorType VARCHAR(50)); CREATE VIEW DonorTypes AS SELECT DISTINCT DonorType FROM Donations; \n[/INST]\nSELECT dt.DonorType, SUM(d.DonationAmount) FROM Donations d JOIN DonorTypes dt ON d.DonorType = dt.DonorType WHERE d.DonationDate >= DATEADD(quarter, -1, GETDATE()) GROUP BY dt.DonorType;\nThe SQL query calculates the total donation amount for each donor type in the last quarter. It uses the JOIN clause to combine the Donations and DonorTypes tables based on the DonorType. Then, it groups the results by DonorType, and calculates the sum of donations for each group using the SUM function. The WHERE clause filters the Donations table for records with a DonationDate on or after the date one quarter before the current date.</s>"}
{"text": "<s>[INST] \nInsert new player 'Jane Doe' into 'Players' table.\nCREATE TABLE Players (PlayerID INT, Age INT, Gender VARCHAR(10)); \n[/INST]\nINSERT INTO Players (PlayerID, Age, Gender) VALUES (3, 28, 'Female');\nInsert new player 'Jane Doe' into 'Players' table.</s>"}
{"text": "<s>[INST] \nWhat is the ratio of primary care physicians to specialists in rural areas?\nCREATE TABLE physicians_rural (id INTEGER, specialty VARCHAR(255), location VARCHAR(255)); \n[/INST]\nSELECT (COUNT(*) FILTER (WHERE specialty = 'Primary Care')) / COUNT(*) AS ratio FROM physicians_rural WHERE location LIKE '%rural%';\nThis query calculates the ratio of primary care physicians to specialists in rural areas by dividing the count of primary care physicians by the total count of physicians in rural areas.</s>"}
{"text": "<s>[INST] \nShow the number of employees hired in each quarter of the year, broken down by department.\nCREATE TABLE employees (id INT, name VARCHAR(50), department VARCHAR(50), hire_date DATE); INSERT INTO employees (id, name, department, hire_date) VALUES (1, 'John Doe', 'IT', '2021-03-01'), (2, 'Jane Smith', 'Marketing', '2021-07-15'), (3, 'Mike Johnson', 'IT', '2021-02-12'), (4, 'Sara Connor', 'Marketing', '2021-10-04'); \n[/INST]\nSELECT department, DATE_TRUNC('quarter', hire_date) AS hire_quarter, COUNT(*) AS num_hires FROM employees GROUP BY department, hire_quarter;\nThis SQL query first uses the DATE_TRUNC function to extract the quarter of the year from the hire_date column and groups the records by department and hire_quarter. It then uses the COUNT aggregate function to count the number of records in each group.</s>"}
{"text": "<s>[INST] \nWhat is the total number of unmanned aerial vehicles (UAVs) sold by Harris Corporation in the United Kingdom?\nCREATE TABLE Harris_Sales (id INT, corporation VARCHAR(20), customer VARCHAR(20), quantity INT, equipment VARCHAR(20)); INSERT INTO Harris_Sales (id, corporation, customer, quantity, equipment) VALUES (1, 'Harris Corporation', 'United Kingdom', 12, 'UAVs'); \n[/INST]\nSELECT SUM(quantity) FROM Harris_Sales WHERE corporation = 'Harris Corporation' AND customer = 'United Kingdom' AND equipment = 'UAVs';\nThis query calculates the total number of unmanned aerial vehicles (UAVs) sold by Harris Corporation in the United Kingdom by summing the 'quantity' column where the 'corporation' is 'Harris Corporation', the 'customer' is 'United Kingdom', and the 'equipment' is 'UAVs'.</s>"}
{"text": "<s>[INST] \nWhat are the names of the deepest ocean trenches?\nCREATE TABLE ocean_trenches (name VARCHAR(50), location VARCHAR(50), avg_depth FLOAT); \n[/INST]\nSELECT name FROM ocean_trenches ORDER BY avg_depth DESC LIMIT 1;\nThis query selects the name of the deepest trench by ordering the table by average depth in descending order and limiting the result to 1 row.</s>"}
{"text": "<s>[INST] \nWhat is the total installed capacity of wind farms in the state of California, grouped by the year of completion?\nCREATE TABLE wind_farms (id INT, name VARCHAR(255), state VARCHAR(255), capacity FLOAT, completion_date DATE); \n[/INST]\nSELECT YEAR(completion_date) AS completion_year, SUM(capacity) AS total_capacity FROM wind_farms WHERE state = 'California' GROUP BY completion_year;\nThe SQL query groups the wind farms in California by the year of completion and calculates the total installed capacity for each year. It uses the YEAR() function to extract the year from the completion_date field and the SUM() function to calculate the total capacity.</s>"}
{"text": "<s>[INST] \nWhat is the average recycling rate for glass in the city of London for the years 2018 and 2019?\nCREATE TABLE recycling_rates (city VARCHAR(255), year INT, material_type VARCHAR(255), recycling_rate DECIMAL(5,2)); INSERT INTO recycling_rates (city, year, material_type, recycling_rate) VALUES ('London', 2018, 'Glass', 0.25), ('London', 2018, 'Plastic', 0.35), ('London', 2019, 'Glass', 0.30), ('London', 2019, 'Plastic', 0.40); \n[/INST]\nSELECT AVG(recycling_rate) FROM recycling_rates WHERE city = 'London' AND material_type = 'Glass' AND year IN (2018, 2019);\nThe SQL query calculates the average recycling rate for glass in the city of London for the years 2018 and 2019. It uses the AVG function to calculate the average recycling rate and the IN clause to filter the results for the years 2018 and 2019.</s>"}
{"text": "<s>[INST] \nWhich agencies have experienced the highest budget increase between 2019 and 2020?\nCREATE TABLE AgencyYearBudget (AgencyId INT, Year INT, Budget INT, PRIMARY KEY (AgencyId, Year)); INSERT INTO AgencyYearBudget (AgencyId, Year, Budget) VALUES (1, 2019, 5000000); INSERT INTO AgencyYearBudget (AgencyId, Year, Budget) VALUES (1, 2020, 5600000); INSERT INTO AgencyYearBudget (AgencyId, Year, Budget) VALUES (2, 2019, 4000000); INSERT INTO AgencyYearBudget (AgencyId, Year, Budget) VALUES (2, 2020, 4600000); \n[/INST]\nSELECT AgencyId, MAX(BudgetChange) as HighestBudgetIncrease FROM (SELECT AgencyId, Year, (Budget - LAG(Budget, 1) OVER (PARTITION BY AgencyId ORDER BY Year)) as BudgetChange FROM AgencyYearBudget WHERE Year IN (2019, 2020)) AS BudgetChanges GROUP BY AgencyId;\nIdentifies the agencies with the highest budget increase between 2019 and 2020.</s>"}
{"text": "<s>[INST] \nDelete records of clinics in Alabama that do not offer pediatric services.\nCREATE TABLE clinics (id INT, name TEXT, service TEXT, location TEXT); INSERT INTO clinics (id, name, service, location) VALUES (1, 'Healthcare One', 'Primary Care', 'Alabama'); INSERT INTO clinics (id, name, service, location) VALUES (2, 'Care Central', 'Pediatrics', 'Alabama'); INSERT INTO clinics (id, name, service, location) VALUES (3, 'Provider Plus', 'Geriatrics', 'Alabama'); \n[/INST]\nDELETE FROM clinics WHERE location = 'Alabama' AND service != 'Pediatrics'\nThis SQL query deletes records of clinics in Alabama that do not offer pediatric services by using the DELETE statement, filtered by the specified service and location.</s>"}
