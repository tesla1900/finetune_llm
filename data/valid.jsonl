{"text": "<s>[INST] \nHow many new broadband subscribers have there been in each region in the past quarter?\nCREATE TABLE broadband_subscribers (subscriber_id INT, subscriber_name VARCHAR(50), region VARCHAR(50), subscription_date DATE); \n[/INST]\nSELECT region, COUNT(subscriber_id) as new_subscribers FROM broadband_subscribers WHERE QUARTER(subscription_date) = QUARTER(current_date) - 1 GROUP BY region;\nThis SQL query calculates the number of new broadband subscribers in each region in the past quarter. It uses the GROUP BY clause to group the results by region, and the COUNT function to count the number of subscriber_id in each group. The WHERE clause filters the results to only include records from the past quarter.</s>"}
{"text": "<s>[INST] \nInsert a new shipment record with ID 124, warehouse ID 1, carrier ID 3, package count 600, and shipped date '2022-01-15'.\nCREATE TABLE shipment (id INT PRIMARY KEY, warehouse_id INT, carrier_id INT, package_count INT, shipped_date DATE); \n[/INST]\nINSERT INTO shipment (id, warehouse_id, carrier_id, package_count, shipped_date) VALUES (124, 1, 3, 600, '2022-01-15');\nThis SQL query inserts a new shipment record with ID 124, warehouse ID 1, carrier ID 3, package count 600, and shipped date '2022-01-15'. It does this by using the INSERT INTO statement to add a new row to the 'shipment' table, and the VALUES clause to specify the values for each column in the new row.</s>"}
{"text": "<s>[INST] \nUpdate the market access status for 'DrugF' to 'Approved'.\nCREATE TABLE market_access (drug_name TEXT, status TEXT); INSERT INTO market_access (drug_name, status) VALUES ('DrugF', 'Pending'); \n[/INST]\nUPDATE market_access SET status = 'Approved' WHERE drug_name = 'DrugF';\nThis query updates the market access status for 'DrugF' to 'Approved'.</s>"}
{"text": "<s>[INST] \nList the names and ages of healthcare workers in Canada who are above 40.\nCREATE TABLE healthcare_workers (id INT, name VARCHAR(50), age INT, gender VARCHAR(10), location VARCHAR(50)); INSERT INTO healthcare_workers (id, name, age, gender, location) VALUES (1, 'Emily Chen', 27, 'Female', 'Canada'); INSERT INTO healthcare_workers (id, name, age, gender, location) VALUES (2, 'Mohammed Ahmed', 35, 'Male', 'Canada'); \n[/INST]\nSELECT name, age FROM healthcare_workers WHERE location = 'Canada' AND age > 40;\nThis SQL query lists the names and ages of healthcare workers in Canada who are above 40 by selecting the \"name\" and \"age\" columns from the \"healthcare_workers\" table, filtering by 'Canada' in the \"location\" column and age greater than 40.</s>"}
{"text": "<s>[INST] \nCreate a view to list top 3 mobile network providers by number of subscribers\nCREATE TABLE mobile_providers (provider TEXT, subscribers INT); \n[/INST]\nCREATE VIEW top_providers AS SELECT provider, subscribers, ROW_NUMBER() OVER (ORDER BY subscribers DESC) as rank FROM mobile_providers;\nA view named 'top_providers' is created to select 'provider' and 'subscribers' columns from 'mobile_providers' table, ordered by 'subscribers' column in descending order.</s>"}
{"text": "<s>[INST] \nWhat is the minimum depth of all trenches in the Atlantic Ocean?\nCREATE TABLE atlantic_ocean (name VARCHAR(255), depth FLOAT); INSERT INTO atlantic_ocean VALUES ('Puerto Rico', 8380); \n[/INST]\nSELECT MIN(depth) FROM atlantic_ocean WHERE name = 'Puerto Rico';\nThis query calculates the minimum depth of the Atlantic Ocean by filtering the 'atlantic_ocean' table to only the 'Puerto Rico' trench and then calculating the minimum depth using the MIN function.</s>"}
{"text": "<s>[INST] \nWhat is the total number of sustainable urban properties?\nCREATE TABLE properties (id INT, sustainability_rating FLOAT, urban BOOLEAN); INSERT INTO properties (id, sustainability_rating, urban) VALUES (1, 80.5, true), (2, 60.0, false); \n[/INST]\nSELECT COUNT(*) FROM properties WHERE urban = true AND sustainability_rating IS NOT NULL;\nThis query counts the number of rows in the properties table where the property is located in an urban area (urban = true) and has a sustainability rating (sustainability_rating IS NOT NULL).</s>"}
{"text": "<s>[INST] \nAdd a new regulatory framework to the 'regulatory_frameworks' table\nCREATE TABLE regulatory_frameworks (framework_id INT PRIMARY KEY, name VARCHAR(255), description TEXT, country VARCHAR(255), enforcement_date DATE); \n[/INST]\nINSERT INTO regulatory_frameworks (framework_id, name, description, country, enforcement_date) VALUES (1, 'MiCA', 'Markets in Crypto-Assets regulation', 'European Union', '2024-01-01');\nThis query adds a new row to the 'regulatory_frameworks' table, specifying the values for all columns in the new record.</s>"}
{"text": "<s>[INST] \nHow many safety protocol violations have been recorded for each facility in 2022, and what is the total number of violations?\nCREATE TABLE facility (id INT, name VARCHAR(255)); CREATE TABLE safety_record (id INT, facility_id INT, record_date DATE, violation_count INT); INSERT INTO facility (id, name) VALUES (1, 'Facility A'), (2, 'Facility B'); INSERT INTO safety_record (id, facility_id, record_date, violation_count) VALUES (1, 1, '2022-01-01', 3), (2, 1, '2022-02-01', 2), (3, 2, '2022-01-01', 1), (4, 2, '2022-02-01', 4); \n[/INST]\nSELECT f.name, SUM(sr.violation_count) as total_violations FROM facility f INNER JOIN safety_record sr ON f.id = sr.facility_id WHERE YEAR(sr.record_date) = 2022 GROUP BY f.name;\nThis SQL query calculates how many safety protocol violations have been recorded for each facility in 2022, and what is the total number of violations. It performs an inner join between the facility and safety_record tables on the facility_id column, filters records for 2022, and groups results by facility name to calculate the total number of violations.</s>"}
{"text": "<s>[INST] \nWhat is the total value of artworks in the modern art section of the museums in Tokyo?\nCREATE TABLE tokyo_art(id INT, museum VARCHAR(30), section VARCHAR(30), value INT); INSERT INTO tokyo_art VALUES (1, 'Tokyo National Museum', 'Modern Art', 1000000); INSERT INTO tokyo_art VALUES (2, 'Mori Art Museum', 'Modern Art', 2000000); \n[/INST]\nSELECT SUM(value) FROM tokyo_art WHERE museum IN (SELECT museum FROM tokyo_art WHERE section = 'Modern Art') AND section = 'Modern Art';\nThe SQL query calculates the total value of artworks in the modern art section of the museums in Tokyo by first creating a derived table with the museums that have modern art and then calculating the sum of the value column in the derived table where the section is modern art.</s>"}
{"text": "<s>[INST] \nList the number of IoT sensors of each type that were installed in each year in the 'sensor_deployment' table.\nCREATE TABLE sensor_deployment (id INT, sensor_type VARCHAR(255), year INT, quantity INT); \n[/INST]\nSELECT sensor_type, year, SUM(quantity) as total_quantity FROM sensor_deployment GROUP BY sensor_type, year;\nThe SQL query calculates the number of IoT sensors of each type that were installed in each year in the 'sensor_deployment' table by using the SUM function on the 'quantity' column and then grouping the results by the 'sensor_type' and 'year' columns.</s>"}
{"text": "<s>[INST] \nWhat is the total revenue for OTA bookings from 'Middle East'?\nCREATE TABLE ota_bookings (booking_id INT, hotel_name TEXT, region TEXT, revenue FLOAT); INSERT INTO ota_bookings (booking_id, hotel_name, region, revenue) VALUES (1, 'Hotel H', 'Middle East', 500), (2, 'Hotel I', 'Middle East', 700), (3, 'Hotel J', 'Middle East', 400); \n[/INST]\nSELECT SUM(revenue) FROM ota_bookings WHERE region = 'Middle East';\nCalculate the total revenue for OTA bookings in the 'Middle East' region by filtering the 'region' column and then applying the SUM function.</s>"}
{"text": "<s>[INST] \nDelete all records from the \"ai_ethics_training\" table where the \"training_date\" is before 2021-01-01\nCREATE TABLE ai_ethics_training (id INT PRIMARY KEY, employee_name VARCHAR(50), training_date DATE); INSERT INTO ai_ethics_training (id, employee_name, training_date) VALUES (1, 'Alice Johnson', '2021-02-01'); INSERT INTO ai_ethics_training (id, employee_name, training_date) VALUES (2, 'Bob Williams', '2020-12-15'); \n[/INST]\nDELETE FROM ai_ethics_training WHERE training_date < '2021-01-01';\nThis SQL query deletes all records from the \"ai_ethics_training\" table where the \"training_date\" is before 2021-01-01. It uses the DELETE statement with a WHERE clause to filter the records based on the given condition.</s>"}
{"text": "<s>[INST] \nList all companies that have had an exit strategy through an IPO\nCREATE TABLE company (id INT, name TEXT, exit_strategy TEXT); INSERT INTO company (id, name, exit_strategy) VALUES (1, 'Delta Inc', 'IPO'); INSERT INTO company (id, name, exit_strategy) VALUES (2, 'Epsilon Corp', 'Acquisition'); INSERT INTO company (id, name, exit_strategy) VALUES (3, 'Zeta Inc', NULL); INSERT INTO company (id, name, exit_strategy) VALUES (4, 'Eta Corp', 'Bankruptcy'); \n[/INST]\nSELECT id, name FROM company WHERE exit_strategy = 'IPO';\nThis query selects the id and name from the company table where the exit_strategy is an IPO.</s>"}
{"text": "<s>[INST] \nIdentify the number of oil spills recorded for vessels in the Gulf of Mexico from 2019 to 2021?\nCREATE TABLE Region (region_id INT PRIMARY KEY, region_name VARCHAR(255)); INSERT INTO Region (region_id, region_name) VALUES (1, 'Gulf of Mexico'); CREATE TABLE Vessel (vessel_id INT PRIMARY KEY, vessel_name VARCHAR(255), region_id INT); CREATE TABLE Incident (incident_id INT PRIMARY KEY, incident_type VARCHAR(255), vessel_id INT); \n[/INST]\nSELECT COUNT(*) FROM Incident I JOIN Vessel V ON I.vessel_id = V.vessel_id JOIN Region R ON V.region_id = R.region_id WHERE R.region_name = 'Gulf of Mexico' AND I.incident_type = 'oil spill' AND I.incident_date >= '2019-01-01' AND I.incident_date < '2022-01-01';\nThe SQL query identifies the number of oil spills recorded for vessels in the Gulf of Mexico from 2019 to 2021. It first joins the Incident, Vessel, and Region tables on the relevant fields. Then it filters the records based on the region_name as Gulf of Mexico, incident_type as oil spill, and incident_date from 2019-01-01 to 2021-12-31. Lastly, it counts the number of incidents using the COUNT function.</s>"}
{"text": "<s>[INST] \nWhat is the average age of attendees at the 'Art in the Park' event?\nCREATE TABLE EventAttendance (event_name VARCHAR(50), attendee_age INT, attendee_gender VARCHAR(10)); INSERT INTO EventAttendance (event_name, attendee_age, attendee_gender) VALUES ('Art in the Park', 35, 'Female'); INSERT INTO EventAttendance (event_name, attendee_age, attendee_gender) VALUES ('Art in the Park', 42, 'Male'); \n[/INST]\nSELECT AVG(attendee_age) FROM EventAttendance WHERE event_name = 'Art in the Park';\nThis SQL query calculates the average age of attendees at the 'Art in the Park' event by selecting the attendee_age column and calculating the average using the AVG() function. The WHERE clause filters for the 'Art in the Park' event.</s>"}
{"text": "<s>[INST] \nWhat is the maximum safety incident rate for each chemical plant in the past year, and the corresponding incident type?\nCREATE TABLE plant_safety (plant_id INT, incident_date DATE, plant_location TEXT, incident_type TEXT, incident_rate FLOAT); INSERT INTO plant_safety (plant_id, incident_date, plant_location, incident_type, incident_rate) VALUES (1, '2021-01-15', 'Plant A', 'Chemical Spill', 0.01), (2, '2021-02-20', 'Plant B', 'Fire', 0.02), (3, '2021-03-05', 'Plant C', 'Equipment Failure', 0.03); \n[/INST]\nSELECT plant_location, incident_type, MAX(incident_rate) AS max_rate FROM plant_safety WHERE incident_date >= DATEADD(year, -1, CURRENT_DATE) GROUP BY plant_location, incident_type;\nThis query finds the maximum safety incident rate for each chemical plant in the past year and the corresponding incident type by filtering the data with the WHERE clause and using the DATEADD function. It partitions the data by plant location and incident type and calculates the maximum incident rate for each group by using the MAX function. The results are grouped by the plant location and the incident type.</s>"}
{"text": "<s>[INST] \nHow many support programs were implemented in each region?\nCREATE TABLE SupportPrograms (ProgramID INT, ProgramName VARCHAR(50), Region VARCHAR(50)); INSERT INTO SupportPrograms VALUES (1, 'Buddy Program', 'Northeast'), (2, 'Mentorship Program', 'Southeast'), (3, 'Tutoring Program', 'Midwest'), (4, 'Peer Mentoring', 'Southwest'), (5, 'Adaptive Technology Lab', 'West'); \n[/INST]\nSELECT Region, COUNT(ProgramName) FROM SupportPrograms GROUP BY Region;\nThis query calculates the number of support programs for each region by using the COUNT function on the ProgramName column, grouped by the Region column.</s>"}
{"text": "<s>[INST] \nWho are the vendors and their corresponding employee names who have been involved in the awarding of cybersecurity contracts?\nCREATE TABLE Contracts (ContractID INT, ContractType VARCHAR(50), ContractAmount DECIMAL(10,2), MilitaryBranch VARCHAR(50), PRIMARY KEY (ContractID)); CREATE TABLE Vendors (VendorID INT, VendorName VARCHAR(50), VendorLocation VARCHAR(50), ContactPerson VARCHAR(50)); CREATE TABLE Employees (EmployeeID INT, EmployeeName VARCHAR(50), EmployeePosition VARCHAR(50), VendorID INT, PRIMARY KEY (EmployeeID)); \n[/INST]\nSELECT Vendors.VendorName, Employees.EmployeeName FROM Contracts INNER JOIN Vendors ON Contracts.MilitaryBranch = Vendors.VendorLocation INNER JOIN Employees ON Vendors.VendorID = Employees.VendorID WHERE ContractType = 'Cybersecurity Contract';\nThis SQL query retrieves the VendorName and EmployeeName for all cybersecurity contracts from the Contracts, Vendors, and Employees tables where the ContractType is 'Cybersecurity Contract'. It uses two INNER JOINs to combine the three tables based on their MilitaryBranch and VendorID.</s>"}
{"text": "<s>[INST] \nWhat is the maximum timeline for completing construction projects in Chicago, categorized by project type?\nCREATE TABLE Project_Timelines_Chicago (ProjectID INT, City VARCHAR(50), ProjectType VARCHAR(50), Timeline INT); \n[/INST]\nSELECT ProjectType, MAX(Timeline) FROM Project_Timelines_Chicago WHERE City = 'Chicago' GROUP BY ProjectType;\nThis query calculates the maximum timeline for completing construction projects in Chicago, categorized by project type by using the MAX function on the Timeline column, filtering for rows with City 'Chicago' and grouping by ProjectType.</s>"}
{"text": "<s>[INST] \nWhat is the maximum construction cost per square meter for buildings in 'East Asia'?\nCREATE TABLE Buildings (id INT, name TEXT, location TEXT, cost_per_sqm FLOAT); INSERT INTO Buildings (id, name, location, cost_per_sqm) VALUES (1, 'BuildingA', 'East Asia', 8000.00), (2, 'BuildingB', 'East Asia', 9000.50), (3, 'BuildingC', 'East Asia', 7500.25); \n[/INST]\nSELECT MAX(cost_per_sqm) FROM Buildings WHERE location = 'East Asia';\nThis query calculates the maximum construction cost per square meter for buildings located in 'East Asia'. It does this by using the MAX function to find the maximum value of the 'cost_per_sqm' column for all rows where the 'location' column is equal to 'East Asia'.</s>"}
{"text": "<s>[INST] \nUpdate the email addresses of users who have made donations in the last month in the users table\nCREATE TABLE users (id INT, name VARCHAR(50), email VARCHAR(50)); CREATE TABLE donors (id INT, user_id INT, donation_date DATE, donation_amount DECIMAL); \n[/INST]\nUPDATE users u INNER JOIN donors d ON u.id = d.user_id SET u.email = CONCAT(u.email, '_new') WHERE d.donation_date > DATE_SUB(CURDATE(), INTERVAL 1 MONTH);\nThis query updates the email addresses of users who have made donations in the last month in the users table. It uses the UPDATE statement, an INNER JOIN to combine the users and donors tables, and the SET clause to update the email addresses by concatenating the original email address with '_new'. It filters the records based on the donation_date using the DATE_SUB function and CURDATE().</s>"}
{"text": "<s>[INST] \nWhich vessels are near the coast of Argentina?\nCREATE TABLE vessels(id INT, name TEXT, longitude FLOAT, latitude FLOAT); INSERT INTO vessels VALUES (1, 'VesselA', -58.5034, -34.6037), (7, 'VesselG', -65.0178, -37.8140); \n[/INST]\nSELECT DISTINCT name FROM vessels WHERE longitude BETWEEN -74.0356 AND -54.8258 AND latitude BETWEEN -55.0216 AND -33.4294;\nFind vessels near the coast of Argentina by filtering longitude and latitude values within the specified range.</s>"}
{"text": "<s>[INST] \nWhat is the average ESG score for companies in the technology sector?\nCREATE TABLE companies (company_id INT, sector VARCHAR(50), esg_score FLOAT); INSERT INTO companies (company_id, sector, esg_score) VALUES (1, 'Technology', 72.5), (2, 'Finance', 80.1), (3, 'Technology', 69.8); \n[/INST]\nSELECT AVG(esg_score) FROM companies WHERE sector = 'Technology';\nThis query calculates the average ESG score for companies in the technology sector. It does this by selecting the average (AVG) of the esg_score column, where the sector is 'Technology'.</s>"}
{"text": "<s>[INST] \nWhat is the minimum weekly production of Yttrium in 2019 from the Weekly_Production table?\nCREATE TABLE Weekly_Production (week INT, yttrium_production FLOAT); \n[/INST]\nSELECT MIN(yttrium_production) FROM Weekly_Production WHERE EXTRACT(YEAR FROM to_date(week, 'IW')) = 2019;\nThe SQL query calculates the minimum weekly production of Yttrium in 2019. It does this by converting the week number to a date and filtering the Weekly_Production table for the year 2019, and then calculating the minimum Yttrium production.</s>"}
{"text": "<s>[INST] \nWhat is the distribution of article word counts for a specific language?\nCREATE TABLE word_count_lang (id INT PRIMARY KEY, article_id INT, language VARCHAR(50), word_count INT, FOREIGN KEY (article_id) REFERENCES articles(id)); \n[/INST]\nSELECT language, word_count, COUNT(*) as total FROM word_count_lang GROUP BY language, word_count;\nThis query groups the word_count_lang table by the language and word_count column, and then calculates the count of articles for each combination of language and word count.</s>"}
{"text": "<s>[INST] \nlist all tables and their columns\nCREATE TABLE exhibition_statistics (exhibit_id INT, attendance INT); CREATE TABLE visitor_demographics (age INT, gender VARCHAR(10)); \n[/INST]\nSELECT table_name, column_name FROM information_schema.columns;\nThe query retrieves all tables and their respective columns from the information schema, providing a list of all columns in the database.</s>"}
{"text": "<s>[INST] \nList the teams and the number of games they have won and lost in the \"nba_games\" table\nCREATE TABLE nba_games (team VARCHAR(255), games_played INTEGER, games_won INTEGER); \n[/INST]\nSELECT team, SUM(games_won) as total_wins, SUM(games_played - games_won) as total_losses FROM nba_games GROUP BY team;\nThis query lists the teams and the number of games they have won and lost in the \"nba_games\" table by grouping the table by the \"team\" column and calculating the sum of the \"games_won\" and \"games_played - games_won\" columns for each group.</s>"}
{"text": "<s>[INST] \nUpdate the price of cannabis for strain_id 3 sold by Dispensary A in Arizona to $70\nCREATE TABLE dispensaries (id INT, name TEXT, state TEXT); CREATE TABLE sales (dispensary_id INT, strain_id INT, quantity INT, price DECIMAL(10,2), sale_date DATE); INSERT INTO dispensaries (id, name, state) VALUES (1, 'Dispensary A', 'Arizona'); INSERT INTO sales (dispensary_id, strain_id, quantity, price, sale_date) VALUES (1, 1, 10, 50, '2022-04-01'); INSERT INTO sales (dispensary_id, strain_id, quantity, price, sale_date) VALUES (1, 2, 15, 60, '2022-04-15'); \n[/INST]\nUPDATE sales SET price = 70 WHERE dispensary_id = 1 AND strain_id = 3;\nUpdate the price of cannabis for strain_id 3 sold by Dispensary A in Arizona to $70.</s>"}
{"text": "<s>[INST] \nAdd a new smart contract to the 'smart_contracts' table\nCREATE TABLE smart_contracts (contract_id INT PRIMARY KEY, address VARCHAR(42), creator VARCHAR(42), language VARCHAR(50), creation_time TIMESTAMP); \n[/INST]\nINSERT INTO smart_contracts (contract_id, address, creator, language, creation_time) VALUES (1, '0xdef456', 'JaneDoe', 'Solidity', '2022-12-25 12:34:56');\nThis query adds a new row to the 'smart_contracts' table, specifying the values for all columns in the new record.</s>"}
{"text": "<s>[INST] \nIdentify dispensaries with more than 500 sales in the last week, and update their status to 'High Volume'.\nCREATE TABLE Dispensaries (DispensaryID INT, DispensaryName VARCHAR(50), Status VARCHAR(50)); \n[/INST]\nUPDATE D SET Status = 'High Volume' FROM Dispensaries D JOIN (SELECT DispensaryID FROM Sales WHERE SaleDate >= DATEADD(day, -7, GETDATE()) GROUP BY DispensaryID HAVING COUNT(*) > 500) S ON D.DispensaryID = S.DispensaryID;\nIdentify dispensaries with more than 500 sales in the last week, then update their status to 'High Volume'.</s>"}
{"text": "<s>[INST] \nWhat is the total number of farmers who received training in sustainable farming practices in the region of 'Andalusia' in 2020?\nCREATE TABLE farmers (id INT, name VARCHAR(255), region VARCHAR(255), training_year INT, training_topic VARCHAR(255)); INSERT INTO farmers (id, name, region, training_year, training_topic) VALUES (1, 'Juan Lopez', 'Andalusia', 2020, 'Sustainable Farming'); \n[/INST]\nSELECT COUNT(*) FROM farmers WHERE region = 'Andalusia' AND training_topic = 'Sustainable Farming' AND training_year = 2020;\nThis query counts the number of records in the 'farmers' table where the 'region' is 'Andalusia', the 'training_topic' is 'Sustainable Farming', and the 'training_year' is 2020.</s>"}
{"text": "<s>[INST] \nWhat are the buildings with the most recent certifications?\nCREATE TABLE green_building_certifications (id INT, building_id INT, certification_type VARCHAR(255), certification_year INT, PRIMARY KEY(id)); INSERT INTO green_building_certifications (id, building_id, certification_type, certification_year) VALUES (1, 1004, 'EDGE', 2022), (2, 1005, 'LEED', 2020), (3, 1006, 'BREEAM', 2019), (4, 1007, 'Green Star', 2021); \n[/INST]\nSELECT building_id, certification_type, certification_year, ROW_NUMBER() OVER (PARTITION BY building_id ORDER BY certification_year DESC) as ranking FROM green_building_certifications WHERE ranking = 1;\nThis query partitions the data by building_id and orders it by certification_year in descending order. The WHERE clause filters the results to only include the most recent certification per building.</s>"}
{"text": "<s>[INST] \nWhat was the highest daily energy production from renewable sources in Antarctica in January 2022?\nCREATE TABLE daily_renewable_production (date DATE, region VARCHAR(255), production FLOAT); INSERT INTO daily_renewable_production (date, region, production) VALUES ('2022-01-01', 'Antarctica', 50), ('2022-01-02', 'Antarctica', 55), ('2022-01-03', 'Antarctica', 60); \n[/INST]\nSELECT MAX(production) FROM daily_renewable_production WHERE region = 'Antarctica' AND date BETWEEN '2022-01-01' AND '2022-01-31'\nThis SQL query identifies the maximum daily energy production from renewable sources in Antarctica in January 2022 using the MAX function.</s>"}
{"text": "<s>[INST] \nWhat is the total value of contract negotiations with the US government in the current fiscal year?\nCREATE TABLE contract_negotiations (id INT, contract_name VARCHAR(50), negotiation_date DATE, customer VARCHAR(50), value DECIMAL(10,2)); \n[/INST]\nSELECT SUM(value) as total_value FROM contract_negotiations WHERE customer = 'US government' AND negotiation_date >= DATEADD(year, DATEDIFF(year, 0, GETDATE()), 0) AND negotiation_date < DATEADD(year, DATEDIFF(year, 0, GETDATE()) + 1, 0);\nThis SQL query calculates the total value of contract negotiations with the US government in the current fiscal year. It first filters the contract_negotiations table to only include rows where the customer is 'US government' and the negotiation_date is within the current fiscal year. Then, it uses the SUM function to add up the value of the contract negotiations.</s>"}
{"text": "<s>[INST] \nHow many mobile subscribers are there in the 'urban' region?\nCREATE TABLE subscribers (id INT, type TEXT, region TEXT); INSERT INTO subscribers (id, type, region) VALUES (1, 'mobile', 'urban'); INSERT INTO subscribers (id, type, region) VALUES (2, 'broadband', 'urban'); INSERT INTO subscribers (id, type, region) VALUES (3, 'mobile', 'rural'); \n[/INST]\n SELECT COUNT(*) FROM subscribers WHERE type = 'mobile' AND region = 'urban'; \nThis query counts the number of mobile subscribers in the 'urban' region. It does this by using the COUNT function on the entire table, and filtering the table to only include rows where the type is 'mobile' and the region is 'urban'.</s>"}
{"text": "<s>[INST] \nWhat is the total amount donated by individual donors who have donated more than once in the last 12 months, and their names?\nCREATE TABLE donors(id INT, name TEXT, total_donation FLOAT);CREATE TABLE donations(id INT, donor_id INT, amount FLOAT, donation_date DATE); \n[/INST]\nSELECT d.name, SUM(donations.amount) as total_donation FROM donations JOIN donors ON donations.donor_id = donors.id WHERE donations.donation_date BETWEEN DATE_SUB(CURDATE(), INTERVAL 12 MONTH) AND CURDATE() GROUP BY donors.id HAVING COUNT(donations.id) > 1;\nThe SQL query first joins the donations table with the donors table on the donor_id and id columns respectively. Then, it filters the records where the donation_date is within the last 12 months. Next, it groups the records by the id of the donors table and applies a HAVING clause to only include those donors who have donated more than once. Finally, it calculates the total donation by each of these donors and returns their names and total donation amounts.</s>"}
{"text": "<s>[INST] \nWhat is the total number of smart city technology adoptions in cities in Canada, in the last 3 years?\nCREATE TABLE canada_tech (id INT, city VARCHAR(20), country VARCHAR(20), adoption_year INT, adoption_rate FLOAT); INSERT INTO canada_tech (id, city, country, adoption_year, adoption_rate) VALUES (1, 'Toronto', 'Canada', 2018, 0.75), (2, 'Montreal', 'Canada', 2019, 0.82), (3, 'Vancouver', 'Canada', 2020, 0.88); \n[/INST]\nSELECT COUNT(*) FROM canada_tech WHERE country = 'Canada' AND adoption_year BETWEEN 2018 AND 2020;\nThis SQL query calculates the total number of smart city technology adoptions in cities in Canada, in the last 3 years. It does this by using the COUNT() aggregation function and filtering the rows based on the country and adoption_year columns using the WHERE clause.</s>"}
{"text": "<s>[INST] \nWhich communities in California have the highest water usage per capita?\nCREATE TABLE communities (id INT, name TEXT, state TEXT, water_usage FLOAT); INSERT INTO communities (id, name, state, water_usage) VALUES (1, 'Los Angeles', 'California', 150), (2, 'San Francisco', 'California', 80), (3, 'San Diego', 'California', 120); \n[/INST]\nSELECT name, AVG(water_usage) as avg_water_usage FROM communities WHERE state = 'California' GROUP BY name ORDER BY avg_water_usage DESC LIMIT 1;\nThis query calculates the average water usage per capita for each community in California by grouping the records based on the community name and calculating the average water usage. It then orders the results in descending order based on the average water usage and returns only the top record, which corresponds to the community with the highest water usage per capita in California.</s>"}
{"text": "<s>[INST] \nWhat is the minimum and maximum property price in the city of Portland?\nCREATE TABLE Properties (id INT, price INT, city TEXT); INSERT INTO Properties (id, price, city) VALUES (1, 600000, 'Portland'), (2, 500000, 'Seattle'), (3, 800000, 'Portland'), (4, 700000, 'Denver'); \n[/INST]\nSELECT MIN(price) AS min_price, MAX(price) AS max_price FROM Properties WHERE city = 'Portland';\nThis SQL query calculates the minimum and maximum property price in the city of Portland. It achieves this by filtering the records where the city column is Portland, and then calculating the minimum and maximum price of the remaining records.</s>"}
{"text": "<s>[INST] \nHow many climate mitigation projects are in 'South America'?\nCREATE TABLE climate_mitigation (project_id INTEGER, project_name TEXT, location TEXT); INSERT INTO climate_mitigation (project_id, project_name, location) VALUES (1, 'Project D', 'South America'), (2, 'Project E', 'North America'); \n[/INST]\nSELECT COUNT(*) FROM climate_mitigation WHERE location = 'South America';\nThis query counts the number of climate mitigation projects in 'South America' by selecting the count of all records where 'location' is 'South America'.</s>"}
{"text": "<s>[INST] \nHow many times has the most popular vegan dish been ordered?\nCREATE TABLE Menu (id INT, dish_name VARCHAR(255), dish_type VARCHAR(255), popularity INT); INSERT INTO Menu (id, dish_name, dish_type, popularity) VALUES (1, 'Tofu Stir Fry', 'Vegan', 150), (2, 'Black Bean Burger', 'Vegan', 200), (3, 'Chickpea Curry', 'Vegan', 250); \n[/INST]\nSELECT MAX(popularity) FROM Menu WHERE dish_type = 'Vegan';\nThe SQL query finds the maximum popularity value for vegan dishes, which represents the number of times the most popular vegan dish has been ordered.</s>"}
{"text": "<s>[INST] \nWhat is the change in average precipitation in a specific region over time?\nCREATE TABLE weather (id INT, location VARCHAR(50), precipitation INT, year INT, country VARCHAR(50)); INSERT INTO weather (id, location, precipitation, year, country) VALUES (1, 'Darjeeling', 100, 2020, 'India'); \n[/INST]\nSELECT year, AVG(precipitation) - (SELECT AVG(precipitation) FROM weather WHERE location = weather.location AND year = weather.year - 1) FROM weather WHERE location = 'Darjeeling' AND country = 'India' GROUP BY year ORDER BY year ASC;\nThis query calculates the change in average precipitation in a specific region over time by subtracting the previous year's average precipitation from the current year's average precipitation where the location is 'Darjeeling' and the year is greater than 2019.</s>"}
{"text": "<s>[INST] \nDelete records with a 'resource_id' of 701 from the 'open_education_resources' table\nCREATE TABLE open_education_resources (resource_id INT PRIMARY KEY, title VARCHAR(100), description TEXT, license VARCHAR(50)); \n[/INST]\nDELETE FROM open_education_resources WHERE resource_id = 701;\nDelete the record with a 'resource_id' of 701 from the 'open_education_resources' table.</s>"}
{"text": "<s>[INST] \nDetermine the number of polyester garments sold in Canada\nCREATE TABLE sales (id INT, garment_id INT, country VARCHAR(255)); CREATE TABLE garments (id INT, garment_type VARCHAR(255), material VARCHAR(255)); \n[/INST]\nSELECT COUNT(*) FROM sales JOIN garments ON sales.garment_id = garments.id WHERE garments.material = 'Polyester' AND sales.country = 'Canada';\nThis query determines the number of polyester garments sold in Canada by joining the sales and garments tables and applying the COUNT function to the result. It only considers sales that involve polyester garments and are made in Canada.</s>"}
{"text": "<s>[INST] \nWhat is the total number of packages shipped to California from all warehouses in Q1 2021?\nCREATE TABLE packages (id INT, shipment_state VARCHAR(20), warehouse VARCHAR(20), quarter INT); INSERT INTO packages (id, shipment_state, warehouse, quarter) VALUES (1, 'California', 'Los Angeles', 1), (2, 'Texas', 'Houston', 2), (3, 'California', 'San Francisco', 1); CREATE TABLE warehouses (id INT, name VARCHAR(20)); INSERT INTO warehouses (id, name) VALUES (1, 'Los Angeles'), (2, 'Houston'), (3, 'San Francisco'); \n[/INST]\nSELECT COUNT(*) FROM packages p JOIN warehouses w ON p.warehouse = w.name WHERE p.shipment_state = 'California' AND p.quarter = 1;\nThe SQL query calculates the total number of packages shipped to California by counting the number of rows in the packages table, filtered by the shipment state and quarter. It uses an inner join to combine the packages and warehouses tables on the warehouse column.</s>"}
{"text": "<s>[INST] \nWhat is the maximum environmental impact score for mining projects in Europe?\nCREATE TABLE environmental_impact (project_id INT, region TEXT, score INT); INSERT INTO environmental_impact (project_id, region, score) VALUES (1, 'Europe', 80), (2, 'Europe', 90); \n[/INST]\nSELECT MAX(score) FROM environmental_impact WHERE region = 'Europe';\nThis SQL query calculates the maximum environmental impact score for mining projects in Europe by selecting the maximum score column where region is 'Europe'.</s>"}
{"text": "<s>[INST] \nWhat is the total number of decentralized applications created by developers from India?\nCREATE TABLE decentralized_applications (id INT, name VARCHAR, developer_country VARCHAR); INSERT INTO decentralized_applications (id, name, developer_country) VALUES (1, 'DA1', 'India'), (2, 'DA2', 'USA'), (3, 'DA3', 'Germany'), (4, 'DA4', 'Brazil'), (5, 'DA5', 'India'), (6, 'DA6', 'Nigeria'); \n[/INST]\nSELECT COUNT(*) FROM decentralized_applications WHERE developer_country = 'India';\nThe SQL query counts the number of records in the decentralized_applications table where the developer_country is 'India'.</s>"}
{"text": "<s>[INST] \nupdate rating for tv show 'Breaking Bad' in the tv_shows table\nCREATE TABLE tv_shows(id INT PRIMARY KEY, name VARCHAR(255), rating INT); \n[/INST]\nUPDATE tv_shows SET rating = 9 WHERE name = 'Breaking Bad';\nThe rating for the tv show 'Breaking Bad' is updated to 9 in the tv_shows table.</s>"}
{"text": "<s>[INST] \nWho is the researcher with the lowest contribution to AI safety?\nCREATE TABLE safety_research (researcher_name TEXT, contributions INTEGER); INSERT INTO safety_research (researcher_name, contributions) VALUES ('Researcher E', 5), ('Researcher F', 7), ('Researcher G', 3), ('Researcher H', 6); \n[/INST]\nSELECT researcher_name FROM safety_research ORDER BY contributions ASC LIMIT 1;\nSelect the researcher with the least contributions from the 'safety_research' table.</s>"}
{"text": "<s>[INST] \nUpdate the depth of the record with id 2 in the table \"deep_sea_exploration\" to 5000\nCREATE TABLE deep_sea_exploration (id INT, location VARCHAR(50), depth INT, date DATE); \n[/INST]\nUPDATE deep_sea_exploration SET depth = 5000 WHERE id = 2;\nThis query updates the depth of the record with id 2 in the \"deep_sea_exploration\" table to 5000.</s>"}
{"text": "<s>[INST] \nFind the average retail price of unisex garments made from Tencel in South Korea.\nCREATE TABLE garments (id INT, category VARCHAR(255), subcategory VARCHAR(255), gender VARCHAR(50), material VARCHAR(50), price DECIMAL(10, 2), country VARCHAR(50)); INSERT INTO garments (id, category, subcategory, gender, material, price, country) VALUES (1, 'Tops', 'T-Shirts', 'Unisex', 'Tencel', 29.99, 'South Korea'); INSERT INTO garments (id, category, subcategory, gender, material, price, country) VALUES (2, 'Bottoms', 'Pants', 'Unisex', 'Tencel', 39.99, 'South Korea'); \n[/INST]\nSELECT AVG(price) FROM garments WHERE gender = 'Unisex' AND material = 'Tencel' AND country = 'South Korea';\nThis SQL query calculates the average retail price of unisex garments made from Tencel in South Korea.</s>"}
{"text": "<s>[INST] \nWhat is the total cost of defense contracts signed in the UK and France?\nCREATE TABLE defense_contracts (id INT, country VARCHAR(50), cost FLOAT); INSERT INTO defense_contracts (id, country, cost) VALUES (1, 'UK', 1250000), (2, 'UK', 800000), (3, 'France', 920000); INSERT INTO defense_contracts (id, country, cost) VALUES (4, 'France', 1300000); \n[/INST]\nSELECT SUM(cost) FROM defense_contracts WHERE country IN ('UK', 'France');\nThis query calculates the total cost of defense contracts signed in the UK and France by selecting the SUM function on the cost column, filtering the data where the country is either UK or France.</s>"}
{"text": "<s>[INST] \nWhat is the total number of mobile and broadband subscribers for each network type?\nCREATE TABLE subscriber_data (subscriber_type VARCHAR(20), network_type VARCHAR(20), subscriber_count INT); INSERT INTO subscriber_data (subscriber_type, network_type, subscriber_count) VALUES ('Mobile', '4G', 5000), ('Broadband', 'Fiber', 3000), ('Mobile', '5G', 7000), ('Broadband', 'Cable', 4000); \n[/INST]\nSELECT network_type, SUM(subscriber_count) FROM subscriber_data GROUP BY network_type;\nThe SQL query calculates the total number of mobile and broadband subscribers for each network type by grouping the records based on the 'network_type' column and then applying the SUM function on the 'subscriber_count' column.</s>"}
{"text": "<s>[INST] \nWhat is the average depth of ocean floor mapping projects in the Pacific region where the maximum depth is greater than 6000 meters?\nCREATE TABLE ocean_floor_mapping(id INT, region VARCHAR(20), depth FLOAT); INSERT INTO ocean_floor_mapping(id, region, depth) VALUES (1, 'Pacific', 5000.5), (2, 'Atlantic', 4500.3), (3, 'Pacific', 6200.7), (4, 'Indian', 4200.0); \n[/INST]\nSELECT AVG(depth) FROM ocean_floor_mapping WHERE region = 'Pacific' HAVING MAX(depth) > 6000;\n1. Filter the Pacific region data.   2. Check if the max depth is greater than 6000.   3. Calculate the average depth for the filtered data.</s>"}
{"text": "<s>[INST] \nWhat is the total billing amount for each client?\nCREATE TABLE clients (client_id INT, client_name VARCHAR(255)); INSERT INTO clients (client_id, client_name) VALUES (1, 'Acme Inc'), (2, 'Beta Corp'); CREATE TABLE billing (bill_id INT, client_id INT, amount DECIMAL(10, 2)); INSERT INTO billing (bill_id, client_id, amount) VALUES (1, 1, 500.00), (2, 1, 250.00), (3, 2, 750.00); \n[/INST]\nSELECT c.client_name, SUM(b.amount) as total_billing FROM clients c INNER JOIN billing b ON c.client_id = b.client_id GROUP BY c.client_id, c.client_name;\nThe SQL query performs an inner join between the clients and billing tables, joining on the client_id field. It then calculates the total billing amount for each client by grouping the results by the client_id and client_name fields and summing the amount field.</s>"}
{"text": "<s>[INST] \nWhat is the total revenue of sustainable tourism in Barcelona in 2021?\nCREATE TABLE tourism_revenue (year INT, city TEXT, revenue FLOAT); INSERT INTO tourism_revenue (year, city, revenue) VALUES (2021, 'Barcelona', 200000), (2022, 'Barcelona', 250000); \n[/INST]\nSELECT SUM(revenue) FROM tourism_revenue WHERE city = 'Barcelona' AND year = 2021;\nThis query calculates the total revenue of sustainable tourism in Barcelona in 2021. It does so by using the SUM function on the revenue column and filtering the rows with the WHERE clause to only consider the revenue in Barcelona in 2021.</s>"}
{"text": "<s>[INST] \nUpdate the pallet count for shipment ID 150 to 750, if the current pallet count is less than 750.\nCREATE TABLE shipment (id INT PRIMARY KEY, warehouse_id INT, carrier_id INT, pallet_count INT, shipped_date DATE); \n[/INST]\nUPDATE shipment SET pallet_count = 750 WHERE id = 150 AND pallet_count < 750;\nThis SQL query updates the pallet count for shipment ID 150 to 750, if the current pallet count is less than 750. It does this by using the UPDATE statement to modify the 'shipment' table, and the WHERE clause to only update rows where the ID is 150 and the pallet count is less than 750.</s>"}
{"text": "<s>[INST] \nHow many instances of disinformation were detected in blogs in South America in the last month?\nCREATE TABLE disinformation_detections (id INT, date DATE, source VARCHAR(255), location VARCHAR(255)); INSERT INTO disinformation_detections (id, date, source, location) VALUES (4, '2023-02-01', 'Blog 1', 'South America'), (5, '2023-02-02', 'Blog 2', 'South America'), (6, '2023-02-03', 'Blog 3', 'South America'); \n[/INST]\nSELECT COUNT(*) FROM disinformation_detections WHERE location = 'South America' AND source LIKE '%Blog%' AND date >= DATEADD(month, -1, GETDATE());\nThis query counts the number of instances of disinformation detected in blogs in South America in the last month by filtering the 'disinformation_detections' table for locations in South America, sources containing 'Blog', and dates within the last month.</s>"}
{"text": "<s>[INST] \nFind the average rating of children's books written by authors from Asia.\nCREATE TABLE books (title VARCHAR(255), author VARCHAR(100), rating DECIMAL(3,2), category VARCHAR(50)); CREATE VIEW children_books AS SELECT DISTINCT title FROM books WHERE category = 'children'; CREATE VIEW authors_from_asia AS SELECT DISTINCT author FROM authors WHERE country IN ('India', 'China', 'Japan', 'South Korea', 'Indonesia'); \n[/INST]\nSELECT AVG(rating) FROM books JOIN children_books ON books.title = children_books.title JOIN authors_from_asia ON books.author = authors_from_asia.author WHERE category = 'children';\nJoin the books table with children_books view and authors_from_asia view based on title and author columns, filter the rows where category is 'children' and apply the AVG function on rating column to get the average rating of children's books written by authors from Asia.</s>"}
{"text": "<s>[INST] \nList all projects with their respective costs in the 'Roads' category.\nCREATE TABLE InfrastructureProjects (id INT, category VARCHAR(20), cost FLOAT); INSERT INTO InfrastructureProjects (id, category, cost) VALUES (1, 'Roads', 500000), (2, 'Bridges', 750000), (3, 'Buildings', 900000), (4, 'Roads', 600000); \n[/INST]\nSELECT * FROM InfrastructureProjects WHERE category = 'Roads';\nThis query retrieves all columns (id, category, cost) from the 'InfrastructureProjects' table where 'category' equals 'Roads'.</s>"}
{"text": "<s>[INST] \nWhat is the total production capacity per country for garment manufacturers?\nCREATE TABLE manufacturers (id INT, name VARCHAR(255), country VARCHAR(255), production_capacity INT); \n[/INST]\nSELECT country, SUM(production_capacity) as total_capacity FROM manufacturers GROUP BY country;\nThis query calculates the total production capacity per country for garment manufacturers by grouping the manufacturers table by country and aggregating production_capacity column.</s>"}
{"text": "<s>[INST] \nWhat is the average weight of containers shipped from the Port of Kolkata to India in 2019?\nCREATE TABLE ports (port_id INT, port_name TEXT, country TEXT);CREATE TABLE shipments (shipment_id INT, shipment_weight INT, ship_date DATE, port_id INT); INSERT INTO ports VALUES (1, 'Port of Kolkata', 'India'), (2, 'Port of Chennai', 'India'); INSERT INTO shipments VALUES (1, 2000, '2019-01-01', 1), (2, 1500, '2019-02-15', 2); \n[/INST]\nSELECT AVG(shipment_weight) FROM shipments JOIN ports ON shipments.port_id = ports.port_id WHERE ports.country = 'India' AND ports.port_name IN ('Port of Kolkata', 'Port of Chennai') AND ship_date BETWEEN '2019-01-01' AND '2019-12-31';\nThis SQL query calculates the average weight of containers shipped from the Port of Kolkata to India by joining the shipments and ports tables on the port_id column. It then filters the records based on the conditions specified in the WHERE clause and finally calculates the average weight of the shipments using the AVG function.</s>"}
{"text": "<s>[INST] \nHow many female biotech entrepreneurs in Brazil have successfully raised series A funding?\nCREATE TABLE entrepreneurs (id INT, name TEXT, gender TEXT, industry TEXT, funding_round TEXT, country TEXT); INSERT INTO entrepreneurs (id, name, gender, industry, funding_round, country) VALUES (1, 'Ana', 'Female', 'Biotech', 'Series A', 'Brazil'); \n[/INST]\nSELECT COUNT(*) FROM entrepreneurs WHERE gender = 'Female' AND industry = 'Biotech' AND country = 'Brazil' AND funding_round = 'Series A';\nThis query calculates the number of female biotech entrepreneurs in Brazil that have successfully raised series A funding. It filters the entrepreneurs table by gender, industry, country, and funding_round, then counts the number of resulting rows.</s>"}
{"text": "<s>[INST] \nHow many products are made with recycled materials in each category?\nCREATE TABLE products (product_id INT, category TEXT, is_recycled BOOLEAN); INSERT INTO products (product_id, category, is_recycled) VALUES (1, 'Clothing', true), (2, 'Electronics', false), (3, 'Furniture', true); \n[/INST]\nSELECT category, COUNT(*) FROM products WHERE is_recycled = true GROUP BY category;\nThis query counts the number of products made with recycled materials in each category by selecting the category column from the products table where is_recycled is true, and then grouping the results by category using the GROUP BY clause. The COUNT(*) function is used to count the number of rows in each group.</s>"}
{"text": "<s>[INST] \nWhat is the total number of chemical reactions performed per reactor per day?\ncreate table ChemicalReactions (Reactor varchar(255), Reaction int, Timestamp datetime); insert into ChemicalReactions values ('Reactor1', 10, '2022-01-01 00:00:00'), ('Reactor2', 15, '2022-01-01 01:00:00'), ('Reactor1', 12, '2022-01-02 02:00:00'); \n[/INST]\nselect Reactor, DATE(Timestamp) as Date, SUM(Reaction) as TotalReactions from ChemicalReactions group by Reactor, Date;\nThe SQL query calculates the total number of chemical reactions performed per reactor per day in the ChemicalReactions table. It uses the SUM function to calculate the total number of reactions, DATE function to extract the date from the Timestamp, and GROUP BY clause to group the data by Reactor and Date.</s>"}
{"text": "<s>[INST] \nIdentify the federal agencies that have experienced the greatest increase in employee turnover in the last fiscal year.\nCREATE TABLE agency_employees (employee_id INT, agency_id INT, hire_date DATE, termination_date DATE); \n[/INST]\nSELECT agency_id, agency_name, ((COUNT(*) FILTER (WHERE termination_date >= DATE_SUB(CURDATE(), INTERVAL 1 YEAR) AND termination_date < DATE_SUB(CURDATE(), INTERVAL 12 MONTH)) - COUNT(*) FILTER (WHERE hire_date >= DATE_SUB(CURDATE(), INTERVAL 1 YEAR) AND hire_date < DATE_SUB(CURDATE(), INTERVAL 12 MONTH))) * 100.0 / COUNT(*) FILTER (WHERE hire_date >= DATE_SUB(CURDATE(), INTERVAL 1 YEAR))) AS turnover_percentage FROM agency_employees JOIN agencies ON agency_employees.agency_id = agencies.agency_id GROUP BY agency_id, agency_name ORDER BY turnover_percentage DESC;\nWe first filter the agency_employees table to include only employees who were hired or terminated in the last fiscal year. Next, we calculate the turnover percentage for each agency by subtracting the number of hires from the number of terminations and dividing by the total number of hires. Finally, we list the federal agencies that have experienced the greatest increase in employee turnover in the last fiscal year.</s>"}
{"text": "<s>[INST] \nWhat is the maximum and minimum depth of marine protected areas in the Pacific?\nCREATE TABLE marine_protected_areas (id INT, name VARCHAR(255), location VARCHAR(255), avg_depth FLOAT); INSERT INTO marine_protected_areas (id, name, location, avg_depth) VALUES (1, 'Galapagos', 'Pacific', -2); \n[/INST]\nSELECT location, MIN(avg_depth) AS min_depth, MAX(avg_depth) AS max_depth FROM marine_protected_areas WHERE location = 'Pacific'\nThis query selects the location and minimum and maximum avg_depth from the marine_protected_areas table using the MIN and MAX functions.</s>"}
{"text": "<s>[INST] \nIdentify artists with a streaming revenue higher than the average revenue for Latin artists.\nCREATE TABLE artists (artist_id INT, artist_name VARCHAR(100), genre VARCHAR(50), country VARCHAR(50), revenue DECIMAL(10,2)); INSERT INTO artists (artist_id, artist_name, genre, country, revenue) VALUES (1, 'Shakira', 'Latin', 'Colombia', 1200000); INSERT INTO artists (artist_id, artist_name, genre, country, revenue) VALUES (2, 'Bad Bunny', 'Latin', 'Puerto Rico', 1500000); \n[/INST]\nSELECT artist_name, revenue FROM artists WHERE genre = 'Latin' AND revenue > (SELECT AVG(revenue) FROM artists WHERE genre = 'Latin') GROUP BY artist_name;\nThis query identifies artists with a revenue higher than the average revenue for Latin artists. It does this by first calculating the average revenue for Latin artists and then filtering the artists table to only include artists with a revenue higher than that average.</s>"}
{"text": "<s>[INST] \nHow many electric vehicles were sold in 'California'?\nCREATE TABLE public.sales_by_region(id serial PRIMARY KEY, sale_date date, make varchar(255), model varchar(255), region varchar(255), ev_type varchar(255)); \n[/INST]\nSELECT COUNT(*) FROM public.sales_by_region WHERE region = 'California' AND ev_type = 'Electric';\nThis query counts the number of electric vehicle sales in the 'sales_by_region' table in California.</s>"}
{"text": "<s>[INST] \nUpdate the contractor for permit 2021-015 to 'Green Builders'\nCREATE TABLE building_permits (permit_number TEXT, contractor TEXT); INSERT INTO building_permits (permit_number, contractor) VALUES ('2021-015', 'Contractor D'); \n[/INST]\nWITH cte AS (UPDATE building_permits SET contractor = 'Green Builders' WHERE permit_number = '2021-015') SELECT * FROM cte;\nThis query updates the contractor for permit 2021-015 to 'Green Builders'. It does this by creating a common table expression (cte) that performs the update operation. The cte then selects all records from the updated table.</s>"}
{"text": "<s>[INST] \nWhat is the average number of visitors per day for the \"Sculpture\" exhibition?\nCREATE TABLE daily_visitor_count (date DATE, exhibition_id INT, visitor_count INT); INSERT INTO daily_visitor_count (date, exhibition_id, visitor_count) VALUES ('2022-01-01', 6, 100); \n[/INST]\nSELECT AVG(visitor_count) FROM daily_visitor_count WHERE exhibition_id = 6;\nThis SQL query calculates the average number of visitors per day for the \"Sculpture\" exhibition. It does this by selecting the average value of the \"visitor_count\" column in the \"daily_visitor_count\" table, filtering by exhibition_id.</s>"}
{"text": "<s>[INST] \nDelete the 'Director of Engineering' job title from the JobTitle table\nCREATE TABLE JobTitle (JobTitleID INT PRIMARY KEY, JobTitleName VARCHAR(50)); \n[/INST]\nDELETE FROM JobTitle WHERE JobTitleName = 'Director of Engineering';\nThis query deletes the record with JobTitleName 'Director of Engineering' from the JobTitle table.</s>"}
{"text": "<s>[INST] \nWhat is the average response time for emergency calls in the city?\nCREATE TABLE emergency_calls (call_id INT, district TEXT, response_time FLOAT); INSERT INTO emergency_calls (call_id, district, response_time) VALUES (1, 'Downtown', 10.5), (2, 'Uptown', 12.0), (3, 'Harbor', 8.0); \n[/INST]\nSELECT AVG(response_time) FROM emergency_calls;\nThis SQL query calculates the average response time for emergency calls in the city. It computes the average response time for all emergency calls.</s>"}
{"text": "<s>[INST] \nWhat is the average occupancy rate for eco-friendly hotels in the North region?\nCREATE TABLE hotels (hotel_id INT, hotel_name VARCHAR(255), region_id INT, occupancy_rate DECIMAL(5,2)); INSERT INTO hotels (hotel_id, hotel_name, region_id, occupancy_rate) VALUES (1, 'Eco Hotel A', 1, 0.85), (2, 'Green Hotel B', 2, 0.78), (3, 'Sustainable Hotel C', 3, 0.92), (4, 'Eco Resort D', 4, 0.64); \n[/INST]\nSELECT AVG(occupancy_rate) as avg_occupancy FROM hotels WHERE region_id = 1;\nThis query filters the 'hotels' table for records where the region_id equals 1 (North region), then calculates the average occupancy rate for those records.</s>"}
{"text": "<s>[INST] \nList all building permits issued for commercial buildings in the state of Texas and California.\nCREATE TABLE permit (id INT, state VARCHAR(20), type VARCHAR(20), permit_number INT); INSERT INTO permit (id, state, type, permit_number) VALUES (1, 'Texas', 'Commercial', 100), (2, 'Texas', 'Residential', 150), (3, 'California', 'Commercial', 80), (4, 'California', 'Residential', 200); \n[/INST]\nSELECT permit_number FROM permit WHERE (state = 'Texas' OR state = 'California') AND type = 'Commercial';\nThis query selects the 'permit_number' column from the 'permit' table where 'state' is either 'Texas' or 'California' and 'type' is 'Commercial', returning a list of permits issued for commercial buildings in both states.</s>"}
{"text": "<s>[INST] \nWhat is the average age of articles in the 'news' table?\nCREATE TABLE news (title VARCHAR(255), author VARCHAR(255), age INT, category VARCHAR(255)); INSERT INTO news (title, author, age, category) VALUES ('Sample News', 'John Doe', 3, 'Politics'); \n[/INST]\nSELECT AVG(age) FROM news;\nThis query calculates the average value of the 'age' column in the 'news' table.</s>"}
{"text": "<s>[INST] \nHow many renewable energy projects are there in the 'renewables' schema, grouped by project type and the continent of their location, ordered by the count in descending order?\nCREATE SCHEMA renewables; CREATE TABLE renewable_projects (id INT, type VARCHAR(50), location VARCHAR(50)); INSERT INTO renewable_projects (id, type, location) VALUES (1, 'Solar', 'North America'), (2, 'Wind', 'Europe'), (3, 'Hydro', 'South America'), (4, 'Geothermal', 'Africa'), (5, 'Biomass', 'Asia'), (6, 'Solar', 'Australia'), (7, 'Wind', 'Antarctica'); \n[/INST]\nSELECT type, location, COUNT(*) as count FROM renewables.renewable_projects GROUP BY type, location ORDER BY count DESC;\nThe SQL query counts the number of renewable energy projects in the 'renewables' schema, grouped by project type and the continent of their location, and orders the results by count in descending order. It uses the COUNT function to calculate the number of projects.</s>"}
{"text": "<s>[INST] \nUpdate labor_practices table for supplier_id 2\nCREATE TABLE labor_practices (id INT PRIMARY KEY, supplier_id INT, practice VARCHAR(255), verified BOOLEAN, FOREIGN KEY (supplier_id) REFERENCES suppliers(id)); INSERT INTO labor_practices (id, supplier_id, practice, verified) VALUES (1, 1, 'Fair wages', true), (2, 2, 'Safe working conditions', false); \n[/INST]\nUPDATE labor_practices SET verified = true WHERE supplier_id = 2;\nThis query updates the 'verified' column in the 'labor_practices' table, setting it to true for supplier_id 2. It demonstrates verified safe working conditions for a supplier.</s>"}
{"text": "<s>[INST] \nList the VictimAdvocateID and total cases handled by Victim Advocates who have handled more than 15 cases in the RestorativeJusticeProgram table.\nCREATE TABLE VictimAdvocates (VictimAdvocateID INT, Name VARCHAR(30)); CREATE TABLE RestorativeJusticeProgram (CaseID INT, VictimAdvocateID INT, Date DATE); INSERT INTO VictimAdvocates (VictimAdvocateID, Name) VALUES (1, 'Judy Hopps'), (2, 'Nick Wilde'), (3, 'Chief Bogo'); INSERT INTO RestorativeJusticeProgram (CaseID, VictimAdvocateID, Date) VALUES (1, 1, '2021-09-01'), (2, 1, '2021-09-15'), (3, 2, '2021-09-25'), (4, 3, '2021-10-01'), (5, 1, '2021-10-05'), (6, 2, '2021-10-10'); \n[/INST]\nSELECT VictimAdvocateID, COUNT(*) as TotalCases FROM RestorativeJusticeProgram WHERE VictimAdvocateID IN (SELECT VictimAdvocateID FROM RestorativeJusticeProgram GROUP BY VictimAdvocateID HAVING COUNT(*) > 15) GROUP BY VictimAdvocateID;\nThe subquery in the WHERE clause identifies VictimAdvocates who have handled more than 15 cases. The main query then counts and lists the VictimAdvocateID and total cases handled by those Victim Advocates.</s>"}
{"text": "<s>[INST] \nWhat is the total budget for ethical AI initiatives by companies in the non-profit sector?\nCREATE TABLE ngo_tech (name TEXT, budget INTEGER); INSERT INTO ngo_tech (name, budget) VALUES ('AIforGood', 400000), ('EthicsNG', 500000), ('Tech4Change', 600000); \n[/INST]\nSELECT SUM(budget) FROM ngo_tech WHERE name IN ('AIforGood', 'EthicsNG', 'Tech4Change') AND sector = 'non-profit';\nThis query calculates the total budget for ethical AI initiatives by companies in the non-profit sector by selecting the budget column from the ngo_tech table, filtering for companies in the non-profit sector, and computing the sum of those records.</s>"}
{"text": "<s>[INST] \nWhat is the total number of artworks created by each artist?\nCREATE TABLE artworks (id INT, artist TEXT, category TEXT); INSERT INTO artworks (id, artist, category) VALUES (1, 'Rodin', 'Sculpture'), (2, 'Rodin', 'Painting'), (3, 'Rodin', 'Sculpture'), (4, 'Picasso', 'Painting'), (5, 'Picasso', 'Sculpture'), (6, 'Picasso', 'Sculpture'); \n[/INST]\nSELECT artist, COUNT(*) FROM artworks GROUP BY artist;\nThe SQL query uses the COUNT() function to count the number of rows in the 'artworks' table for each unique value in the 'artist' column. It then uses the GROUP BY clause to group the results by artist and returns the total number of artworks created by each artist.</s>"}
{"text": "<s>[INST] \nWhat is the moving average of claim amounts for the last 3 months, grouped by policy type?\nCREATE TABLE Claims (ClaimID int, ClaimDate date, ClaimAmount decimal(10, 2), PolicyType varchar(50)); INSERT INTO Claims (ClaimID, ClaimDate, ClaimAmount, PolicyType) VALUES (1, '2022-01-15', 4500.00, 'Auto'), (2, '2022-02-03', 3200.00, 'Home'), (3, '2022-03-17', 5700.00, 'Auto'), (4, '2022-04-01', 6100.00, 'Life'), (5, '2022-05-12', 4200.00, 'Auto'), (6, '2022-06-20', 3800.00, 'Home'); \n[/INST]\nSELECT PolicyType, AVG(ClaimAmount) OVER (PARTITION BY PolicyType ORDER BY ClaimDate ROWS BETWEEN 2 PRECEDING AND CURRENT ROW) AS MovingAverage FROM Claims WHERE ClaimDate >= DATE_SUB(CURRENT_DATE, INTERVAL 3 MONTH);\nCalculate the moving average of claim amounts for the last 3 months, grouped by policy type using window functions</s>"}
{"text": "<s>[INST] \nWhat is the distribution of regulatory fines across countries and years in the 'regulatory_fines' table?\nCREATE TABLE regulatory_fines (country VARCHAR(255), fine_year INT, fine_amount INT); \n[/INST]\nSELECT r.country, r.fine_year, COUNT(r.fine_year) as fine_count, SUM(r.fine_amount) as total_fines FROM regulatory_fines r GROUP BY r.country, r.fine_year;\nThis query groups the 'regulatory_fines' table by 'country' and 'fine_year', then calculates the number of fines (fine_count) and the total fine amount for each country and year using the COUNT() and SUM() functions.</s>"}
{"text": "<s>[INST] \nWhat was the average number of daily active users in the 'music' interest group for the last 30 days?\nCREATE SCHEMA userdata; CREATE TABLE user_interests(user_id INT, interest_group VARCHAR(255), daily_active_users INT); INSERT INTO user_interests (user_id, interest_group, daily_active_users) VALUES (1, 'music', 800); INSERT INTO user_interests (user_id, interest_group, daily_active_users) VALUES (2, 'music', 1100); \n[/INST]\nSELECT AVG(daily_active_users) FROM userdata.user_interests WHERE interest_group = 'music' AND daily_active_users >= (SELECT AVG(daily_active_users) FROM userdata.user_interests WHERE interest_group = 'music') AND post_date >= (SELECT CURDATE() - INTERVAL 30 DAY);\nThis query calculates the average number of daily active users in the 'music' interest group for the last 30 days by filtering rows with interest_group values of 'music' and post_dates within the last 30 days, and then calculating the average daily_active_users value.</s>"}
{"text": "<s>[INST] \nHow many funding rounds were held in the first quarter of 2011?\nCREATE TABLE funding_rounds (id INT, company_id INT, round_date DATE); INSERT INTO funding_rounds (id, company_id, round_date) VALUES (1, 3, '2011-01-15'); INSERT INTO funding_rounds (id, company_id, round_date) VALUES (2, 4, '2011-04-20'); \n[/INST]\nSELECT COUNT(*) FROM funding_rounds WHERE round_date BETWEEN '2011-01-01' AND '2011-03-31';\nThis SQL query calculates the number of funding rounds held in the first quarter of 2011. It uses a BETWEEN clause to filter the results by the date range '2011-01-01' and '2011-03-31' and an aggregate function COUNT() to calculate the number of funding rounds in this date range.</s>"}
{"text": "<s>[INST] \nWhat is the distribution of customer sizes in France?\nCREATE TABLE customer_sizes (customer_id INT, customer_size TEXT, customer_country TEXT); \n[/INST]\nSELECT customer_size, COUNT(*) AS customer_count FROM customer_sizes WHERE customer_country = 'France' GROUP BY customer_size\nGroup customers by size and count the number of customers in each size category for France, then select the size categories and counts.</s>"}
{"text": "<s>[INST] \nInsert new records for electric cars produced in 2022 in the cars table.\ncars (id, make, model, year, fuel_type) \n[/INST]\nINSERT INTO cars (make, model, year, fuel_type) VALUES ('Tesla', 'Model S', 2022, 'electric'), ('Nissan', 'Leaf', 2022, 'electric'), ('Chevrolet', 'Bolt', 2022, 'electric');\nThree new records are inserted into the cars table for electric cars produced in 2022.</s>"}
{"text": "<s>[INST] \nWhat is the total revenue generated from tours in the last 3 months?\nCREATE TABLE tours (id INT PRIMARY KEY, name VARCHAR(255), revenue FLOAT, tour_date DATE); \n[/INST]\nSELECT SUM(revenue) FROM tours WHERE tour_date >= DATE_SUB(NOW(), INTERVAL 3 MONTH);\nThis query calculates the total revenue generated from tours in the last 3 months by summing up the 'revenue' column for records with a 'tour_date' within the specified time range.</s>"}
{"text": "<s>[INST] \nWhat was the daily average number of posts about disability awareness between January 1, 2022 and December 31, 2022?\nCREATE TABLE posts (id INT, user_id INT, datetime DATETIME, content VARCHAR(255)); INSERT INTO posts (id, user_id, datetime, content) VALUES (1, 123, '2022-01-01 12:00:00', 'Raising awareness for disability today!'), (2, 456, '2022-12-31 23:59:59', 'Sharing my experiences with disability.'); \n[/INST]\nSELECT AVG(count) as avg_daily_posts FROM (SELECT DATE(datetime) as date, COUNT(*) as count FROM posts WHERE content LIKE '%disability awareness%' AND datetime BETWEEN '2022-01-01' AND '2022-12-31' GROUP BY date) as daily_posts;\nThis query calculates the average number of daily posts about disability awareness between January 1, 2022 and December 31, 2022.</s>"}
{"text": "<s>[INST] \nWhat is the maximum number of views for articles published in Spanish in 2020?\nCREATE TABLE article_views (article_id INT, views INT, language VARCHAR(100), publish_year INT); INSERT INTO article_views (article_id, views, language, publish_year) VALUES (1, 1000, 'Spanish', 2020); INSERT INTO article_views (article_id, views, language, publish_year) VALUES (2, 1200, 'Spanish', 2020); INSERT INTO article_views (article_id, views, language, publish_year) VALUES (3, 800, 'Spanish', 2019); \n[/INST]\nSELECT MAX(views) FROM article_views WHERE language = 'Spanish' AND publish_year = 2020;\nThis query retrieves the maximum number of views for articles published in Spanish in 2020 by using the MAX() aggregation function.</s>"}
{"text": "<s>[INST] \nWhat is the average delivery time for military equipment to the United States?\nCREATE TABLE military_equipment(equipment_id INT, equipment_name VARCHAR(50), delivery_time INT, country VARCHAR(50)); INSERT INTO military_equipment VALUES (1, 'Tank', 60, 'United States'), (2, 'Helicopter', 90, 'United States'), (3, 'Airplane', 120, 'United States'); \n[/INST]\nSELECT AVG(delivery_time) FROM military_equipment WHERE country = 'United States';\nThis query calculates the average delivery time for military equipment to the United States by using the AVG function on the delivery_time column, filtering the data for the United States country.</s>"}
{"text": "<s>[INST] \nDisplay the total billing amount for cases handled by attorney 'Jane Smith'\nCREATE TABLE cases (case_id INT, attorney_id INT, billing_amount INT); INSERT INTO cases (case_id, attorney_id, billing_amount) VALUES (1, 1, 5000), (2, 2, 7000); \n[/INST]\nSELECT SUM(billing_amount) FROM cases WHERE attorney_id IN (SELECT attorney_id FROM attorneys WHERE name = 'Jane Smith');\nThis SQL query calculates the total billing amount for cases handled by the attorney named 'Jane Smith' by summing up the 'billing_amount' column where the 'attorney_id' is in the list of attorney_id's from the 'attorneys' table where the 'name' is 'Jane Smith'.</s>"}
{"text": "<s>[INST] \nWhat is the maximum budget for rural infrastructure projects in 2020?\nCREATE TABLE rural_infrastructure (id INT, year INT, project VARCHAR(50), budget FLOAT); INSERT INTO rural_infrastructure (id, year, project, budget) VALUES (1, 2018, 'Road Construction', 300000.00), (2, 2019, 'Water Supply', 500000.00), (3, 2020, 'Electrification', 700000.00); \n[/INST]\nSELECT MAX(budget) FROM rural_infrastructure WHERE year = 2020;\nThe SQL query finds the maximum budget for rural infrastructure projects in 2020 by using the MAX function and filtering the records with a year of 2020.</s>"}
{"text": "<s>[INST] \nCalculate the total carbon offset of green buildings in 'Asia'\nCREATE TABLE green_buildings (id INT, name VARCHAR(100), location VARCHAR(50), carbon_offset FLOAT, region VARCHAR(10)); INSERT INTO green_buildings (id, name, location, carbon_offset, region) VALUES (1, 'Green Building A', 'Tokyo', 500.3, 'Asia'); INSERT INTO green_buildings (id, name, location, carbon_offset, region) VALUES (2, 'Green Building B', 'Seoul', 400.2, 'Asia'); \n[/INST]\nSELECT SUM(carbon_offset) FROM green_buildings WHERE region = 'Asia';\nThis query calculates the total carbon offset of green buildings in 'Asia' by summing up the 'carbon_offset' values of all records where the 'region' is 'Asia' in the 'green_buildings' table.</s>"}
{"text": "<s>[INST] \nHow many farmers are there in each region?\nCREATE TABLE farmer (id INT PRIMARY KEY, name VARCHAR(50), region_id INT); CREATE TABLE region (id INT PRIMARY KEY, name VARCHAR(50)); INSERT INTO region (id, name) VALUES (1, 'Delta Region'), (2, 'Great Plains'); INSERT INTO farmer (id, name, region_id) VALUES (1, 'John Doe', 1), (2, 'Jane Doe', 1), (3, 'Bob Smith', 2); \n[/INST]\nSELECT r.name, COUNT(f.id) FROM farmer f INNER JOIN region r ON f.region_id = r.id GROUP BY r.name;\nThis query counts the number of farmers in each region by performing an inner join between the farmer and region tables, grouping the results by the region name, and calculating the count of farmer IDs using the COUNT function.</s>"}
{"text": "<s>[INST] \nWhat is the difference in average depth between expeditions in the Pacific and Atlantic Oceans?\nCREATE TABLE Expeditions(ExpeditionID INT, Location VARCHAR(20), AvgDepth DECIMAL(5,2)); INSERT INTO Expeditions(ExpeditionID, Location, AvgDepth) VALUES (1, 'Pacific', 3500.50), (2, 'Atlantic', 4200.30), (3, 'Indian', 2100.75), (4, 'Pacific', 5100.90), (5, 'Atlantic', 2900.40); \n[/INST]\nSELECT AVG(CASE WHEN Location = 'Pacific' THEN AvgDepth ELSE NULL END) - AVG(CASE WHEN Location = 'Atlantic' THEN AvgDepth ELSE NULL END) FROM Expeditions;\nWe calculate the average depth of expeditions in the Pacific and Atlantic Oceans separately using the CASE statement, and then subtract the two averages to find the difference.</s>"}
{"text": "<s>[INST] \nWhich country sources the most natural ingredients?\nCREATE TABLE Ingredients (id INT, product_id INT, country VARCHAR(255), is_natural BOOLEAN); INSERT INTO Ingredients (id, product_id, country, is_natural) VALUES (1, 1, 'USA', true), (2, 1, 'Canada', false), (3, 2, 'France', true); \n[/INST]\nSELECT country, COUNT(*) as total_natural FROM Ingredients WHERE is_natural = true GROUP BY country ORDER BY total_natural DESC LIMIT 1;\nThis query calculates the number of natural ingredients sourced from each country and groups them by country. Afterward, it orders the results in descending order by the total number of natural ingredients and returns the country with the highest count.</s>"}
{"text": "<s>[INST] \nWhat were the total sales for each drug by quarter in 2021?\nCREATE TABLE sales_q (drug_name TEXT, quarter TEXT, year INTEGER, quantity INTEGER, sale_price NUMERIC(10, 2)); INSERT INTO sales_q (drug_name, quarter, year, quantity, sale_price) VALUES ('DrugA', 'Q1', 2021, 250, 120.50), ('DrugA', 'Q2', 2021, 280, 125.00), ('DrugB', 'Q1', 2021, 220, 150.75), ('DrugB', 'Q2', 2021, 240, 155.00); \n[/INST]\nSELECT drug_name, quarter, SUM(quantity * sale_price) as total_sales FROM sales_q WHERE year = 2021 GROUP BY drug_name, quarter;\nThe SQL query calculates the total sales for each drug by quarter in 2021 by grouping the sales_q table data by drug_name and quarter and summing the product of quantity and sale_price.</s>"}
{"text": "<s>[INST] \nHow many users in the social_media schema have posted at least once and have more than 100 followers?\nCREATE TABLE users (id INT, name VARCHAR(50), posts_count INT, followers INT); CREATE TABLE posts (id INT, user_id INT, post_text VARCHAR(255)); \n[/INST]\nSELECT COUNT(DISTINCT users.id) FROM users JOIN posts ON users.id = posts.user_id WHERE posts_count > 0 AND followers > 100;\nThe SQL query calculates the number of users who have posted at least once and have more than 100 followers by using the COUNT function on the users.id column and joining it with the posts table on the user_id column, filtering for users with posts_count greater than 0 and followers greater than 100, and using the DISTINCT keyword to count only the unique user IDs.</s>"}
{"text": "<s>[INST] \nList all rural infrastructure projects in the 'rural_infrastructure' table along with their completion years and project types.\nCREATE TABLE rural_infrastructure (project_name VARCHAR(255), project_type VARCHAR(255), completion_year INT); INSERT INTO rural_infrastructure (project_name, project_type, completion_year) VALUES ('Greenhouse Project', 'Agricultural Innovation', 2018), ('Drip Irrigation System', 'Agricultural Innovation', 2019), ('Rural Road Construction', 'Infrastructure', 2020), ('Water Treatment Plant', 'Infrastructure', 2021); \n[/INST]\nSELECT project_name, project_type, completion_year FROM rural_infrastructure;\nThis query retrieves all records from the 'rural_infrastructure' table, listing all rural infrastructure projects, their types, and completion years.</s>"}
{"text": "<s>[INST] \nWhat was the average donation amount from donors in the \"Music Education\" program who donated more than $100?\nCREATE TABLE donations_3 (program VARCHAR(255), donor VARCHAR(255), donation FLOAT); INSERT INTO donations_3 (program, donor, donation) VALUES ('Music Education', 'Jane Doe', 120), ('Music Education', 'John Smith', 150), ('Music Education', 'Jane Doe', 200); \n[/INST]\nSELECT AVG(donation) FROM donations_3 WHERE program = 'Music Education' AND donation > 100;\nThis query calculates the average donation amount from donors in the \"Music Education\" program who donated more than $100 by averaging the donation column in the donations_3 table where the program is \"Music Education\" and the donation is greater than 100.</s>"}
{"text": "<s>[INST] \nUpdate customer orders with a total cost under $25 and order date over a year ago, setting the status to 'Inactive'\nCREATE TABLE customer_orders (order_id INT PRIMARY KEY, customer_id INT, total_cost DECIMAL(5,2), order_date TIMESTAMP, status VARCHAR(255)); \n[/INST]\nUPDATE customer_orders SET status = 'Inactive' WHERE total_cost < 25 AND order_date < NOW() - INTERVAL 1 YEAR;\nThis SQL query updates the status column of records in the customer_orders table where the total_cost is less than $25 and the order_date is over 1 year old from the current date (NOW()). The status is set to 'Inactive'.</s>"}
{"text": "<s>[INST] \nWhat is the total number of climate adaptation projects in the 'africa' region?\nCREATE TABLE adaptation_projects (region VARCHAR(20), num_projects INT); INSERT INTO adaptation_projects (region, num_projects) VALUES ('americas', 10), ('europe', 7), ('africa', 5); \n[/INST]\nSELECT region, SUM(num_projects) FROM adaptation_projects WHERE region = 'africa' GROUP BY region;\nThis query calculates the total number of climate adaptation projects in the 'africa' region by selecting the region and summing the num_projects for the 'africa' region from the adaptation_projects table.</s>"}
{"text": "<s>[INST] \nList all the forests in descending order of their total carbon sequestration in 2019 and 2020.\nCREATE TABLE forests (id INT, forest VARCHAR(50), year INT, carbon_sequestration FLOAT); INSERT INTO forests (id, forest, year, carbon_sequestration) VALUES (1, 'Forest A', 2019, 12.5), (2, 'Forest A', 2020, 15.2), (3, 'Forest B', 2019, 10.0), (4, 'Forest B', 2020, 11.8); \n[/INST]\nSELECT forest, SUM(carbon_sequestration) AS total_carbon_sequestration FROM forests WHERE year IN (2019, 2020) GROUP BY forest ORDER BY total_carbon_sequestration DESC;\nThe SQL query lists all the forests in descending order of their total carbon sequestration in 2019 and 2020. It starts by grouping the data by forest using the GROUP BY clause. Then, it calculates the total carbon sequestration for each forest in the specified years using the SUM() function. Finally, it orders the results in descending order by the total carbon sequestration using the ORDER BY clause.</s>"}
{"text": "<s>[INST] \nCreate a table for storing information about climate change organizations\nCREATE TABLE climate_organizations (organization_id INT PRIMARY KEY, name VARCHAR(255), country VARCHAR(255), field VARCHAR(255)); \n[/INST]\nCREATE TABLE climate_organizations (organization_id INT PRIMARY KEY, name VARCHAR(255), country VARCHAR(255), field VARCHAR(255));\nThis SQL statement creates a table called 'climate_organizations' with 4 columns: organization_id (integer, primary key), name (string, length 255), country (string, length 255), field (string, length 255).</s>"}
{"text": "<s>[INST] \nWhat are the total donations made to community development projects in Central America?\nCREATE TABLE donations (id INT, donor TEXT, amount INT, project_type TEXT, country TEXT); INSERT INTO donations (id, donor, amount, project_type, country) VALUES (1, 'Joseph Smith', 5000, 'community development', 'Guatemala'); INSERT INTO donations (id, donor, amount, project_type, country) VALUES (2, 'Grace Lee', 3000, 'community development', 'El Salvador'); \n[/INST]\nSELECT SUM(amount) FROM donations WHERE project_type = 'community development' AND country IN ('Guatemala', 'El Salvador', 'Honduras', 'Nicaragua', 'Costa Rica', 'Panama');\nThis query calculates the total donations made to community development projects in Central America. It does so by using the SUM function to calculate the total donations for community development projects in the specified countries and filtering the results using the WHERE clause.</s>"}
{"text": "<s>[INST] \nIdentify menu categories with a negative trend in revenue over the last 60 days.\nCREATE TABLE restaurant_revenue (menu_category VARCHAR(50), transaction_date DATE, revenue NUMERIC(10,2)); INSERT INTO restaurant_revenue (menu_category, transaction_date, revenue) VALUES ('Appetizers', '2023-01-01', 500.00), ('Appetizers', '2023-01-02', 450.00), ('Entrees', '2023-01-03', 800.00); \n[/INST]\nSELECT menu_category, SUM(revenue) OVER (PARTITION BY menu_category ORDER BY transaction_date ROWS BETWEEN 59 PRECEDING AND CURRENT ROW) - SUM(revenue) OVER (PARTITION BY menu_category ORDER BY transaction_date ROWS BETWEEN 29 PRECEDING AND 1 PRECEDING) AS revenue_change FROM restaurant_revenue WHERE transaction_date >= CURRENT_DATE - INTERVAL '60 days';\nThe SQL query identifies menu categories with a negative trend in revenue over the last 60 days by calculating the difference in revenue between the current row and the row 30 days ago for each menu category using the window function SUM() with the PARTITION BY clause to partition the data by menu_category and the ORDER BY clause to order the data by transaction_date. The ROWS BETWEEN 59 PRECEDING AND CURRENT ROW and ROWS BETWEEN 29 PRECEDING AND 1 PRECEDING clauses specify the range of rows to include in the calculation. The query then filters the data to only include rows from the last 60 days using the WHERE clause.</s>"}
{"text": "<s>[INST] \nWhat is the total number of military satellites operated by ASEAN countries?\nCREATE TABLE satellites(satellite_id INT, country VARCHAR(255), type VARCHAR(255)); INSERT INTO satellites(satellite_id, country, type) VALUES (1, 'Indonesia', 'Military'), (2, 'Malaysia', 'Communications'), (3, 'Singapore', 'Military'), (4, 'Thailand', 'Earth Observation'), (5, 'Vietnam', 'Military'); \n[/INST]\nSELECT SUM(satellite_id) FROM satellites WHERE country IN ('Indonesia', 'Malaysia', 'Philippines', 'Singapore', 'Thailand', 'Brunei', 'Cambodia', 'Laos', 'Myanmar', 'Vietnam') AND type = 'Military';\nCount the total number of military satellites operated by ASEAN countries by querying the satellites table.</s>"}
{"text": "<s>[INST] \nHow many tickets were sold per game by each team?\nCREATE TABLE Teams (TeamID INT, TeamName VARCHAR(50)); INSERT INTO Teams VALUES (1, 'TeamA'), (2, 'TeamB'); CREATE TABLE TicketSales (SaleID INT, TeamID INT, GameID INT, TicketsSold INT); INSERT INTO TicketSales VALUES (1, 1, 1, 500), (2, 1, 2, 550), (3, 2, 3, 600), (4, 2, 4, 650); \n[/INST]\nSELECT TeamID, GameID, SUM(TicketsSold) as TotalTicketsSold FROM TicketSales GROUP BY TeamID, GameID;\nCalculate the number of tickets sold per game by each team by grouping the data by TeamID and GameID, and then calculating the sum of TicketsSold.</s>"}
{"text": "<s>[INST] \nWhat is the average number of cases per attorney in the legal aid department?\nCREATE TABLE attorneys (attorney_id INT, department VARCHAR(20)); INSERT INTO attorneys (attorney_id, department) VALUES (1, 'Legal Aid'), (2, 'Private Practice'), (3, 'Legal Aid'), (4, 'Corporate'), (5, 'Legal Aid'); CREATE TABLE cases_handled (case_id INT, attorney_id INT); INSERT INTO cases_handled (case_id, attorney_id) VALUES (1, 1), (2, 2), (3, 3), (4, 4), (5, 1), (6, 2), (7, 3), (8, 4), (9, 5), (10, 1); \n[/INST]\nSELECT AVG(cnt) FROM (SELECT attorneys.attorney_id, COUNT(*) AS cnt FROM attorneys INNER JOIN cases_handled ON attorneys.attorney_id = cases_handled.attorney_id WHERE attorneys.department = 'Legal Aid' GROUP BY attorneys.attorney_id) AS t;\nThe SQL query calculates the average number of cases per attorney in the legal aid department by joining the attorneys and cases_handled tables on the attorney_id field and filtering for attorneys in the legal aid department. It then groups the result set by attorney_id and calculates the count of cases for each attorney. Finally, it calculates the average of the cnt field.</s>"}
{"text": "<s>[INST] \nWhat is the total copper production for each machine type?\nCREATE TABLE production (id INT, machine_type VARCHAR(20), copper_production FLOAT); INSERT INTO production (id, machine_type, copper_production) VALUES (1, 'TypeA', 1200.5), (2, 'TypeB', 1500.3), (3, 'TypeA', 1300.0), (4, 'TypeC', 1800.5); \n[/INST]\nSELECT machine_type, SUM(copper_production) as total_production FROM production GROUP BY machine_type;\nThis query calculates the total copper production for each machine type by using the SUM function on the copper_production column, grouped by machine_type.</s>"}
{"text": "<s>[INST] \nFind the top 2 products with the highest sales in the year 2021?\nCREATE TABLE sales_by_product (product VARCHAR(255), revenue FLOAT); INSERT INTO sales_by_product (product, revenue) VALUES ('White T-Shirt', 1500), ('Blue Jeans', 1300), ('Red Dress', 1200), ('Black Heels', 1000), ('Brown Bag', 800); \n[/INST]\nSELECT product, SUM(revenue) FROM sales_by_product WHERE revenue IS NOT NULL AND product IS NOT NULL GROUP BY product ORDER BY SUM(revenue) DESC LIMIT 2;\nThe query uses the sales_by_product table to find the top 2 products with the highest sales in the year 2021. The GROUP BY statement groups the results by product, and the ORDER BY clause orders the results by the total sales in descending order. The LIMIT clause limits the results to the top 2 products.</s>"}
{"text": "<s>[INST] \nDelete a soldier record from the 'soldiers' table with ID 102\nCREATE TABLE soldiers (id INT PRIMARY KEY, name VARCHAR(50), rank VARCHAR(50), branch VARCHAR(50)); INSERT INTO soldiers (id, name, rank, branch) VALUES (102, 'Jane Doe', 'Lieutenant', 'Navy'); \n[/INST]\nDELETE FROM soldiers WHERE id = 102;\n1. This statement deletes the soldier record with ID 102 from the 'soldiers' table.</s>"}
{"text": "<s>[INST] \nList the number of times each crop type was harvested in the 'Western' region in 2021.\nCREATE TABLE HarvestData (id INT, region VARCHAR(255), crop_type VARCHAR(255), harvest_date DATE); \n[/INST]\nSELECT region, crop_type, COUNT(DISTINCT harvest_date) FROM HarvestData WHERE region = 'Western' AND YEAR(harvest_date) = 2021 GROUP BY region, crop_type;\nThe SQL query lists the number of times each crop type was harvested in the 'Western' region in 2021. It filters the records to only include those from the 'Western' region and from the year 2021 (YEAR(harvest_date) = 2021). It then calculates the number of distinct harvest dates (COUNT(DISTINCT harvest_date)) for each group (region, crop_type).</s>"}
{"text": "<s>[INST] \nUpdate the description of an existing military technology in the \"military_tech\" table\nCREATE TABLE military_tech (id INT, name VARCHAR(255), description TEXT, country VARCHAR(255)); INSERT INTO military_tech (id, name, description, country) VALUES (1, 'Stealth Drone', 'Unmanned aerial vehicle with low observable radar profile', 'US'); \n[/INST]\nUPDATE military_tech SET description = 'Unmanned aerial vehicle with advanced stealth capabilities' WHERE name = 'Stealth Drone';\nThis query updates the description of the stealth drone technology in the \"military_tech\" table to include advanced stealth capabilities.</s>"}
{"text": "<s>[INST] \nWhat is the percentage of games played at home for each team?\nCREATE TABLE teams (team_id INT, team_name TEXT, city TEXT); CREATE TABLE games (game_id INT, team_id INT, home BOOLEAN); \n[/INST]\nSELECT t.team_name, (SUM(g.home) * 100.0 / COUNT(g.game_id)) as home_percentage FROM games g JOIN teams t ON g.team_id = t.team_id GROUP BY t.team_name;\nWe are joining the teams and games tables on the team_id column, calculating the percentage of games played at home for each team.</s>"}
{"text": "<s>[INST] \nWhat is the average age of audience members for events held in the past month, sorted by event type?\nCREATE TABLE Events (event_id INT, event_name VARCHAR(50), event_date DATE, event_type VARCHAR(50), attendee_id INT); CREATE TABLE Attendees (attendee_id INT, first_name VARCHAR(50), last_name VARCHAR(50), birthdate DATE); \n[/INST]\nSELECT event_type, AVG(YEAR(CURRENT_DATE) - YEAR(a.birthdate)) AS avg_age FROM Events e JOIN Attendees a ON e.attendee_id = a.attendee_id WHERE e.event_date >= DATEADD(month, -1, GETDATE()) GROUP BY event_type ORDER BY avg_age DESC;\nThis query first joins the 'Events' and 'Attendees' tables on the 'attendee_id' column. Then, it calculates the average age of audience members for events held in the past month, based on their birthdate. Finally, it groups the records by 'event_type' and sorts the results by 'avg_age' in descending order.</s>"}
{"text": "<s>[INST] \nWhat are the unique types of agricultural projects and their corresponding IDs, excluding those related to 'livestock'?\nCREATE SCHEMA IF NOT EXISTS rural_development;CREATE TABLE IF NOT EXISTS rural_development.agriculture_projects (type VARCHAR(255), id INT);INSERT INTO rural_development.agriculture_projects (type, id) VALUES ('organic_farming', 1), ('permaculture', 2), ('livestock_rearing', 3), ('aquaculture', 4); \n[/INST]\nSELECT DISTINCT type, id FROM rural_development.agriculture_projects WHERE type NOT LIKE '%livestock%';\nThe SQL query selects distinct 'type' and 'id' columns from the 'agriculture_projects' table in the 'rural_development' schema, filtering the results to exclude any rows where the 'type' contains 'livestock'.</s>"}
{"text": "<s>[INST] \nGet the average funding amount for startups based in 'Asia'.\nCREATE TABLE startups (id INT, name VARCHAR(50), location VARCHAR(50), funding_amount DECIMAL(10, 2)); \n[/INST]\nSELECT AVG(funding_amount) FROM startups WHERE location = 'Asia';\nThis query calculates the average of the funding_amount column for the rows in the startups table where the location is 'Asia'.</s>"}
{"text": "<s>[INST] \nWhat is the name and location of the employee in Chicago who works at a restaurant with a food safety violation in the last month?\nCREATE TABLE Employee (id INT PRIMARY KEY, name VARCHAR(255), role VARCHAR(255), restaurant_id INT); CREATE TABLE Restaurant (id INT PRIMARY KEY, name VARCHAR(255), type VARCHAR(255), city VARCHAR(255)); CREATE TABLE Inspection (id INT PRIMARY KEY, restaurant_id INT, date DATE, violation VARCHAR(255)); \n[/INST]\nSELECT e.name, r.city FROM Employee e INNER JOIN Restaurant r ON e.restaurant_id = r.id INNER JOIN Inspection i ON r.id = i.restaurant_id WHERE i.date >= DATEADD(month, -1, GETDATE()) AND r.city = 'Chicago';\nThis query joins the Employee, Restaurant, and Inspection tables on the restaurant_id field. It then filters for rows where the inspection date is within the last month and the city is 'Chicago', and returns the name of the employee and the location of the restaurant.</s>"}
{"text": "<s>[INST] \nList all donors who have donated more than $1000 in total\nCREATE TABLE donors (id INT, name VARCHAR(50)); CREATE TABLE donations (id INT, donor_id INT, amount DECIMAL(10,2)); \n[/INST]\nSELECT d.name FROM donors d JOIN donations don ON d.id = donations.donor_id GROUP BY d.name HAVING SUM(donations.amount) > 1000;\nThis query joins the donors and donations tables on donor_id, calculates the total donation amount for each donor, and returns the names of donors who have donated more than $1000 in total.</s>"}
{"text": "<s>[INST] \nGet total warehouse capacity for warehouses A01 and A02\nCREATE TABLE warehouses(id INT, name VARCHAR(255), capacity INT); INSERT INTO warehouses VALUES(1, 'A01', 5000), (2, 'A02', 7000); \n[/INST]\nSELECT SUM(capacity) FROM warehouses WHERE name IN ('A01', 'A02');\nThis query retrieves the total capacity of warehouses 'A01' and 'A02' from the warehouses table.</s>"}
{"text": "<s>[INST] \nWhat is the total number of meals served in the month of July 2021?\nCREATE TABLE Orders (order_id INT, order_date DATE, menu_id INT); INSERT INTO Orders (order_id, order_date, menu_id) VALUES (1, '2021-07-01', 1), (2, '2021-07-02', 2), (3, '2021-07-03', 1); \n[/INST]\nSELECT COUNT(*) FROM Orders WHERE MONTH(order_date) = 7 AND YEAR(order_date) = 2021;\nThe SQL query calculates the total number of meals served in the month of July 2021 by counting all the rows in the Orders table where the month and year of the order_date column are equal to 7 and 2021, respectively.</s>"}
{"text": "<s>[INST] \nWhat is the clinic capacity utilization rate by clinic name, ordered within each province?\nCREATE TABLE CapacityUtilization (ProvinceName VARCHAR(50), ClinicName VARCHAR(50), Capacity INT, Utilization INT); INSERT INTO CapacityUtilization (ProvinceName, ClinicName, Capacity, Utilization) VALUES ('Ontario', 'ClinicA', 200, 80), ('Ontario', 'ClinicB', 250, 90), ('Quebec', 'ClinicX', 150, 70), ('British Columbia', 'ClinicY', 200, 95), ('British Columbia', 'ClinicZ', 175, 85); \n[/INST]\nSELECT ProvinceName, ClinicName, Utilization, PERCENT_RANK() OVER (PARTITION BY ProvinceName ORDER BY Utilization DESC) AS PercentRank FROM CapacityUtilization\nCalculate the clinic capacity utilization rate by clinic name and rank the clinics within each province based on the Utilization column. Partition the result set by the ProvinceName column and sort by Utilization in descending order.</s>"}
{"text": "<s>[INST] \nIdentify military equipment types with the most maintenance activities\nCREATE TABLE equipment_maintenance (equipment_id INT, equipment_type VARCHAR(50), maintenance_date DATE, vendor_name VARCHAR(100), maintenance_type VARCHAR(50)); INSERT INTO equipment_maintenance (equipment_id, equipment_type, maintenance_date, vendor_name, maintenance_type) VALUES (1001, 'Fighter Jet', '2019-12-05', 'DEF Contractors', 'Preventive'); INSERT INTO equipment_maintenance (equipment_id, equipment_type, maintenance_date, vendor_name, maintenance_type) VALUES (1002, 'Helicopter', '2020-03-20', 'GHI Services', 'Corrective'); \n[/INST]\nSELECT equipment_type, COUNT(*) as total_maintenance FROM equipment_maintenance GROUP BY equipment_type ORDER BY total_maintenance DESC LIMIT 1;\nThis SQL query calculates the total number of maintenance activities for each equipment type and returns the equipment type with the most maintenance activities.</s>"}
{"text": "<s>[INST] \nWhat is the total number of container ships in the fleet that were built before 2010?\nCREATE TABLE fleets (fleet_id INT, ship_name VARCHAR(50), ship_type VARCHAR(50), build_year INT); INSERT INTO fleets VALUES (1, 'MSC Maya', 'Container Ship', 2015); INSERT INTO fleets VALUES (2, 'OOCL Hong Kong', 'Container Ship', 2017); INSERT INTO fleets VALUES (3, 'Ever Given', 'Container Ship', 2010); \n[/INST]\nSELECT COUNT(*) FROM fleets WHERE ship_type = 'Container Ship' AND build_year < 2010;\nThis query calculates the total number of container ships in the fleet that were built before 2010 by counting the number of records in the fleets table where the ship_type is 'Container Ship' and the build_year is less than 2010.</s>"}
{"text": "<s>[INST] \nCalculate the total REE production cost for each company, including the average CO2 emissions.\nCREATE TABLE costs (company_id INT, year INT, ree_production_cost INT, co2_emissions INT); INSERT INTO costs (company_id, year, ree_production_cost, co2_emissions) VALUES (1, 2019, 12000, 120), (1, 2020, 15000, 150), (1, 2021, 18000, 180), (2, 2019, 8000, 100), (2, 2020, 10000, 120), (2, 2021, 12000, 140); \n[/INST]\nSELECT company_id, SUM(ree_production_cost) as total_cost, AVG(co2_emissions) as avg_co2_emissions FROM costs GROUP BY company_id;\nThis query calculates the total REE production cost and average CO2 emissions for each company by summing the 'ree_production_cost' and averaging the 'co2_emissions' columns grouped by 'company_id'.</s>"}
{"text": "<s>[INST] \nWhat is the distribution of funding sources for the \"Literature Festival\" and \"Film Festival\" programs?\nCREATE TABLE LiteratureFestival(id INT, funding_source VARCHAR(20), amount DECIMAL(10,2)); CREATE TABLE FilmFestival(id INT, funding_source VARCHAR(20), amount DECIMAL(10,2)); \n[/INST]\nSELECT funding_source, SUM(amount) FROM LiteratureFestival GROUP BY funding_source UNION SELECT funding_source, SUM(amount) FROM FilmFestival GROUP BY funding_source;\nThe SQL query calculates the total amount of funding for each funding source for both the \"Literature Festival\" and \"Film Festival\" programs using the UNION operator to combine the two results.</s>"}
{"text": "<s>[INST] \nWhat is the maximum citizen feedback score for recreation centers?\nCREATE TABLE Feedback (Service VARCHAR(25), Score INT); INSERT INTO Feedback (Service, Score) VALUES ('Library', 8), ('Park', 7), ('Recreation Center', 9); \n[/INST]\nSELECT MAX(Score) FROM Feedback WHERE Service = 'Recreation Center';\nThis query calculates the maximum citizen feedback score for recreation centers. It filters the data by service type and then finds the maximum score for all rows that meet this criterion.</s>"}
{"text": "<s>[INST] \nWhat is the percentage of wins for each team in the last 5 games, ordered from the highest to the lowest?\nCREATE TABLE teams (team_id INT, team_name VARCHAR(50), city VARCHAR(50));CREATE TABLE games (game_id INT, team_id INT, date DATE, won BOOLEAN); INSERT INTO teams VALUES (1, 'Celtics', 'Boston'); INSERT INTO teams VALUES (2, '76ers', 'Philadelphia'); INSERT INTO games VALUES (1, 1, '2022-02-15', true); INSERT INTO games VALUES (2, 1, '2022-02-17', false); INSERT INTO games VALUES (3, 2, '2022-02-16', true); INSERT INTO games VALUES (4, 2, '2022-02-18', true); \n[/INST]\nSELECT team_id, AVG(won) as win_percentage, RANK() OVER (ORDER BY AVG(won) DESC) as rank FROM games WHERE date >= CURRENT_DATE - INTERVAL '5 days' GROUP BY team_id ORDER BY rank;\nThis query calculates the percentage of wins for each team in the last 5 games by filtering the games table with a WHERE clause that uses the CURRENT_DATE system function and subtracts 5 days. It then groups the table by team_id, applies the AVG function on the won column to calculate the percentage of wins, and orders the result by the rank in descending order using the RANK() window function.</s>"}
{"text": "<s>[INST] \nWhat is the total budget allocated for auditory assistance support programs in the 'West' region?\nCREATE TABLE Regions (RegionID INT, RegionName VARCHAR(50)); CREATE TABLE SupportServices (ServiceID INT, ServiceName VARCHAR(50), ServiceType VARCHAR(50), Budget DECIMAL(10,2)); CREATE TABLE SupportPrograms (ProgramID INT, ProgramName VARCHAR(50), Budget DECIMAL(10,2), RegionID INT, ServiceID INT); INSERT INTO Regions (RegionID, RegionName) VALUES (1, 'Northeast'), (2, 'Southeast'), (3, 'Midwest'), (4, 'South'), (5, 'West'); INSERT INTO SupportServices (ServiceID, ServiceName, ServiceType, Budget) VALUES (1, 'ASL Interpreter', 'SignLanguage', 15000), (2, 'Wheelchair Ramp', 'PhysicalAccess', 8000), (3, 'Braille Materials', 'VisualAssistance', 12000), (4, 'Assistive Listening Devices', 'AuditoryAssistance', 10000); INSERT INTO SupportPrograms (ProgramID, ProgramName, Budget, RegionID, ServiceID) VALUES (1, 'Braille Materials', 12000, 1, 3), (2, 'Low Vision Aids', 15000, 1, 4), (3, 'Color Contrast Software', 9000, 2, 4), (4, 'Screen Magnifiers', 11000, 2, 4); \n[/INST]\nSELECT SUM(sp.Budget) as TotalBudget FROM SupportPrograms sp JOIN Regions r ON sp.RegionID = r.RegionID JOIN SupportServices ss ON sp.ServiceID = ss.ServiceID WHERE ss.ServiceType = 'AuditoryAssistance' AND r.RegionName = 'West';\nThis query calculates the total budget for auditory assistance support programs in the 'West' region. It performs an inner join between the SupportPrograms, Regions, and SupportServices tables on the RegionID and ServiceID columns. Then, it filters the results based on the ServiceType column being 'AuditoryAssistance' and the RegionName column being 'West'. Lastly, it calculates the total budget for the filtered results using the SUM function.</s>"}
{"text": "<s>[INST] \nWhat was the total number of events and total attendees for each event type in 2023?\nCREATE TABLE events (id INT, event_type VARCHAR(20), event_date DATE, num_attendees INT); INSERT INTO events (id, event_type, event_date, num_attendees) VALUES (1, 'Fundraising', '2023-02-01', 50); INSERT INTO events (id, event_type, event_date, num_attendees) VALUES (2, 'Awareness', '2023-03-15', 75); \n[/INST]\nSELECT event_type, COUNT(DISTINCT id) as total_events, SUM(num_attendees) as total_attendees FROM events WHERE event_date BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY event_type;\nThis SQL query calculates the total number of events and total attendees for each event type in 2023 by counting the distinct number of ids and summing the num_attendees for each event_type, filtering the event_date between 2023-01-01 and 2023-12-31, then grouping by event_type.</s>"}
{"text": "<s>[INST] \nList all playlists that contain songs from both 'The Rolling Stones' and 'Led Zeppelin' bands.\nCREATE TABLE playlists (playlist_id INT, playlist VARCHAR(50)); CREATE TABLE playlist_songs (playlist_id INT, song_id INT); CREATE TABLE songs (song_id INT, song VARCHAR(50), band VARCHAR(50)); INSERT INTO playlists VALUES (1, 'Classic Rock'), (2, 'Guitar Heroes'), (3, 'Rock Legends'); INSERT INTO playlist_songs VALUES (1, 1), (1, 2), (2, 2), (3, 3); INSERT INTO songs VALUES (1, 'Paint It Black', 'The Rolling Stones'), (2, 'Stairway To Heaven', 'Led Zeppelin'), (3, 'So What', 'Miles Davis'); \n[/INST]\nSELECT p.playlist FROM playlists p JOIN playlist_songs ps1 ON p.playlist_id = ps1.playlist_id JOIN playlist_songs ps2 ON p.playlist_id = ps2.playlist_id JOIN songs s1 ON ps1.song_id = s1.song_id JOIN songs s2 ON ps2.song_id = s2.song_id WHERE s1.band = 'The Rolling Stones' AND s2.band = 'Led Zeppelin';\nThis query performs a self-join on the playlist_songs table to find playlists associated with both 'The Rolling Stones' and 'Led Zeppelin' songs, and then joins the playlist_songs table with the songs table to retrieve the corresponding playlist names.</s>"}
{"text": "<s>[INST] \nWhat is the total number of open pedagogy projects per institution that have been completed after 2020?\nCREATE TABLE projects (project_id INT, institution_id INT, completion_date DATE, project_type VARCHAR); \n[/INST]\nSELECT institution_id, COUNT(project_id) as total_projects FROM projects WHERE completion_date > '2020-01-01' AND project_type = 'open pedagogy' GROUP BY institution_id;\nThe SQL query calculates the total number of open pedagogy projects per institution that have been completed after 2020 by filtering the records where completion_date is greater than '2020-01-01' and project_type is 'open pedagogy'. The records are then grouped by institution_id and the COUNT function is applied to the project_id column.</s>"}
{"text": "<s>[INST] \nHow many building permits were issued in Texas in June 2020?\nCREATE TABLE Building_Permits (Permit_ID INT, Permit_Date DATE, Location TEXT, Type TEXT); INSERT INTO Building_Permits (Permit_ID, Permit_Date, Location, Type) VALUES (1, '2020-01-01', 'Texas', 'Residential'), (2, '2020-02-15', 'California', 'Commercial'), (3, '2020-04-20', 'Texas', 'Residential'), (4, '2020-06-30', 'Texas', 'Commercial'); \n[/INST]\nSELECT COUNT(*) FROM Building_Permits WHERE Location = 'Texas' AND Permit_Date = '2020-06-30';\nThis query counts the number of building permits issued in Texas in June 2020 by filtering the Building_Permits table based on the location and permit date criteria.</s>"}
{"text": "<s>[INST] \nWhat percentage of articles published in 2020 by news organizations in Africa focused on disinformation?\nCREATE TABLE articles (id INT, title VARCHAR(255), publication_date DATE, topic VARCHAR(50), news_org VARCHAR(50)); INSERT INTO articles (id, title, publication_date, topic, news_org) VALUES (1, 'Article1', '2020-01-01', 'Disinformation', 'Org1'), (2, 'Article2', '2020-02-15', 'Politics', 'Org2'), (3, 'Article3', '2020-12-31', 'Corruption', 'Org3'); \n[/INST]\nSELECT (COUNT(*) FILTER (WHERE topic = 'Disinformation'))::DECIMAL / COUNT(*) AS disinformation_percentage FROM articles WHERE YEAR(publication_date) = 2020 AND news_org LIKE '%Africa%';\nThis query calculates the percentage of articles published in 2020 by news organizations in Africa that focused on disinformation by filtering the articles table based on the publication_date and news_org, and using the COUNT and FILTER functions to count the number of rows where the topic is disinformation, dividing it by the total number of rows, and casting the result as a decimal.</s>"}
{"text": "<s>[INST] \nWhat is the average word count of articles in the 'politics' category?\nCREATE TABLE categories (id INT, name TEXT); CREATE TABLE articles (id INT, title TEXT, content TEXT, category_id INT); INSERT INTO categories (id, name) VALUES (1, 'Politics'), (2, 'Technology'), (3, 'Sports'); INSERT INTO articles (id, title, content, category_id) VALUES (1, 'Article 1', 'Content 1', 1), (2, 'Article 2', 'Content 2', 2), (3, 'Article 3', 'Content 3', 1), (4, 'Article 4', 'Content 4', 3); \n[/INST]\nSELECT AVG(LENGTH(articles.content) - LENGTH(REPLACE(articles.content, ' ', '')) + 1) as average_word_count FROM articles INNER JOIN categories ON articles.category_id = categories.id WHERE categories.name = 'Politics';\nThis SQL query calculates the average word count of articles in the 'politics' category by performing an inner join on the categories and articles tables, where the articles.category_id equals the categories.id and the categories.name is 'Politics', and using the AVG function to calculate the average word count.</s>"}
{"text": "<s>[INST] \nWhat is the average temperature in 'Sydney' for July?\nCREATE TABLE weather (city VARCHAR(255), temperature FLOAT, date DATE); INSERT INTO weather (city, temperature, date) VALUES ('Sydney', 60, '2022-07-01'), ('Sydney', 65, '2022-07-02'), ('Sydney', 62, '2022-07-03'); \n[/INST]\nSELECT AVG(temperature) FROM weather WHERE city = 'Sydney' AND date BETWEEN '2022-07-01' AND '2022-07-31';\nThe SQL query calculates the average temperature for Sydney in July by selecting the temperature values for Sydney in July and using the AVG function to find the average.</s>"}
{"text": "<s>[INST] \nWhat percentage of cosmetic products do not have 'fragrance' as an ingredient?\nCREATE TABLE products (product_id INT, product_name TEXT, has_fragrance BOOLEAN); INSERT INTO products (product_id, product_name, has_fragrance) VALUES (1, 'Soap', false), (2, 'Lotion', true), (3, 'Deodorant', false); \n[/INST]\nSELECT (COUNT(*) - SUM(has_fragrance)) * 100.0 / COUNT(*) as percentage FROM products;\nThe SQL query calculates the percentage of cosmetic products that do not have 'fragrance' as an ingredient by subtracting the sum of has_fragrance column from the count of all rows and multiplying it by 100.0, then dividing it by the count of all rows.</s>"}
{"text": "<s>[INST] \nWhat is the average fare for routes that have a frequency of more than once per hour?\nCREATE TABLE RouteFrequency (RouteID int, Frequency int); INSERT INTO RouteFrequency (RouteID, Frequency) VALUES (1, 30), (2, 45), (3, 60); CREATE TABLE RouteAvgFares (RouteID int, AvgFare decimal(5,2)); INSERT INTO RouteAvgFares (RouteID, AvgFare) VALUES (1, 4.00), (2, 3.25), (3, 2.75); \n[/INST]\nSELECT AVG(AvgFare) FROM RouteAvgFares INNER JOIN RouteFrequency ON RouteAvgFares.RouteID = RouteFrequency.RouteID WHERE RouteFrequency.Frequency > 60;\nThe SQL query calculates the average fare for routes with a frequency of more than once per hour by grouping RouteAvgFares and RouteFrequency tables by RouteID and filtering the groups with more than 60 minutes of frequency, then calculating the average fare for those groups.</s>"}
{"text": "<s>[INST] \nWhich countries received military humanitarian assistance in 2020?\nCREATE TABLE countries (id INT, name TEXT, region TEXT); INSERT INTO countries (id, name, region) VALUES (1, 'Country1', 'Africa'), (2, 'Country2', 'Asia'), (3, 'Country3', 'Europe'); CREATE TABLE military_humanitarian_assistance (id INT, country_id INT, year INT); INSERT INTO military_humanitarian_assistance (id, country_id, year) VALUES (1, 1, 2019), (2, 3, 2020), (3, 1, 2020); \n[/INST]\nSELECT DISTINCT countries.name FROM countries JOIN military_humanitarian_assistance ON countries.id = military_humanitarian_assistance.country_id WHERE military_humanitarian_assistance.year = 2020;\nThis query retrieves the names of countries that received military humanitarian assistance in 2020 by joining the countries and military_humanitarian_assistance tables on country_id, filtering by year, and selecting the distinct names of countries.</s>"}
{"text": "<s>[INST] \nInsert new cargo records into the cargo_tracking table with cargo_name 'Fertilizer', destination 'Sydney', and eta '2023-04-15'\nCREATE TABLE cargo_tracking (cargo_id INT, cargo_name VARCHAR(50), destination VARCHAR(50), eta DATE); \n[/INST]\nINSERT INTO cargo_tracking (cargo_name, destination, eta) VALUES ('Fertilizer', 'Sydney', '2023-04-15');\n* Add a new row to the cargo_tracking table.* Populate the cargo_name with 'Fertilizer', the destination with 'Sydney', and the eta with '2023-04-15'.</s>"}
{"text": "<s>[INST] \nHow many safety inspections were conducted per month in the last year?\nCREATE TABLE inspections (id INT, vessel_id INT, inspection_date DATE); \n[/INST]\nSELECT MONTH(inspection_date) as month, COUNT(*) as num_inspections FROM inspections WHERE inspection_date >= DATE_SUB(CURDATE(), INTERVAL 1 YEAR) GROUP BY month;\nThe SQL query first extracts the month from the inspection_date column using the MONTH function. It then filters the results to only include rows where the inspection_date is within the last year using the DATE_SUB function. The final result is a list of months and the number of safety inspections conducted during each month, grouped by month.</s>"}
{"text": "<s>[INST] \nInsert a new record into the flight_safety table with the following details: Flight ID 31, Flight Date '2023-03-02', Carrier 'Blue Origin', Event 'Aborted Takeoff', Outcome 'Failure'\nCREATE TABLE flight_safety (flight_id INT, flight_date DATE, carrier VARCHAR(255), event VARCHAR(255), outcome VARCHAR(255)); \n[/INST]\nINSERT INTO flight_safety (flight_id, flight_date, carrier, event, outcome) VALUES (31, '2023-03-02', 'Blue Origin', 'Aborted Takeoff', 'Failure');\n* This query will insert a new record into the flight_safety table with the following details: Flight ID 31, Flight Date '2023-03-02', Carrier 'Blue Origin', Event 'Aborted Takeoff', Outcome 'Failure'.</s>"}
{"text": "<s>[INST] \nWhat is the contact information and language preservation status for organizations in Africa?\nCREATE TABLE organizations (id INT, name VARCHAR, contact VARCHAR, region VARCHAR); INSERT INTO organizations (id, name, contact, region) VALUES (1, 'Organization A', 'contact1@example.com', 'Africa'), (2, 'Organization B', 'contact2@example.com', 'Europe'); CREATE TABLE preservation_status (id INT, status VARCHAR); INSERT INTO preservation_status (id, status) VALUES (1, 'Active'), (2, 'Inactive'); \n[/INST]\nSELECT organizations.name, organizations.contact, preservation_status.status FROM organizations INNER JOIN preservation_status ON organizations.region = preservation_status.status WHERE organizations.region = 'Africa';\nThis query performs an inner join on the organizations and preservation_status tables, using the region as the common key. It then filters the results to only show rows where the organizations.region is 'Africa'.</s>"}
{"text": "<s>[INST] \nGet the total number of VR headsets sold in Canada and the United Kingdom\nCREATE TABLE VRAdoption (Region VARCHAR(20), HeadsetsSold INT); INSERT INTO VRAdoption (Region, HeadsetsSold) VALUES ('Canada', 80000), ('United States', 500000), ('United Kingdom', 150000); \n[/INST]\nSELECT SUM(HeadsetsSold) FROM VRAdoption WHERE Region IN ('Canada', 'United Kingdom')\nThis query sums the HeadsetsSold column values from the VRAdoption table for 'Canada' and 'United Kingdom' regions.</s>"}
{"text": "<s>[INST] \nHow many soil moisture sensors have a temperature above 20 degrees in 'Field011'?\nCREATE TABLE soil_moisture_sensors (id INT, field_id VARCHAR(10), sensor_id VARCHAR(10), temperature FLOAT); INSERT INTO soil_moisture_sensors (id, field_id, sensor_id, temperature) VALUES (1, 'Field011', 'SM011', 22.1), (2, 'Field011', 'SM012', 19.9); \n[/INST]\nSELECT COUNT(*) FROM soil_moisture_sensors WHERE field_id = 'Field011' AND temperature > 20;\nThis query calculates the number of soil moisture sensors with a temperature above 20 degrees in 'Field011' by filtering the records based on the condition, and then applying the COUNT function to all records.</s>"}
{"text": "<s>[INST] \nWhat are the names of the top 5 cities with the highest CO2 emissions in the 'energy_efficiency' table?\nCREATE TABLE energy_efficiency (city VARCHAR(255), co2_emissions INT); \n[/INST]\nSELECT city FROM energy_efficiency ORDER BY co2_emissions DESC LIMIT 5;\nThe SQL query selects the 'city' column from the 'energy_efficiency' table, orders the results by the 'co2_emissions' column in descending order, and limits the output to the top 5 records.</s>"}
{"text": "<s>[INST] \nWhich sustainable beauty brands have a customer return rate over 20%?\nCREATE TABLE BrandSales (Brand VARCHAR(50), ProductID INT, ProductName VARCHAR(50), UnitsSold INT, ReturnRate DECIMAL(3,1)); INSERT INTO BrandSales (Brand, ProductID, ProductName, UnitsSold, ReturnRate) VALUES ('EcoBeauty', 6, 'Reusable Makeup Pads', 500, 25.3); INSERT INTO BrandSales (Brand, ProductID, ProductName, UnitsSold, ReturnRate) VALUES ('GreenGlow', 7, 'Vegan Lipstick', 700, 18.7); INSERT INTO BrandSales (Brand, ProductID, ProductName, UnitsSold, ReturnRate) VALUES ('NatureLuxe', 8, 'Organic Facial Serum', 600, 21.5); \n[/INST]\nSELECT Brand, AVG(ReturnRate) AS AvgReturnRate FROM BrandSales WHERE UnitsSold > 500 GROUP BY Brand HAVING AvgReturnRate > 20;\nCalculates the average return rate for sustainable beauty brands with sales over 500 units by filtering records based on the conditions in the WHERE and HAVING clauses, grouping them by brand, and then taking the average of the return rate column.</s>"}
{"text": "<s>[INST] \nWhat is the inventory level for each product per warehouse per week?\ncreate table Inventory (Product varchar(255), Warehouse varchar(255), Quantity int, Timestamp datetime); insert into Inventory values ('Product1', 'Warehouse1', 100, '2022-01-01 00:00:00'), ('Product2', 'Warehouse2', 150, '2022-01-02 00:00:00'), ('Product1', 'Warehouse1', 120, '2022-01-03 00:00:00'); \n[/INST]\nselect Product, Warehouse, DATE_PART('week', Timestamp) as Week, AVG(Quantity) as AvgInventory from Inventory group by Product, Warehouse, Week;\nThe SQL query calculates the inventory level for each product per warehouse per week in the Inventory table. It uses the AVG function to calculate the average inventory level, DATE_PART function to extract the week from the Timestamp, and GROUP BY clause to group the data by Product, Warehouse, and Week.</s>"}
{"text": "<s>[INST] \nUpdate the district of student 'Sofia' to 'HeartSchool' in the 'Student' table.\nCREATE TABLE Student (StudentID INT, Name VARCHAR(20), District VARCHAR(20)); INSERT INTO Student (StudentID, Name, District) VALUES (1, 'Sofia', 'MindSchool'); INSERT INTO Student (StudentID, Name, District) VALUES (2, 'Ella', 'HeartSchool'); \n[/INST]\nUPDATE Student SET District = 'HeartSchool' WHERE Name = 'Sofia';\nThe SQL query updates the district of student 'Sofia' to 'HeartSchool' in the 'Student' table by specifying the UPDATE statement with the SET clause that filters the record based on the Name.</s>"}
{"text": "<s>[INST] \nUpdate the 'design_standard' column to 'AASHTO LRFD' for all bridges in the 'East Coast' region.\nCREATE TABLE bridges (id INT, name TEXT, region TEXT, design_standard TEXT); INSERT INTO bridges (id, name, region, design_standard) VALUES (1, 'Golden Gate Bridge', 'West Coast', 'Caltrans'), (2, 'Brooklyn Bridge', 'East Coast', 'AASHTO LRFD'), (3, 'Bay Bridge', 'West Coast', 'Caltrans'); \n[/INST]\nUPDATE bridges SET design_standard = 'AASHTO LRFD' WHERE region = 'East Coast';\nThis query updates the 'design_standard' column to 'AASHTO LRFD' for all bridges in the 'East Coast' region. It uses the WHERE clause to filter the bridges in the 'East Coast' region and sets the 'design_standard' column to 'AASHTO LRFD'.</s>"}
{"text": "<s>[INST] \nCount community health workers by state, sorted by the number of workers in descending order.\nCREATE TABLE community_health_workers (worker_id INT, name TEXT, state TEXT); INSERT INTO community_health_workers (worker_id, name, state) VALUES (1, 'Ms. Sarah Johnson', 'TX'), (2, 'Mr. David Kim', 'CA'); \n[/INST]\nSELECT c.state, COUNT(*) AS worker_count FROM community_health_workers c GROUP BY c.state ORDER BY worker_count DESC;\nCount the number of community health workers by state, grouped by state, and sorted by the number of workers in descending order.</s>"}
{"text": "<s>[INST] \nHow many dispensaries are there in the state of Oregon?\nCREATE TABLE dispensaries (id INT, city VARCHAR(50), state VARCHAR(50), count INT); INSERT INTO dispensaries (id, city, state, count) VALUES (1, 'Denver', 'Colorado', 100), (2, 'Los Angeles', 'California', 200), (3, 'Portland', 'Oregon', 150); \n[/INST]\nSELECT SUM(count) FROM dispensaries WHERE state = 'Oregon';\nThis SQL query counts the number of dispensaries in the state of Oregon by summing the count values in the dispensaries table where the state is 'Oregon'.</s>"}
{"text": "<s>[INST] \nWhat is the percentage of patients who improved after teletherapy?\nCREATE TABLE outcomes (id INT, patient_id INT, improvement VARCHAR(10), therapy_type VARCHAR(10)); INSERT INTO outcomes (id, patient_id, improvement, therapy_type) VALUES (1, 1, 'improved', 'teletherapy'), (2, 2, 'did not improve', 'in-person'), (3, 3, 'improved', 'teletherapy'), (4, 4, 'did not improve', 'in-person'), (5, 5, 'improved', 'teletherapy'), (6, 6, 'did not improve', 'in-person'); \n[/INST]\nSELECT (COUNT(*) FILTER (WHERE improvement = 'improved' AND therapy_type = 'teletherapy')) * 100.0 / COUNT(*) AS percentage FROM outcomes;\nThis SQL query calculates the percentage of patients who improved after teletherapy by selecting the number of rows where the improvement is equal to 'improved' and the therapy_type is equal to 'teletherapy' and multiplying it by 100.0, and then dividing it by the total number of rows using the COUNT function. The FILTER keyword is used to only count rows that meet the specified condition.</s>"}
{"text": "<s>[INST] \nWhich decentralized applications (DApps) are associated with the 'Ethereum' blockchain and what are their names?\nCREATE TABLE dapps (dapp_id INT, dapp_name VARCHAR(50), blockchain_id INT); CREATE TABLE blockchains (blockchain_id INT, blockchain_name VARCHAR(50)); INSERT INTO dapps (dapp_id, dapp_name, blockchain_id) VALUES (1, 'Uniswap', 1); INSERT INTO blockchains (blockchain_id, blockchain_name) VALUES (1, 'Ethereum'); \n[/INST]\nSELECT dapps.dapp_name, blockchains.blockchain_name FROM dapps INNER JOIN blockchains ON dapps.blockchain_id = blockchains.blockchain_id WHERE blockchains.blockchain_name = 'Ethereum';\nThe SQL query performs an inner join between the 'dapps' and 'blockchains' tables on the 'blockchain_id' column. It filters the results to only show records where the 'blockchain_name' is 'Ethereum'. It selects the 'dapp_name' column from the 'dapps' table and the 'blockchain_name' column from the 'blockchains' table. The result is a list of DApps and their corresponding blockchain networks, specifically filtering for 'Ethereum'.</s>"}
{"text": "<s>[INST] \nList all marine species in the Indian Ocean.\nCREATE TABLE MarineSpecies (id INT, species VARCHAR(255), location VARCHAR(255)); INSERT INTO MarineSpecies (id, species, location) VALUES (1, 'Whale Shark', 'Indian Ocean'); INSERT INTO MarineSpecies (id, species, location) VALUES (2, 'Olive Ridley Turtle', 'Indian Ocean'); \n[/INST]\nSELECT species FROM MarineSpecies WHERE location = 'Indian Ocean';\nThis query retrieves the names of all marine species in the 'Indian Ocean' from the 'MarineSpecies' table.</s>"}
{"text": "<s>[INST] \nWhat is the average age of vessels launched in 2018 in the fleet_management table?\nCREATE TABLE fleet_management (vessel_id INT, vessel_name VARCHAR(50), launch_date DATE); INSERT INTO fleet_management (vessel_id, vessel_name, launch_date) VALUES (1, 'Vessel_A', '2016-01-01'), (2, 'Vessel_B', '2017-01-01'), (3, 'Vessel_C', '2018-01-01'), (4, 'Vessel_D', '2018-01-02'); \n[/INST]\nSELECT AVG(DATEDIFF(CURDATE(), launch_date) / 365.25) FROM fleet_management WHERE YEAR(launch_date) = 2018;\nThis SQL query calculates the average age of vessels launched in 2018 in the fleet_management table by finding the difference between the current date and the launch_date of each vessel launched in 2018 using the DATEDIFF function. It then divides this difference by 365.25 to convert it to years, filters the data by launch_date using the WHERE clause and the YEAR function, and calculates the average using the AVG aggregate function.</s>"}
{"text": "<s>[INST] \nHow many humanitarian assistance missions were conducted in Africa?\nCREATE TABLE Humanitarian_Assistance (Mission_ID INT, Mission_Name VARCHAR(50), Location VARCHAR(50), Start_Date DATE, End_Date DATE); INSERT INTO Humanitarian_Assistance (Mission_ID, Mission_Name, Location, Start_Date, End_Date) VALUES (1, 'Operation Restore Hope', 'Somalia', '1992-01-01', '1993-12-31'); \n[/INST]\nSELECT COUNT(*) as Total_Missions FROM Humanitarian_Assistance WHERE Location = 'Africa';\nThis SQL query counts the number of humanitarian assistance missions in Africa by filtering the location column.</s>"}
{"text": "<s>[INST] \nWhat is the total amount of climate finance provided to countries in the Asia-Pacific region for climate adaptation projects in 2020?\nCREATE TABLE climate_finance (year INT, region VARCHAR(50), funding_type VARCHAR(50), amount INT);INSERT INTO climate_finance (year, region, funding_type, amount) VALUES (2020, 'Asia-Pacific', 'climate adaptation', 15000000); \n[/INST]\nSELECT SUM(amount) FROM climate_finance WHERE year = 2020 AND region = 'Asia-Pacific' AND funding_type = 'climate adaptation';\nThis SQL query calculates the total amount of climate finance provided to the Asia-Pacific region for climate adaptation projects in 2020 by summing the 'amount' column where the 'year' is 2020, the 'region' is 'Asia-Pacific', and the 'funding_type' is 'climate adaptation'.</s>"}
{"text": "<s>[INST] \nWhat is the daily revenue for each menu category in the last 30 days?\nCREATE TABLE daily_sales (sale_date DATE, menu_category VARCHAR(255), revenue INT); \n[/INST]\nSELECT sale_date, menu_category, SUM(revenue) as daily_revenue FROM daily_sales WHERE sale_date BETWEEN DATEADD(day, -30, GETDATE()) AND GETDATE() GROUP BY sale_date, menu_category;\nThis query groups the results by the sale_date and menu_category columns and calculates the daily revenue for each combination using the SUM() function and the WHERE clause.</s>"}
{"text": "<s>[INST] \nAdd data to 'water_conservation' table\nCREATE TABLE water_conservation (id INT PRIMARY KEY, location VARCHAR(50), water_savings FLOAT); \n[/INST]\nINSERT INTO water_conservation (id, location, water_savings) VALUES (1, 'San Francisco', 12.3);\n1. The INSERT INTO statement is used to add new records to the 'water_conservation' table. 2. The VALUES keyword is used to specify the values for each column in the new record. 3. This example adds a single record with an id of 1, a location of 'San Francisco', and water_savings of 12.3.</s>"}
{"text": "<s>[INST] \nDelete all pollution control initiatives before 2022.\nCREATE TABLE pollution_initiatives (initiative_id INT, site_id INT, initiative_date DATE, initiative_description TEXT); INSERT INTO pollution_initiatives (initiative_id, site_id, initiative_date, initiative_description) VALUES (1, 1, '2022-08-01', 'Installed new filters'), (2, 3, '2022-07-15', 'Regular cleaning schedule established'); \n[/INST]\nDELETE FROM pollution_initiatives WHERE initiative_date < '2022-01-01';\nThis query uses the DELETE statement to remove all pollution control initiatives with a date before 2022.</s>"}
{"text": "<s>[INST] \nWhat is the total cost of all NASA missions?\nCREATE TABLE nasa_missions (id INT, mission_cost FLOAT); \n[/INST]\nSELECT SUM(mission_cost) FROM nasa_missions;\nThis query calculates the total cost of all NASA missions by using the SUM function on the mission_cost column of the nasa_missions table.</s>"}
{"text": "<s>[INST] \nCalculate the total installed capacity (in MW) of Wind Power projects in Germany\nCREATE TABLE wind_projects (project_id INT, name VARCHAR(50), location VARCHAR(50), capacity_mw FLOAT); INSERT INTO wind_projects (project_id, name, location, capacity_mw) VALUES (1, 'Windpark Fargemoor', 'Germany', 32.4); \n[/INST]\nSELECT SUM(capacity_mw) FROM wind_projects WHERE location = 'Germany' AND project_id IN (1, 2, 3, 4, 5);\nThis query calculates the total installed capacity of wind power projects in Germany by summing the capacity_mw column for projects in Germany.</s>"}
{"text": "<s>[INST] \nWhat is the average response time to security incidents for IT companies in Q4 2020, grouped by country?\nCREATE TABLE security_incidents (id INT, company TEXT, country TEXT, incident_date DATE, response_time INT); INSERT INTO security_incidents (id, company, country, incident_date, response_time) VALUES (1, 'IT Company A', 'USA', '2020-10-15', 120); INSERT INTO security_incidents (id, company, country, incident_date, response_time) VALUES (2, 'IT Company B', 'Canada', '2020-11-02', 180); \n[/INST]\nSELECT country, AVG(response_time) FROM security_incidents WHERE company LIKE '%IT Company%' AND incident_date >= '2020-10-01' AND incident_date < '2021-01-01' GROUP BY country;\nThis query calculates the average response time to security incidents for IT companies in Q4 2020, grouped by country. It does this by using the AVG function on the 'response_time' column. The WHERE clause filters the rows based on the conditions provided, ensuring only the relevant data is used in the calculation. The GROUP BY statement organizes the results by country.</s>"}
{"text": "<s>[INST] \nWhat is the average CO2 emission of vehicles by type in Spain?\nCREATE TABLE vehicle_emissions (id INT, type VARCHAR(50), country VARCHAR(50), co2_emissions FLOAT); INSERT INTO vehicle_emissions (id, type, country, co2_emissions) VALUES (1, 'Car', 'Spain', 120.5); INSERT INTO vehicle_emissions (id, type, country, co2_emissions) VALUES (2, 'SUV', 'Spain', 150.3); INSERT INTO vehicle_emissions (id, type, country, co2_emissions) VALUES (3, 'Truck', 'Spain', 180.0); \n[/INST]\nSELECT AVG(co2_emissions) FROM vehicle_emissions WHERE country = 'Spain' GROUP BY type;\nThis query calculates the average CO2 emissions for each vehicle type in Spain by grouping the records by type and calculating the average CO2 emissions.</s>"}
{"text": "<s>[INST] \nWhat is the average amount of rainfall in the Pacific Islands during the months of June, July, and August?\nCREATE TABLE RainfallData (ID INT, Location VARCHAR(255), Month INT, Rainfall INT); INSERT INTO RainfallData (ID, Location, Month, Rainfall) VALUES (1, 'Pacific Islands', 6, 100), (2, 'Pacific Islands', 6, 120), (3, 'Pacific Islands', 7, 110), (4, 'Pacific Islands', 7, 130), (5, 'Pacific Islands', 8, 105), (6, 'Pacific Islands', 8, 125); \n[/INST]\nSELECT AVG(Rainfall) FROM RainfallData WHERE Location = 'Pacific Islands' AND Month IN (6,7,8);\nThe SQL query calculates the average amount of rainfall in the Pacific Islands during the months of June, July, and August by filtering the records based on Location and Month, and then applying the AVG function to the Rainfall column.</s>"}
{"text": "<s>[INST] \nIdentify the top 3 volunteer-providing countries in Asia for H1 2017?\nCREATE TABLE volunteers (volunteer_id INT, volunteer_name TEXT, volunteer_country TEXT, volunteer_region TEXT, volunteer_join_date DATE); INSERT INTO volunteers (volunteer_id, volunteer_name, volunteer_country, volunteer_region, volunteer_join_date) VALUES (1, 'Ravi Patel', 'India', 'Asia', '2017-03-15'); \n[/INST]\nSELECT volunteer_country, COUNT(*) AS volunteers_count FROM volunteers WHERE volunteer_region = 'Asia' AND EXTRACT(QUARTER FROM volunteer_join_date) IN (1, 2) GROUP BY volunteer_country ORDER BY volunteers_count DESC LIMIT 3;\nThis query identifies the top 3 volunteer-providing countries in Asia for H1 2017 by counting the rows, filtering them by Asia using the volunteer_region column and quarters 1 and 2 using the volunteer_join_date's quarter with EXTRACT, grouping the results by volunteer_country, and ordering them by volunteers_count in descending order. The query limits the result set to 3.</s>"}
{"text": "<s>[INST] \nIdentify vessels that have not entered a port in the last 30 days.\nCREATE TABLE Vessels ( id INT PRIMARY KEY, name VARCHAR(50), type VARCHAR(50), length FLOAT, max_speed FLOAT); CREATE TABLE Port_Visits ( id INT PRIMARY KEY, vessel_id INT, port_id INT, visit_date DATE); \n[/INST]\nSELECT Vessels.name FROM Vessels  LEFT JOIN Port_Visits ON Vessels.id = Port_Visits.vessel_id WHERE Port_Visits.visit_date > DATE_SUB(CURRENT_DATE, INTERVAL 30 DAY) IS NULL;\nThis query uses a left join to combine the Vessels and Port_Visits tables based on the vessel_id. It then filters the results to only the vessels that have not had a port visit in the last 30 days and returns their names.</s>"}
{"text": "<s>[INST] \nList all the customers who have a food allergy to peanuts.\nCREATE TABLE Customers (customer_id INT, first_name VARCHAR(15), last_name VARCHAR(15), food_allergy VARCHAR(15)); INSERT INTO Customers (customer_id, first_name, last_name, food_allergy) VALUES (1, 'John', 'Doe', 'Peanuts'), (2, 'Jane', 'Doe', 'Nuts'), (3, 'Bob', 'Smith', NULL); \n[/INST]\nSELECT first_name, last_name FROM Customers WHERE food_allergy = 'Peanuts';\nThe SQL query returns the first and last names of customers who have a food allergy to peanuts by selecting the first_name and last_name columns where the food_allergy column is equal to 'Peanuts'.</s>"}
{"text": "<s>[INST] \nWhat is the average waste generation metric for all regions in 2019?\nCREATE TABLE waste_generation ( id INT PRIMARY KEY, region VARCHAR(50), year INT, metric DECIMAL(5,2)); INSERT INTO waste_generation (id, region, year, metric) VALUES (1, 'Mumbai', 2018, 5678.90), (2, 'Mumbai', 2019, 6001.12), (3, 'Tokyo', 2018, 3456.78), (4, 'Tokyo', 2019, 3501.09); \n[/INST]\nSELECT AVG(metric) FROM waste_generation WHERE year = 2019 GROUP BY region;\nThis SQL statement calculates the average waste generation metric for all regions in the year 2019. It does this by selecting the 'metric' column from the 'waste_generation' table where the 'year' is 2019 and then using the AVG function to calculate the average. The GROUP BY clause is used to group the results by region.</s>"}
{"text": "<s>[INST] \nIdentify disaster preparedness training programs and community policing initiatives in districts with the highest crime rates.\nCREATE TABLE crime_stats (district_id INT, crime_rate DECIMAL(5,2)); INSERT INTO crime_stats (district_id, crime_rate) VALUES (1, 2.5), (2, 3.2), (3, 1.8); CREATE TABLE training_programs (id INT, district_id INT, program_type VARCHAR(255)); INSERT INTO training_programs (id, district_id, program_type) VALUES (1, 1, 'Disaster Preparedness'), (2, 2, 'Community Policing'), (3, 3, 'Disaster Preparedness'); \n[/INST]\nSELECT t.district_id, t.program_type FROM training_programs t INNER JOIN (SELECT district_id FROM crime_stats ORDER BY crime_rate DESC LIMIT 1) c ON t.district_id = c.district_id;\nThe SQL query uses a subquery to get the district with the highest crime rate and then performs an INNER JOIN with the training_programs table to get the corresponding training programs in that district.</s>"}
{"text": "<s>[INST] \nPresent average safety stock for all chemicals in 'chemical_inventory' table\nCREATE TABLE chemical_inventory (id INT, chemical_name VARCHAR(50), safety_stock INT); \n[/INST]\nSELECT AVG(safety_stock) FROM chemical_inventory;\nThis query calculates and displays the average safety_stock for all chemicals in the chemical_inventory table.</s>"}
{"text": "<s>[INST] \nUpdate the temperature data for the location with ID 1 in the oceanography_data table\nCREATE TABLE oceanography_data (id INT PRIMARY KEY, location VARCHAR(255), temperature DECIMAL(5,2), salinity DECIMAL(5,2), depth DECIMAL(5,2)); \n[/INST]\nWITH updated_data AS (UPDATE oceanography_data SET temperature = 23.1 WHERE id = 1 RETURNING *) SELECT * FROM updated_data;\nThis SQL query updates the temperature data for the location with ID 1 in the oceanography_data table to 23.1. It uses a Common Table Expression (CTE) to update the record and then returns the updated record using the RETURNING clause. The query then selects the updated record.</s>"}
{"text": "<s>[INST] \nWhich countries in Europe have reported the most climate mitigation efforts in the last 2 years?\nCREATE TABLE climate_mitigation (id INT, country VARCHAR(50), year INT, efforts VARCHAR(50)); INSERT INTO climate_mitigation (id, country, year, efforts) VALUES (1, 'Germany', 2020, 'carbon capture'); \n[/INST]\nSELECT country, COUNT(*) as num_efforts FROM climate_mitigation WHERE year BETWEEN (YEAR(CURRENT_DATE) - 2) AND YEAR(CURRENT_DATE) GROUP BY country ORDER BY num_efforts DESC;\nThe SQL query identifies countries in Europe that have reported the most climate mitigation efforts in the last 2 years by selecting the 'country' and 'count(*)' columns from the 'climate_mitigation' table where the 'year' is between the current year minus 2 and the current year. It then groups the results by 'country' and calculates the count of records for each group. The results are then ordered by 'num_efforts' in descending order.</s>"}
{"text": "<s>[INST] \nFind the top 3 clients with the highest account balances in the Western region.\nCREATE TABLE clients (client_id INT, name VARCHAR(50), region VARCHAR(20), account_balance DECIMAL(10, 2)); INSERT INTO clients (client_id, name, region, account_balance) VALUES (1, 'John Doe', 'Western', 25000.00), (2, 'Jane Smith', 'Eastern', 30000.00), (3, 'Mike Johnson', 'Western', 40000.00); \n[/INST]\nSELECT client_id, name, account_balance FROM clients WHERE region = 'Western' ORDER BY account_balance DESC LIMIT 3;\nThis query retrieves the top 3 clients with the highest account balances in the Western region. It does this by using the ORDER BY clause to sort the account balances in descending order, and the LIMIT clause to restrict the results to the top 3 rows.</s>"}
{"text": "<s>[INST] \nHow many cities in the 'transportation' schema have more than 10000 electric vehicles?\nCREATE TABLE city_electric_vehicles (city_name VARCHAR(255), num_electric_vehicles INT); INSERT INTO city_electric_vehicles (city_name, num_electric_vehicles) VALUES ('San Francisco', 15000), ('Los Angeles', 20000), ('New York', 30000); \n[/INST]\nSELECT COUNT(*) FROM (SELECT city_name FROM city_electric_vehicles WHERE num_electric_vehicles > 10000 GROUP BY city_name) AS subquery;\nThis query calculates the number of cities with more than 10000 electric vehicles by selecting the count of the 'city_name' column from a subquery that groups the cities with more than 10000 electric vehicles and selects the city_name.</s>"}
{"text": "<s>[INST] \nWhat is the maximum billing amount for cases in the family law specialization?\nCREATE TABLE Attorneys (AttorneyID INT, Specialization VARCHAR(255)); INSERT INTO Attorneys (AttorneyID, Specialization) VALUES (1, 'Civil Law'); INSERT INTO Attorneys (AttorneyID, Specialization) VALUES (2, 'Criminal Law'); INSERT INTO Attorneys (AttorneyID, Specialization) VALUES (3, 'Family Law'); CREATE TABLE Cases (CaseID INT, AttorneyID INT, BillingAmount DECIMAL(10, 2)); INSERT INTO Cases (CaseID, AttorneyID, BillingAmount) VALUES (1, 1, 2000.00); INSERT INTO Cases (CaseID, AttorneyID, BillingAmount) VALUES (2, 2, 3000.00); INSERT INTO Cases (CaseID, AttorneyID, BillingAmount) VALUES (3, 3, 1500.00); \n[/INST]\nSELECT MAX(BillingAmount) FROM Cases INNER JOIN Attorneys ON Cases.AttorneyID = Attorneys.AttorneyID WHERE Specialization = 'Family Law';\nThis SQL query calculates the maximum billing amount for cases in the family law specialization. It first joins the Cases and Attorneys tables on the AttorneyID field. Then, it filters the results to only include rows where the Specialization field in the Attorneys table is equal to 'Family Law'. Finally, it calculates the maximum of the BillingAmount field in the Cases table.</s>"}
{"text": "<s>[INST] \nWhat was the total cost of all completed rural infrastructure projects in Kenya in 2020?\nCREATE TABLE projects (id INT, country VARCHAR(50), start_date DATE, end_date DATE, cost FLOAT); INSERT INTO projects (id, country, start_date, end_date, cost) VALUES (1, 'Kenya', '2018-01-01', '2019-12-31', 500000), (2, 'Kenya', '2019-01-01', '2020-12-31', 750000), (3, 'Kenya', '2020-01-01', '2021-12-31', 800000); \n[/INST]\nSELECT SUM(cost) FROM projects WHERE country = 'Kenya' AND YEAR(end_date) = 2020 AND end_date IS NOT NULL;\nThis query calculates the total cost of completed rural infrastructure projects in Kenya in 2020 by summing the 'cost' column for records where the 'country' is 'Kenya', the end date is in 2020, and there is a valid end date.</s>"}
{"text": "<s>[INST] \nWhat is the daily average transaction amount for all customers in Q1 2022?\nCREATE TABLE transactions (transaction_id INT, customer_id INT, transaction_amount DECIMAL(10,2), transaction_date DATE); \n[/INST]\nSELECT AVG(transaction_amount) FROM transactions WHERE transactions.transaction_date BETWEEN '2022-01-01' AND '2022-03-31' GROUP BY DATE(transaction_date);\nThis query calculates the daily average transaction amount for all customers in Q1 2022 by using the GROUP BY clause to group the transactions by date and then calculating the average transaction amount for each group.</s>"}
{"text": "<s>[INST] \nList all customers and their orders that were delivered through a route that has a higher average cargo weight than route 999?\nCREATE TABLE Customers (CustomerID int, CustomerName varchar(50)); CREATE TABLE Orders (OrderID int, CustomerID int, DeliveryRoute int, CargoWeight int); INSERT INTO Customers VALUES (1, 'John Doe'), (2, 'Jane Smith'); INSERT INTO Orders VALUES (100, 1, 999, 5000), (200, 2, 888, 7000), (300, 1, 777, 6000), (400, 2, 999, 4000); \n[/INST]\nSELECT Customers.CustomerName, Orders.OrderID FROM Customers INNER JOIN Orders ON Customers.CustomerID = Orders.CustomerID INNER JOIN (SELECT DeliveryRoute, AVG(CargoWeight) as AvgCargoWeight FROM Orders GROUP BY DeliveryRoute HAVING AvgCargoWeight > (SELECT AVG(CargoWeight) FROM Orders WHERE DeliveryRoute = 999)) as Subquery ON Orders.DeliveryRoute = Subquery.DeliveryRoute;\nThe SQL query first performs a subquery to find the average CargoWeight for each DeliveryRoute, then filters the records where the average CargoWeight is higher than that of route 999. Finally, it performs an inner join between Customers, Orders, and the subquery, based on CustomerID and DeliveryRoute, and returns the CustomerName and OrderID.</s>"}
{"text": "<s>[INST] \nWhat is the production cost difference between organic cotton and conventional cotton?\nCREATE TABLE cotton_products (id INT, name VARCHAR(50), production_cost DECIMAL(5,2), material VARCHAR(50)); \n[/INST]\nSELECT CONCAT(org.material, ' vs ', conv.material) AS cost_comparison, ABS(org.production_cost - conv.production_cost) AS production_cost_difference FROM cotton_products org, cotton_products conv WHERE org.material = 'organic_cotton' AND conv.material = 'conventional_cotton';\nCompare organic cotton and conventional cotton production costs by joining the cotton_products table with itself based on material types and calculating the absolute difference between production costs.</s>"}
{"text": "<s>[INST] \nWhat was the average exhibition duration for sculptures, partitioned by gallery?\nCREATE TABLE GalleryC (gallery_name VARCHAR(20), artwork_type VARCHAR(20), exhibition_duration INT); INSERT INTO GalleryC (gallery_name, artwork_type, exhibition_duration) VALUES ('GalleryC', 'Sculpture', 120), ('GalleryC', 'Sculpture', 90), ('GalleryC', 'Painting', 60); \n[/INST]\nSELECT gallery_name, AVG(exhibition_duration) as avg_duration FROM (SELECT gallery_name, artwork_type, exhibition_duration, ROW_NUMBER() OVER (PARTITION BY gallery_name, artwork_type ORDER BY exhibition_duration) as rn FROM GalleryC) tmp WHERE rn = 1 GROUP BY gallery_name;\nPartition the data by gallery_name and artwork_type using the ROW_NUMBER() window function. For each partition, assign a row number (rn) ordered by exhibition_duration. Filter only the first row of each partition and calculate the average exhibition_duration for each gallery.</s>"}
{"text": "<s>[INST] \nList the top 3 revenue-generating restaurants by cuisine.\nCREATE TABLE Restaurants (restaurant_id INT, name TEXT, cuisine TEXT, revenue FLOAT); INSERT INTO Restaurants (restaurant_id, name, cuisine, revenue) VALUES (1, 'Asian Fusion', 'Asian', 50000.00), (2, 'Bella Italia', 'Italian', 60000.00), (3, 'Sushi House', 'Asian', 70000.00), (4, 'Pizzeria La Rosa', 'Italian', 80000.00); \n[/INST]\nSELECT name, cuisine, revenue FROM (SELECT name, cuisine, revenue, ROW_NUMBER() OVER (PARTITION BY cuisine ORDER BY revenue DESC) AS rn FROM Restaurants) t WHERE rn <= 3;\nThe SQL query lists the top 3 revenue-generating restaurants by cuisine by using the ROW_NUMBER() function to assign a row number to each restaurant within its cuisine category, based on revenue. The outer query then selects the name, cuisine, and revenue for each restaurant with a row number of 3 or less, which corresponds to the top 3 revenue-generating restaurants in each cuisine.</s>"}
{"text": "<s>[INST] \nIdentify the total quantity of products in circulation that are made from recycled materials across all suppliers.\nCREATE TABLE Supplier_Products (supplier_id INT, product_id INT, is_recycled BOOLEAN); INSERT INTO Supplier_Products (supplier_id, product_id, is_recycled) VALUES (1, 100, true), (2, 101, false), (3, 102, true), (4, 103, false), (5, 104, true); CREATE TABLE Products (product_id INT, quantity_in_stock INT); INSERT INTO Products (product_id, quantity_in_stock) VALUES (100, 500), (101, 300), (102, 700), (103, 200), (104, 800); \n[/INST]\nSELECT SUM(quantity_in_stock) as total_recycled_quantity FROM Products INNER JOIN Supplier_Products ON Products.product_id = Supplier_Products.product_id WHERE Supplier_Products.is_recycled = true;\nThis query joins the Supplier_Products and Products tables on the product_id column and filters for products made from recycled materials. It then sums the quantity_in_stock column to get the total quantity of products made from recycled materials.</s>"}
{"text": "<s>[INST] \nWhat is the maximum range of electric vehicles available in Japan?\nCREATE TABLE EVSpecs (Id INT, Brand VARCHAR(50), Model VARCHAR(50), Range INT, Country VARCHAR(50)); INSERT INTO EVSpecs (Id, Brand, Model, Range, Country) VALUES (1, 'Toyota', 'Mirai', 300), (2, 'Nissan', 'Leaf', 240); \n[/INST]\nSELECT MAX(Range) FROM EVSpecs WHERE Country = 'Japan';\nThis query finds the maximum range of electric vehicles available in Japan. It does so by using the MAX function on the Range column, filtering the rows with the WHERE clause to only consider electric vehicles from Japan.</s>"}
{"text": "<s>[INST] \nWhat is the maximum mental health parity violation fine in each province for Canada?\nCREATE TABLE MentalHealthParityFines (FineID INT, Province VARCHAR(255), Fine INT); INSERT INTO MentalHealthParityFines (FineID, Province, Fine) VALUES (1, 'Ontario', 50000), (2, 'Quebec', 75000), (3, 'British Columbia', 60000); \n[/INST]\nSELECT Province, MAX(Fine) as MaxFine FROM MentalHealthParityFines WHERE Province IN ('Ontario', 'Quebec', 'British Columbia') GROUP BY Province;\nThe SQL query calculates the maximum mental health parity violation fine in each province for Canada. It filters the data based on the 'Province' column and then groups the data by the same column. It then finds the maximum fine for each group using the MAX() function.</s>"}
{"text": "<s>[INST] \nWhat is the total number of collective bargaining agreements in the 'finance' industry?\nCREATE TABLE cb_agreements (id INT, union_id INT, industry VARCHAR(255), cb_agreements INT); INSERT INTO cb_agreements (id, union_id, industry, cb_agreements) VALUES (1, 1, 'finance', 2); \n[/INST]\nSELECT SUM(cb_agreements) FROM cb_agreements WHERE industry = 'finance';\nThe SQL query sums the 'cb_agreements' field in the 'cb_agreements' table for all records where the 'industry' is 'finance'.</s>"}
{"text": "<s>[INST] \nWhat is the average price per gram of cannabis flower in Washington?\nCREATE TABLE Inventory (InventoryID INT, Product TEXT, Price DECIMAL, State TEXT); INSERT INTO Inventory (InventoryID, Product, Price, State) VALUES (1, 'Cannabis Flower', 15.00, 'Washington'); INSERT INTO Inventory (InventoryID, Product, Price, State) VALUES (2, 'Cannabis Flower', 20.00, 'Washington'); \n[/INST]\nSELECT AVG(Price) FROM Inventory WHERE Product = 'Cannabis Flower' AND State = 'Washington';\nCalculate the average price per gram of cannabis flower in Washington.</s>"}
{"text": "<s>[INST] \nWhat is the percentage of cruelty-free products in the cosmetics database?\nCREATE TABLE products (product_id INT, name VARCHAR(255), cruelty_free BOOLEAN); INSERT INTO products (product_id, name, cruelty_free) VALUES (1, 'Lipstick', true), (2, 'Eye Shadow', true), (3, 'Mascara', false), (4, 'Foundation', false), (5, 'Blush', true); \n[/INST]\nSELECT (COUNT(*) FILTER (WHERE cruelty_free = true)) * 100.0 / COUNT(*) FROM products;\nThe query calculates the percentage of cruelty-free products in the cosmetics database by filtering records based on the cruelty_free column and aggregating the filtered records using COUNT function with FILTER clause, then dividing by the total number of records.</s>"}
{"text": "<s>[INST] \nWhat is the average investment in agricultural innovation programs per farmer in Mexico?\nCREATE TABLE farmers(id INT, name TEXT, country TEXT); INSERT INTO farmers(id, name, country) VALUES (1, 'Juan', 'Mexico'); INSERT INTO farmers(id, name, country) VALUES (2, 'Ana', 'Mexico'); CREATE TABLE programs(id INT, farmer_id INT, program TEXT, investment FLOAT); INSERT INTO programs(id, farmer_id, program, investment) VALUES (1, 1, 'Precision Agriculture', 1000.0); INSERT INTO programs(id, farmer_id, program, investment) VALUES (2, 1, 'Smart Irrigation', 2000.0); INSERT INTO programs(id, farmer_id, program, investment) VALUES (3, 2, 'Precision Agriculture', 1500.0); \n[/INST]\nSELECT AVG(p.investment) FROM farmers f INNER JOIN programs p ON f.id = p.farmer_id WHERE f.country = 'Mexico';\nThis query calculates the average investment in agricultural innovation programs per farmer in Mexico. It first performs an inner join between the 'farmers' table and the 'programs' table on the farmer_id field. Then, it filters the results to only include farmers from Mexico. Lastly, it calculates the average investment in agricultural innovation programs per farmer.</s>"}
{"text": "<s>[INST] \nWhat is the average depth of all marine protected areas in the Pacific Ocean region?\nCREATE TABLE marine_protected_areas (id INT, name TEXT, region TEXT, avg_depth FLOAT); INSERT INTO marine_protected_areas (id, name, region, avg_depth) VALUES (1, 'Galapagos Marine Reserve', 'Pacific', 200.0), (2, 'Great Barrier Reef', 'Pacific', 100.0); \n[/INST]\nSELECT AVG(avg_depth) FROM marine_protected_areas WHERE region = 'Pacific';\nCalculate the average of the avg_depth column for rows where the region is 'Pacific'</s>"}
{"text": "<s>[INST] \nUpdate the email to 'john.doe@example.com' for policy_holder_id 1 in the policy_holder table\nCREATE TABLE policy_holder (policy_holder_id INT, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(50), phone VARCHAR(15), address VARCHAR(100), city VARCHAR(50), state VARCHAR(2), zip VARCHAR(10)); INSERT INTO policy_holder (policy_holder_id, first_name, last_name, email, phone, address, city, state, zip) VALUES (1, 'John', 'Doe', 'john.doe@oldemail.com', '555-888-9999', '456 Elm St', 'Los Angeles', 'CA', '90001'); \n[/INST]\nUPDATE policy_holder SET email = 'john.doe@example.com' WHERE policy_holder_id = 1;\nThis query updates the email to 'john.doe@example.com' for the record with policy_holder_id 1 in the policy_holder table. The WHERE clause filters the records based on the policy_holder_id.</s>"}
{"text": "<s>[INST] \nWhat is the average budget allocated to schools in each district that have more than 5 schools?\nCREATE TABLE districts (district_id INT, district_name TEXT, num_schools INT, total_budget INT); INSERT INTO districts (district_id, district_name, num_schools, total_budget) VALUES (1, 'Downtown', 7, 5000000), (2, 'Uptown', 3, 2500000), (3, 'Harbor', 6, 4000000); \n[/INST]\nSELECT AVG(total_budget) FROM districts WHERE num_schools > 5 GROUP BY district_name;\nThis SQL query calculates the average total budget for districts with more than 5 schools. It groups the districts by their names and then computes the average total budget for each group.</s>"}
{"text": "<s>[INST] \nWhat is the average depth and temperature of sensors in the Pacific Ocean?\nCREATE TABLE sensors (id INT, type VARCHAR(255), location VARCHAR(255), depth FLOAT, temperature FLOAT, pressure FLOAT, last_updated DATE); CREATE TABLE ocean_regions (id INT, region VARCHAR(255)); \n[/INST]\nSELECT AVG(s.depth), AVG(s.temperature) FROM sensors s INNER JOIN ocean_regions o ON s.location = o.region WHERE o.region = 'Pacific Ocean';\nThis SQL query calculates the average depth and temperature of sensors located in the Pacific Ocean by joining the sensors table with the ocean_regions table.</s>"}
{"text": "<s>[INST] \nWhat is the total caloric intake of product X?\nCREATE TABLE Food (FoodID varchar(10), FoodName varchar(20), Calories int); INSERT INTO Food VALUES ('X', 'Product X', 200); \n[/INST]\nSELECT SUM(Calories) FROM Food WHERE FoodID = 'X';\nThe query sums the Calories column for all records in the Food table with FoodID 'X' to find the total caloric intake of Product X.</s>"}
{"text": "<s>[INST] \nWho are the top 5 recruiters based on the number of candidates they have referred?\nCREATE TABLE Recruiters (RecruiterID INT, RecruiterName VARCHAR(20), CandidateID INT); INSERT INTO Recruiters (RecruiterID, RecruiterName, CandidateID) VALUES (1, 'John Doe', 10), (2, 'Jane Smith', 11), (3, 'Jim Brown', 12), (4, 'Jake White', 13), (5, 'Jill Black', 14); \n[/INST]\nSELECT RecruiterName FROM (SELECT RecruiterName, ROW_NUMBER() OVER (ORDER BY COUNT(*) DESC) AS Rank FROM Recruiters r JOIN Candidates c ON r.CandidateID = c.CandidateID GROUP BY RecruiterName) AS Subquery WHERE Rank <= 5;\nIdentify the top 5 recruiters based on the number of candidates they have referred by joining the Recruiters and Candidates tables based on the CandidateID, grouping the records by the RecruiterName, and then ranking the recruiters using the ROW_NUMBER function, and filtering the results based on the rank.</s>"}
{"text": "<s>[INST] \nWhat is the percentage of traditional art centers in Australia with less than 1000 practitioners?\nCREATE TABLE ArtCenters (CenterName VARCHAR(255), Country VARCHAR(255), NumberOfPractitioners INT); INSERT INTO ArtCenters (CenterName, Country, NumberOfPractitioners) VALUES ('Aboriginal Art Centre', 'Australia', 1200), ('Boomerang Art', 'Australia', 800), ('Corroboree Australia', 'Australia', 1500), ('Dreamtime Art', 'Australia', 700), ('Japingka Aboriginal Art', 'Australia', 900); \n[/INST]\nSELECT CenterName, Country, NumberOfPractitioners, (COUNT(*) OVER (PARTITION BY Country) - COUNT(CASE WHEN NumberOfPractitioners >= 1000 THEN 1 END) OVER (PARTITION BY Country)) * 100.0 / COUNT(*) OVER (PARTITION BY Country) AS PercentageLessThan1000 FROM ArtCenters WHERE Country = 'Australia';\nFirst, use window functions to count the total number of centers, the number of centers with more than 1000 practitioners, and calculate the percentage of centers with less than 1000 practitioners for Australia.</s>"}
