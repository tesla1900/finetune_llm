{"text": "<s>[INST] \nWhat is the maximum price of samarium produced in China?\nCREATE TABLE samarium_production (country VARCHAR(255), price DECIMAL(10,2)); INSERT INTO samarium_production (country, price) VALUES ('China', 70.50); \n[/INST]\nSELECT MAX(price) FROM samarium_production WHERE country = 'China';\nThis query calculates the maximum price of samarium produced in China by selecting the price column, filtering for the country China, and then calculating the maximum.</s>"}
{"text": "<s>[INST] \nDelete the record for the species \"Atlantic ridley sea turtle\" from the marine_species table.\nCREATE TABLE marine_species (id INTEGER, scientific_name TEXT, common_name TEXT); INSERT INTO marine_species (id, scientific_name, common_name) VALUES (1, 'Loligo opalescens', 'California market squid'); INSERT INTO marine_species (id, scientific_name, common_name) VALUES (2, 'Lepidochelys kempii', 'Atlantic ridley sea turtle'); \n[/INST]\nDELETE FROM marine_species WHERE common_name = 'Atlantic ridley sea turtle';\nThis SQL query deletes the record for the species \"Atlantic ridley sea turtle\" from the 'marine_species' table.</s>"}
{"text": "<s>[INST] \nWho provides the most virtual tours in the United Kingdom?\nCREATE TABLE providers (provider_id INT, name TEXT, country TEXT); CREATE TABLE virtual_tours (tour_id INT, name TEXT, provider TEXT, country TEXT); INSERT INTO providers (provider_id, name, country) VALUES (1, 'Virtual Voyages', 'United Kingdom'), (2, 'Virtually There', 'United Kingdom'); INSERT INTO virtual_tours (tour_id, name, provider, country) VALUES (1, 'Buckingham Palace Tour', 'Virtual Voyages', 'United Kingdom'), (2, 'Tower of London Tour', 'Virtually There', 'United Kingdom'), (3, 'Stonehenge Tour', 'Virtual Voyages', 'United Kingdom'); \n[/INST]\nSELECT providers.name, COUNT(virtual_tours.provider) AS tour_count FROM providers INNER JOIN virtual_tours ON providers.name = virtual_tours.provider GROUP BY providers.name ORDER BY tour_count DESC;\nThis query identifies the provider that offers the most virtual tours in the United Kingdom by performing an inner join between the providers and virtual_tours tables on the provider column, grouping the results by the name column in the providers table, and counting the number of rows in the virtual_tours table for each provider. The results are then sorted in descending order based on the tour count.</s>"}
{"text": "<s>[INST] \nCalculate the total value of art collections in New York, NY.\nCREATE TABLE art_collections (id INT, collection_name VARCHAR(255), city VARCHAR(255), value DECIMAL(10,2)); INSERT INTO art_collections (id, collection_name, city, value) VALUES (1, 'The Met Collection', 'New York', 50000000.00), (2, 'The Guggenheim Collection', 'New York', 20000000.00), (3, 'The MoMA Collection', 'New York', 30000000.00); \n[/INST]\nSELECT SUM(value) FROM art_collections WHERE city = 'New York';\nThis query selects the sum of value from the art_collections table, and filters the city to New York.</s>"}
{"text": "<s>[INST] \nWhat is the total production (bbl) for wells in the 'Russia' region for the last 3 years?\nCREATE TABLE well_production (well_id INT, region VARCHAR(20), year INT, production INT); INSERT INTO well_production (well_id, region, year, production) VALUES (1, 'Russia', 2020, 300000), (2, 'Russia', 2019, 320000), (3, 'Houston', 2020, 150000); \n[/INST]\nSELECT SUM(production) FROM well_production WHERE region = 'Russia' AND year >= 2018;\nThis SQL query calculates the total production for wells located in the 'Russia' region for the last 3 years by using the SUM function and a WHERE clause.</s>"}
{"text": "<s>[INST] \nList the tree species with their respective wildlife habitat scores in the private_lands schema, in descending order.\nCREATE TABLE private_lands.wildlife_habitat (species VARCHAR(255), score DECIMAL(5,2)); \n[/INST]\nSELECT species, score FROM private_lands.wildlife_habitat ORDER BY score DESC;\nThis query lists the tree species with their respective wildlife habitat scores in the private_lands schema, in descending order, by using the ORDER BY clause to sort the results by the score column in descending order.</s>"}
{"text": "<s>[INST] \nHow many esports events were held for each game in 2018, ranked by the number of events?\nCREATE TABLE EsportsEvents (EventID INT, EventName VARCHAR(50), GameID INT, EventDate DATE, PrizePool NUMERIC(18,2)); INSERT INTO EsportsEvents (EventID, EventName, GameID, EventDate, PrizePool) VALUES (1, 'Fortnite World Cup', 1, '2019-07-26', 30000000); INSERT INTO EsportsEvents (EventID, EventName, GameID, EventDate, PrizePool) VALUES (2, 'Overwatch League Grand Finals', 2, '2018-07-28', 1500000); INSERT INTO EsportsEvents (EventID, EventName, GameID, EventDate, PrizePool) VALUES (3, 'League of Legends World Championship', 3, '2018-11-03', 24000000); INSERT INTO EsportsEvents (EventID, EventName, GameID, EventDate, PrizePool) VALUES (4, 'Dota 2 International', 4, '2018-08-20', 25500000); \n[/INST]\nSELECT GameID, COUNT(*) as EventsIn2018, ROW_NUMBER() OVER (ORDER BY COUNT(*) DESC) as Rank FROM EsportsEvents WHERE EventDate BETWEEN '2018-01-01' AND '2018-12-31' GROUP BY GameID;\nGet number of esports events held for each game in 2018, ranked by the number of events.</s>"}
{"text": "<s>[INST] \nIdentify products with a price higher than the average price of ethical products.\nCREATE TABLE products (product_id INT, price DECIMAL, ethical BOOLEAN); INSERT INTO products (product_id, price, ethical) VALUES (1, 15.99, true), (2, 25.49, false), (3, 12.99, true), (4, 18.99, true), (5, 9.99, false); \n[/INST]\nSELECT product_id, price FROM products WHERE price > (SELECT AVG(price) FROM products WHERE ethical = true);\nCalculate the average price of ethical products and then find products with a price higher than the average price.</s>"}
{"text": "<s>[INST] \nWhat is the total climate finance investment in energy efficiency in North America?\nCREATE TABLE finance (region VARCHAR(255), sector VARCHAR(255), amount FLOAT); INSERT INTO finance (region, sector, amount) VALUES ('North America', 'Energy Efficiency', 9000000), ('South America', 'Energy Efficiency', 7000000), ('Europe', 'Energy Efficiency', 11000000); \n[/INST]\nSELECT SUM(amount) FROM finance WHERE region = 'North America' AND sector = 'Energy Efficiency';\nThis query calculates the total climate finance investment in energy efficiency in North America by summing the amount column in the finance table where the region is 'North America' and the sector is 'Energy Efficiency'.</s>"}
{"text": "<s>[INST] \nDelete records with a quantity of zero from the Inventory table\nCREATE TABLE Inventory (item_id INT, item_name VARCHAR(50), quantity INT, warehouse_id INT); \n[/INST]\nDELETE FROM Inventory WHERE quantity = 0;\nThis query deletes records from the Inventory table where the quantity is equal to zero. It first selects all records with a quantity of zero, and then removes them from the table.</s>"}
{"text": "<s>[INST] \nWhat is the minimum temperature recorded by IoT sensors in Australia in the last week?\nCREATE TABLE if NOT EXISTS iot_sensors_2 (id int, location varchar(50), temperature float, timestamp datetime); INSERT INTO iot_sensors_2 (id, location, temperature, timestamp) VALUES (1, 'Australia', 18.2, '2022-03-15 10:00:00'); \n[/INST]\nSELECT MIN(temperature) FROM iot_sensors_2 WHERE location = 'Australia' AND timestamp >= DATE_SUB(NOW(), INTERVAL 1 WEEK);\nThis query calculates the minimum temperature from the iot_sensors_2 table for the location 'Australia' within the last week.</s>"}
{"text": "<s>[INST] \nWhat is the number of virtual tours engaged in Tokyo, Japan in the past month?\nCREATE TABLE virtual_tours (tour_id INT, tour_name VARCHAR(255), city VARCHAR(255), country VARCHAR(255), engagement_date DATE); INSERT INTO virtual_tours (tour_id, tour_name, city, country, engagement_date) VALUES (1, 'Tour A', 'Tokyo', 'Japan', '2022-01-01'), (2, 'Tour B', 'Tokyo', 'Japan', '2022-01-15'), (3, 'Tour C', 'Osaka', 'Japan', '2022-02-01'); \n[/INST]\nSELECT COUNT(*) FROM virtual_tours WHERE city = 'Tokyo' AND country = 'Japan' AND engagement_date >= DATEADD(month, -1, GETDATE());\nThis query counts the number of virtual tours engaged in Tokyo, Japan in the past month. It does this by selecting the count of all rows from the virtual_tours table, filtering for rows where the city is 'Tokyo', country is 'Japan', and engagement_date is within the past month.</s>"}
{"text": "<s>[INST] \nIdentify buildings with the lowest sustainability ratings\nCREATE TABLE green_buildings (id INT, name VARCHAR(50), location VARCHAR(50), area FLOAT, sustainability_rating INT); \n[/INST]\nSELECT name FROM green_buildings WHERE sustainability_rating = (SELECT MIN(sustainability_rating) FROM green_buildings);\nThis query identifies buildings with the lowest sustainability ratings by finding the minimum sustainability rating in the 'green_buildings' table and then returning the corresponding building names using a correlated subquery.</s>"}
{"text": "<s>[INST] \nIdentify countries with the highest number of marine species in their waters.\nCREATE TABLE countries (country_name TEXT, num_marine_species INT); INSERT INTO countries (country_name, num_marine_species) VALUES ('Indonesia', 3800), ('Australia', 3000), ('Philippines', 2700); \n[/INST]\nSELECT country_name FROM countries ORDER BY num_marine_species DESC LIMIT 1;\nThe SQL query orders the 'countries' table by the 'num_marine_species' column in descending order, then limits the result to the first row, which identifies the country with the highest number of marine species.</s>"}
{"text": "<s>[INST] \nWhat is the total revenue of sustainable fashion sales in Berlin and Rome?\nCREATE TABLE REVENUE(city VARCHAR(20), revenue DECIMAL(5,2)); INSERT INTO REVENUE(city, revenue) VALUES('Berlin', 1500.00), ('Berlin', 1200.00), ('Rome', 1800.00), ('Rome', 2000.00); \n[/INST]\nSELECT SUM(revenue) FROM REVENUE WHERE city IN ('Berlin', 'Rome') AND revenue > 1000.00;\nCalculates the total revenue of sustainable fashion sales in Berlin and Rome by filtering the REVENUE table for rows with 'Berlin' or 'Rome' in the city column and revenue greater than 1000.00, and then computing the sum of the revenue column.</s>"}
{"text": "<s>[INST] \nList the top 3 regions with the highest mental health parity index scores, along with their corresponding scores.\nCREATE TABLE MentalHealthParity (Region VARCHAR(255), ParityIndexScore INT); INSERT INTO MentalHealthParity (Region, ParityIndexScore) VALUES ('North', 80), ('South', 85), ('East', 70), ('West', 90); \n[/INST]\nSELECT Region, ParityIndexScore FROM (SELECT Region, ParityIndexScore, ROW_NUMBER() OVER (ORDER BY ParityIndexScore DESC) as Rank FROM MentalHealthParity) as RankedData WHERE Rank <= 3;\nThis SQL query first calculates the row number for each region based on the ParityIndexScore in descending order using the ROW_NUMBER window function. It then selects the top 3 regions with the highest ParityIndexScore by filtering the RankedData table based on the calculated row number.</s>"}
{"text": "<s>[INST] \nInsert a new record in the field_temperature table for field 4 with a temperature of 25 degrees and a measurement date of 2023-03-01\nCREATE TABLE field_temperature (field_id INT, temperature DECIMAL(5,2), measurement_date DATE); \n[/INST]\nINSERT INTO field_temperature (field_id, temperature, measurement_date) VALUES (4, 25.0, '2023-03-01');\nThis query inserts a new record in the field_temperature table for field 4 with a temperature of 25 degrees and a measurement date of 2023-03-01. It uses the VALUES clause to specify the values for the field_id, temperature, and measurement_date columns.</s>"}
{"text": "<s>[INST] \nWhat is the maximum number of views for articles published in 'asia' region?\nCREATE TABLE views (id INT, article_id INT, region VARCHAR(30), views INT); INSERT INTO views (id, article_id, region, views) VALUES (1, 1, 'asia', 1000), (2, 2, 'europe', 500), (3, 3, 'asia', 2000); \n[/INST]\nSELECT MAX(views) FROM views WHERE region = 'asia';\nThis query retrieves the maximum number of views for articles published in the 'asia' region. It uses the MAX() aggregation function to find the highest number of views and filters the records using the WHERE clause to only include articles published in the 'asia' region.</s>"}
{"text": "<s>[INST] \nWhat was the maximum number of posts per day for users in India?\nCREATE SCHEMA postsdata; CREATE TABLE posts_per_day(post_date DATE, user_id INT, posts_per_day INT); INSERT INTO posts_per_day (post_date, user_id, posts_per_day) VALUES ('2022-01-01', 1, 5); INSERT INTO posts_per_day (post_date, user_id, posts_per_day) VALUES ('2022-01-01', 2, 3); \n[/INST]\nSELECT post_date, MAX(posts_per_day) FROM postsdata.posts_per_day WHERE user_id IN (SELECT user_id FROM postsdata.posts_per_day WHERE country = 'IN') GROUP BY post_date;\nThis query identifies the maximum number of posts per day for users in India by filtering rows with country values of 'IN', grouping rows by post_date, and then calculating the maximum posts_per_day value for each group.</s>"}
{"text": "<s>[INST] \nWhat is the average donation amount by donor type?\nCREATE SCHEMA if not exists arts_culture;CREATE TABLE if not exists arts_culture.donors (donor_id INT PRIMARY KEY, name VARCHAR(255), type VARCHAR(255), donation DECIMAL(10,2));INSERT INTO arts_culture.donors (donor_id, name, type, donation) VALUES (1, 'John Doe', 'Individual', 50.00), (2, 'Jane Smith', 'Individual', 100.00), (3, 'Google Inc.', 'Corporation', 5000.00); \n[/INST]\nSELECT type, AVG(donation) as avg_donation FROM arts_culture.donors GROUP BY type;\nThis query groups the donors by their type and calculates the average donation amount for each group.</s>"}
{"text": "<s>[INST] \nWhat is the average size of protected habitats in square kilometers?\nCREATE TABLE habitats (id INT, name TEXT, size_km2 FLOAT); INSERT INTO habitats (id, name, size_km2) VALUES (1, 'Forest', 50.3), (2, 'Wetlands', 32.1), (3, 'Grasslands', 87.6); \n[/INST]\nSELECT AVG(size_km2) FROM habitats;\nThis query calculates the average size of protected habitats in square kilometers by taking the average of the size_km2 column in the habitats table.</s>"}
{"text": "<s>[INST] \nWhat are the names of all spacecraft that have been to the outer solar system?\nCREATE TABLE Spacecraft (SpacecraftID INT, HasVisitedOuterSolarSystem BOOLEAN, Name VARCHAR); \n[/INST]\nSELECT Name FROM Spacecraft WHERE HasVisitedOuterSolarSystem = TRUE;\nThis query retrieves the names of all spacecraft that have been to the outer solar system. It does so by filtering the Spacecraft table to only include rows where HasVisitedOuterSolarSystem is TRUE, then selecting the Name column for those rows.</s>"}
{"text": "<s>[INST] \nWhat is the average number of troops deployed in peacekeeping operations by country in 2020?\nCREATE TABLE PeacekeepingOperations (Year INT, Country VARCHAR(50), Troops INT); INSERT INTO PeacekeepingOperations (Year, Country, Troops) VALUES (2020, 'Canada', 500), (2020, 'Mexico', 700), (2020, 'Brazil', 900); \n[/INST]\nSELECT Country, AVG(Troops) FROM PeacekeepingOperations WHERE Year = 2020 GROUP BY Country;\nThis query calculates the average number of troops deployed in peacekeeping operations by country in 2020. It groups the data by country and calculates the average troops for each group.</s>"}
{"text": "<s>[INST] \nWhich countries have the highest average donation amounts?\nCREATE TABLE Donations (DonorID int, Country varchar(50), Amount decimal(10,2)); INSERT INTO Donations (DonorID, Country, Amount) VALUES (1, 'USA', 200.00), (2, 'Canada', 150.00), (3, 'Mexico', 75.00); \n[/INST]\nSELECT Country, AVG(Amount) as AvgDonation FROM Donations GROUP BY Country ORDER BY AvgDonation DESC\nThis query calculates the average donation amount for each country by grouping the Donations table by the Country column and applying the AVG function to the Amount column. It then orders the results in descending order by the average donation amount to find the countries with the highest average donation amounts.</s>"}
{"text": "<s>[INST] \nWhat is the total R&D expenditure for drugs in 'Europe'?\nCREATE TABLE rd_expenditure (drug_name TEXT, region TEXT, amount INTEGER); \n[/INST]\nSELECT SUM(amount) FROM rd_expenditure WHERE region = 'Europe';\nThis query calculates the total R&D expenditure for drugs in 'Europe' by summing up the 'amount' column in the 'rd_expenditure' table where the 'region' is 'Europe'.</s>"}
{"text": "<s>[INST] \nWhat is the number of union members who have participated in labor rights advocacy events, by union?\nCREATE TABLE labor_rights_advocacy_events (event_id INTEGER, union_name TEXT); INSERT INTO labor_rights_advocacy_events (event_id, union_name) VALUES (1, 'Union A'), (2, 'Union A'), (3, 'Union B'), (4, 'Union C'), (5, 'Union D'), (6, 'Union E'), (7, 'Union A'), (8, 'Union B'), (9, 'Union C'), (10, 'Union D'), (11, 'Union E'), (12, 'Union A'), (13, 'Union B'), (14, 'Union C'), (15, 'Union D'), (16, 'Union E'); \n[/INST]\nSELECT union_name, COUNT(*) as num_participants FROM labor_rights_advocacy_events GROUP BY union_name;\nThis query counts the number of union members who have participated in labor rights advocacy events for each union.</s>"}
{"text": "<s>[INST] \nWhat is the total number of charging stations for electric vehicles in California and New York?\nCREATE TABLE charging_stations (station_id INT, station_name VARCHAR(50), location VARCHAR(50), quantity INT); CREATE TABLE electric_vehicles (vehicle_id INT, model VARCHAR(20), manufacture VARCHAR(20), vehicle_type VARCHAR(20), state VARCHAR(20)); \n[/INST]\nSELECT SUM(quantity) FROM charging_stations cs JOIN electric_vehicles ev ON cs.location = ev.state WHERE ev.state IN ('California', 'New York');\n1. Selects the sum of the quantity of charging stations for electric vehicles in California and New York. 2. Joins the \"charging_stations\" table with the \"electric_vehicles\" table on the state. 3. Filters the results to only include charging stations in California and New York.</s>"}
{"text": "<s>[INST] \nWhat are the top 3 hotel tech features adopted by hotels in APAC region?\nCREATE TABLE hotel_tech (hotel_id INT, hotel_name TEXT, region TEXT, feature TEXT); INSERT INTO hotel_tech (hotel_id, hotel_name, region, feature) VALUES (1, 'Hotel X', 'APAC', 'Smart Room Controls'), (2, 'Hotel Y', 'APAC', 'Mobile Check-in'), (3, 'Hotel Z', 'APAC', 'AI Housekeeping'); \n[/INST]\nSELECT feature, COUNT(*) as adoption_count FROM hotel_tech WHERE region = 'APAC' GROUP BY feature ORDER BY adoption_count DESC LIMIT 3;\nFilters the hotel_tech table for the APAC region, groups the data by feature, orders it by adoption count and returns the top 3.</s>"}
{"text": "<s>[INST] \nAdd a new record to the wearables table for a member with ID 103, device type 'Garmin', and heart rate 120 bpm\nCREATE TABLE wearables (member_id INT, device_type VARCHAR(50), heart_rate INT); \n[/INST]\nINSERT INTO wearables (member_id, device_type, heart_rate) VALUES (103, 'Garmin', 120);\n* This query inserts a new record into the wearables table for a member with ID 103, specifying the device type and heart rate.</s>"}
{"text": "<s>[INST] \nWhat is the total quantity of textiles sourced from South America?\nCREATE TABLE sourcing (country VARCHAR(10), material VARCHAR(10), quantity INT); INSERT INTO sourcing (country, material, quantity) VALUES ('Brazil', 'cotton', 2000), ('Argentina', 'wool', 1500); \n[/INST]\nSELECT SUM(quantity) FROM sourcing WHERE country IN ('Brazil', 'Argentina');\nThis query calculates the total quantity of textiles sourced from South America by summing the quantity for rows with country as 'Brazil' or 'Argentina'.</s>"}
{"text": "<s>[INST] \nWhat is the average monthly income for clients who have received socially responsible loans, in the West region?\nCREATE TABLE shariah_loans (id INT, client_id INT); INSERT INTO shariah_loans (id, client_id) VALUES (1, 101), (2, 101), (1, 102); CREATE TABLE socially_responsible_loans (id INT, client_id INT); INSERT INTO socially_responsible_loans (id, client_id) VALUES (1, 102), (2, 103), (1, 104); CREATE TABLE client_info (id INT, name VARCHAR, monthly_income DECIMAL, region VARCHAR); INSERT INTO client_info (id, name, monthly_income, region) VALUES (101, 'Ahmed', 3000, 'West'), (102, 'Fatima', 4000, 'East'), (103, 'Zainab', 5000, 'South'), (104, 'Hassan', 6000, 'West'); \n[/INST]\nSELECT AVG(monthly_income) FROM client_info JOIN socially_responsible_loans ON client_info.id = socially_responsible_loans.client_id WHERE region = 'West';\nJoin the client_info table with the socially_responsible_loans table on the client_id column, then select the average monthly_income for the resulting rows where the region is 'West'.</s>"}
{"text": "<s>[INST] \nGet the count of artworks by 'Vincent van Gogh' in the 'Post-Impressionism' period.\nCREATE TABLE Artworks (id INT, artist_name VARCHAR(100), period VARCHAR(50), artwork_name VARCHAR(100)); INSERT INTO Artworks (id, artist_name, period, artwork_name) VALUES (1, 'Vincent van Gogh', 'Post-Impressionism', 'Starry Night'); INSERT INTO Artworks (id, artist_name, period, artwork_name) VALUES (2, 'Vincent van Gogh', 'Post-Impressionism', 'Sunflowers'); \n[/INST]\nSELECT COUNT(*) as artwork_count FROM Artworks WHERE artist_name = 'Vincent van Gogh' AND period = 'Post-Impressionism';\nThe query counts the number of artworks by Vincent van Gogh in the Post-Impressionism period by using the COUNT clause and filtering for the artist_name and period.</s>"}
{"text": "<s>[INST] \nWhat is the minimum volume of timber in the timber_production table for the region 'Southeast'?\nCREATE TABLE timber_production (id INT, region VARCHAR(255), volume FLOAT); INSERT INTO timber_production (id, region, volume) VALUES (1, 'Northwest', 1234.56), (2, 'Southeast', 789.12), (3, 'Northwest', 456.34); \n[/INST]\nSELECT MIN(volume) FROM timber_production WHERE region = 'Southeast';\nThis query finds the minimum volume of timber in the timber_production table for the region 'Southeast' by using the MIN() function on the volume column and the WHERE clause to filter for the desired region.</s>"}
{"text": "<s>[INST] \nHow many oil spills were reported in the Niger Delta between 2015 and 2018?\nCREATE TABLE oil_spills (spill_id INT, location VARCHAR(50), year INT, reported_spill BOOLEAN); \n[/INST]\nSELECT COUNT(*) FROM oil_spills WHERE location = 'Niger Delta' AND year BETWEEN 2015 AND 2018 AND reported_spill = TRUE;\nThe query filters the 'oil_spills' table for records in the Niger Delta between 2015 and 2018 where a spill was reported and counts the number of records.</s>"}
{"text": "<s>[INST] \nWhat is the total number of animals in each sanctuary, grouped by region?\nCREATE TABLE sanctuary_data (sanctuary_id INT, sanctuary_name VARCHAR(255), region VARCHAR(255), animal_type VARCHAR(255), animal_count INT); INSERT INTO sanctuary_data (sanctuary_id, sanctuary_name, region, animal_type, animal_count) VALUES (1, 'Sanctuary A', 'North', 'Tiger', 25), (2, 'Sanctuary A', 'North', 'Elephant', 30), (3, 'Sanctuary B', 'South', 'Tiger', 35), (4, 'Sanctuary B', 'South', 'Elephant', 20), (5, 'Sanctuary C', 'East', 'Tiger', 15), (6, 'Sanctuary C', 'East', 'Elephant', 40), (7, 'Sanctuary D', 'West', 'Tiger', 5), (8, 'Sanctuary D', 'West', 'Elephant', 10), (9, 'Sanctuary E', 'North', 'Tiger', 45), (10, 'Sanctuary E', 'North', 'Elephant', 25); \n[/INST]\nSELECT region, animal_type, SUM(animal_count) AS total_animals FROM sanctuary_data GROUP BY region, animal_type;\nThis query first groups the data by region and animal type, summing the animal count for each group. The final result is the total number of animals in each sanctuary, grouped by region.</s>"}
{"text": "<s>[INST] \nIdentify the number of security incidents for each category in the SecurityIncidents table, ordered by count.\nCREATE TABLE SecurityIncidents (id INT, incident_category VARCHAR(255), incident_count INT); INSERT INTO SecurityIncidents (id, incident_category, incident_count) VALUES (1, 'Malware', 30), (2, 'Phishing', 25), (3, 'Network Intrusion', 18), (4, 'Unauthorized Access', 15), (5, 'Data Exfiltration', 12), (6, 'Insider Threat', 8), (7, 'Denial of Service', 5), (8, 'Social Engineering', 3); \n[/INST]\nSELECT incident_category, incident_count FROM SecurityIncidents ORDER BY incident_count DESC;\nThis query sorts the incident categories by their counts in descending order.</s>"}
{"text": "<s>[INST] \nWhat is the maximum energy storage capacity in each country?\nCREATE TABLE energy_storage (id INT, country VARCHAR(255), capacity FLOAT); INSERT INTO energy_storage (id, country, capacity) VALUES (1, 'Germany', 50000), (2, 'France', 60000), (3, 'Germany', 55000), (4, 'France', 65000); \n[/INST]\nSELECT country, MAX(capacity) as max_capacity FROM energy_storage GROUP BY country;\nThis SQL query calculates the maximum energy storage capacity in each country. It groups the data by country and calculates the maximum capacity for each group.</s>"}
{"text": "<s>[INST] \nWhat is the average number of community education programs held in Africa annually?\nCREATE TABLE Education (ProgramID INT, Program VARCHAR(50), Frequency INT, Location VARCHAR(50)); INSERT INTO Education (ProgramID, Program, Frequency, Location) VALUES (1, 'Wildlife Conservation', 36, 'Africa'); INSERT INTO Education (ProgramID, Program, Frequency, Location) VALUES (2, 'Biodiversity Protection', 42, 'Africa'); \n[/INST]\nSELECT AVG(Frequency) FROM Education WHERE Location = 'Africa';\nThe SQL query calculates the average number of community education programs held in Africa annually by finding the average value of the Frequency column for the rows with the Location set to 'Africa'.</s>"}
{"text": "<s>[INST] \nWhat is the maximum and minimum capacity of renewable energy projects in the 'RenewableEnergyProjects' table?\nCREATE TABLE RenewableEnergyProjects (id INT, name VARCHAR(100), location VARCHAR(100), type VARCHAR(50), capacity FLOAT); \n[/INST]\nSELECT MAX(capacity) as max_capacity, MIN(capacity) as min_capacity FROM RenewableEnergyProjects;\nThis SQL query calculates the maximum and minimum capacity of renewable energy projects in the 'RenewableEnergyProjects' table. It does this by using the MAX and MIN functions, which return the maximum and minimum value of a numeric column, respectively. In this case, the numeric column is 'capacity'.</s>"}
{"text": "<s>[INST] \nWhat is the average annual CO2 emissions reduction achieved by climate mitigation initiatives in Southeast Asia?\nCREATE TABLE co2_emissions_reduction (initiative_id INT, initiative_name VARCHAR(50), region VARCHAR(50), year_started INT, co2_emissions_reduction DECIMAL(5, 2)); INSERT INTO co2_emissions_reduction (initiative_id, initiative_name, region, year_started, co2_emissions_reduction) VALUES (1, 'Green Energy Transition', 'Southeast Asia', 2015, 7.50), (2, 'Energy Efficiency', 'Southeast Asia', 2016, 8.25), (3, 'Carbon Pricing', 'Southeast Asia', 2017, 9.00); \n[/INST]\nSELECT AVG(co2_emissions_reduction) FROM co2_emissions_reduction WHERE region = 'Southeast Asia';\nThis query calculates the average annual CO2 emissions reduction achieved by climate mitigation initiatives in Southeast Asia by averaging the CO2 emissions reduction where the region is Southeast Asia.</s>"}
{"text": "<s>[INST] \nUpdate the 'bias' value to 5 for records with 'algorithm' = 'K-Means' in the 'testing_data2' table\nCREATE TABLE testing_data2 (id INT, algorithm VARCHAR(20), bias INT, fairness INT); INSERT INTO testing_data2 (id, algorithm, bias, fairness) VALUES (1, 'K-Means', 4, 7), (2, 'KNN', 6, 5), (3, 'K-Means', 3, 8); \n[/INST]\nUPDATE testing_data2 SET bias = 5 WHERE algorithm = 'K-Means';\nThis query updates the bias value to 5 for records with 'algorithm' = 'K-Means' in the testing_data2 table. It modifies records based on the condition provided in the WHERE clause.</s>"}
{"text": "<s>[INST] \nWhat is the total value of artwork sales in Paris?\nCREATE TABLE sales (id INT, artwork_id INT, location TEXT, price DECIMAL(5,2)); INSERT INTO sales (id, artwork_id, location, price) VALUES (1, 1, 'Paris', 1000.00), (2, 2, 'London', 2000.00), (3, 3, 'Paris', 3000.00); \n[/INST]\nSELECT SUM(price) FROM sales WHERE location = 'Paris';\nThis SQL query calculates the total value of artwork sales in Paris. It does this by using the SUM function on the 'price' column, while filtering the rows with the WHERE clause to only consider the sales in Paris.</s>"}
{"text": "<s>[INST] \nUpdate the conservation status of 'Yetidracus profundis' to 'Endangered'\nCREATE TABLE species (scientific_name TEXT, common_name TEXT, conservation_status TEXT); INSERT INTO species (scientific_name, common_name, conservation_status) VALUES ('Yetidracus profundis', 'Yeti Shark', 'Vulnerable'); \n[/INST]\nUPDATE species SET conservation_status = 'Endangered' WHERE scientific_name = 'Yetidracus profundis';\nThis SQL query updates the conservation_status column in the species table to 'Endangered' for the row with scientific_name 'Yetidracus profundis'.</s>"}
{"text": "<s>[INST] \nWhat was the average donation amount and total number of donors for each month in 2021?\nCREATE TABLE MonthlyDonations (DonorID INT, DonationDate DATE); INSERT INTO MonthlyDonations (DonorID, DonationDate) VALUES (1, '2021-01-12'), (2, '2021-01-25'), (3, '2021-02-03'), (1, '2021-03-14'), (4, '2021-03-28'); \n[/INST]\nSELECT EXTRACT(MONTH FROM DonationDate) AS Month, AVG(DonationAmount) AS AverageDonation, COUNT(DISTINCT DonorID) AS TotalDonors FROM Donations GROUP BY Month ORDER BY Month;\nThe SQL query calculates the average donation amount and total number of donors for each month in 2021 using the EXTRACT function to extract the month from the DonationDate and the AVG and COUNT functions to calculate the average and total, respectively.</s>"}
{"text": "<s>[INST] \nWhat is the average ticket price and total revenue for each event in the 'concerts' table?\nCREATE TABLE concerts (event_id INT, event_name VARCHAR(50), location VARCHAR(50), date DATE, ticket_price DECIMAL(5,2), num_tickets INT); \n[/INST]\nSELECT event_name, AVG(ticket_price) as avg_ticket_price, SUM(ticket_price * num_tickets) as total_revenue FROM concerts GROUP BY event_name;\nThis query calculates the average ticket price and total revenue for each event in the 'concerts' table by grouping the records by event_name and computing the average ticket_price and sum of the product of ticket_price and num_tickets.</s>"}
{"text": "<s>[INST] \nWhat is the earliest and latest time a post was made by a user in the 'social_media' schema?\nCREATE TABLE user (id INT, name VARCHAR(50), age INT, gender VARCHAR(10), created_at TIMESTAMP); INSERT INTO user (id, name, age, gender, created_at) VALUES (1, 'John Doe', 25, 'Male', '2021-01-01 10:00:00'); CREATE TABLE post (id INT, user_id INT, content TEXT, posted_at TIMESTAMP); INSERT INTO post (id, user_id, content, posted_at) VALUES (1, 1, 'Hello World!', '2021-01-01 10:10:00'); \n[/INST]\nSELECT MIN(posted_at) as earliest, MAX(posted_at) as latest FROM post;\nThis query calculates the earliest and latest time a post was made by a user. It uses the MIN and MAX functions to find the earliest and latest 'posted_at' timestamps in the 'post' table.</s>"}
{"text": "<s>[INST] \nWhat is the total number of research grants awarded to faculty members in the Physics department?\nCREATE SCHEMA research;CREATE TABLE grants(faculty_name TEXT,department TEXT,amount INTEGER);INSERT INTO grants(faculty_name,department,amount)VALUES('Peter','Physics',250000),('Quinn','Chemistry',100000); \n[/INST]\nSELECT SUM(amount) FROM research.grants WHERE department='Physics';\nThis query calculates the sum of the amount column in the grants table in the research schema where the department is Physics, then returns that sum.</s>"}
{"text": "<s>[INST] \nWhat's the average age of farmers in the 'experienced_farmer_program' table?\nCREATE TABLE experienced_farmer_program (id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), age INT, gender VARCHAR(10), years_experience INT, location VARCHAR(50)); \n[/INST]\nSELECT AVG(age) FROM experienced_farmer_program;\nThis query calculates the average value of the 'age' column in the 'experienced_farmer_program' table.</s>"}
{"text": "<s>[INST] \nWhat is the number of times the manufacturing sector has been targeted by malware attacks?\nCREATE TABLE attacks (id INT, sector VARCHAR(20), type VARCHAR(50)); INSERT INTO attacks (id, sector, type) VALUES (1, 'Manufacturing', 'Malware'), (2, 'Healthcare', 'Phishing'), (3, 'Financial', 'Ransomware'); \n[/INST]\nSELECT COUNT(*) FROM attacks WHERE sector = 'Manufacturing' AND type = 'Malware';\n1. Select all records from the attacks table. 2. Filter the records where the sector is 'Manufacturing' and type is 'Malware'. 3. Count the number of remaining records, which gives the number of times the manufacturing sector has been targeted by malware attacks.</s>"}
{"text": "<s>[INST] \nWhat is the number of events organized by nonprofits focused on disaster relief in the US by quarter?\nCREATE TABLE event_quarters (event_quarter_id INT, quarter INT); INSERT INTO event_quarters VALUES (1, 1); \n[/INST]\nSELECT e.quarter, COUNT(*) as num_events FROM nonprofit_events ne JOIN events e ON ne.event_id = e.event_id JOIN nonprofits n ON ne.nonprofit_id = n.nonprofit_id JOIN event_quarters eq ON e.quarter = eq.quarter WHERE n.sector = 'disaster relief' GROUP BY e.quarter;\nThis query joins the nonprofit_events, events, nonprofits, and event_quarters tables on their respective IDs and event quarters. It filters for nonprofits in the 'disaster relief' sector and groups events by quarter, counting the number of events in each quarter.</s>"}
{"text": "<s>[INST] \nWhat is the total amount donated by each donor in 2025, ranked in descending order?\nCREATE TABLE Donors (DonorID INT, DonorName VARCHAR(50), City VARCHAR(50)); CREATE TABLE Donations (DonationID INT, DonorID INT, DonationDate DATE, DonationAmount DECIMAL(10,2)); INSERT INTO Donors (DonorID, DonorName, City) VALUES (1, 'John Doe', 'New York'), (2, 'Jane Smith', 'Los Angeles'), (3, 'Alice Johnson', 'Chicago'); INSERT INTO Donations (DonationID, DonorID, DonationDate, DonationAmount) VALUES (1, 1, '2025-01-01', 100.00), (2, 1, '2025-01-02', 200.00), (3, 2, '2025-01-01', 150.00), (4, NULL, '2025-01-01', 50.00); \n[/INST]\nSELECT d.DonorName, SUM(DonationAmount) AS TotalDonated FROM Donors d JOIN Donations don ON d.DonorID = don.DonorID WHERE YEAR(DonationDate) = 2025 GROUP BY d.DonorName ORDER BY TotalDonated DESC;\nThe SQL query joins the Donors and Donations tables on DonorID, filters the result for donations made in 2025, groups the result by DonorName, calculates the total amount donated by each donor, and orders the result by the total amount donated in descending order. The query uses an INNER JOIN to exclude donors with no donations.</s>"}
{"text": "<s>[INST] \nFind the average environmental impact score for each chemical produced at the Frankfurt and Munich plants.\nCREATE TABLE plants (plant VARCHAR(20), chemical VARCHAR(20), score INT); INSERT INTO plants (plant, chemical, score) VALUES ('Frankfurt', 'Ethanol', 80), ('Frankfurt', 'Propanol', 75), ('Munich', 'Methanol', 70), ('Munich', 'Butanol', 78); \n[/INST]\nSELECT chemical, AVG(score) FROM plants WHERE plant IN ('Frankfurt', 'Munich') GROUP BY chemical;\nThe SQL query calculates the average environmental impact score for each chemical produced at the Frankfurt and Munich plants by using AVG function and GROUP BY operator.</s>"}
{"text": "<s>[INST] \nWhat is the average fare for a route in the 'east' region with wheelchair accessibility?\nCREATE TABLE Routes (id INT, region VARCHAR(10), wheelchair_accessible BOOLEAN, fare DECIMAL(5,2)); INSERT INTO Routes (id, region, wheelchair_accessible, fare) VALUES (1, 'north', true, 10.00), (2, 'north', true, 15.00), (3, 'south', true, 7.00), (4, 'east', true, 12.00), (5, 'east', true, 13.00); \n[/INST]\nSELECT AVG(Routes.fare) FROM Routes WHERE Routes.region = 'east' AND Routes.wheelchair_accessible = true;\nThis query calculates the average fare for a route in the 'east' region with wheelchair accessibility by filtering on the region and wheelchair_accessible columns in the Routes table and using the AVG() function to find the average fare.</s>"}
{"text": "<s>[INST] \nHow many articles were published in each media outlet in the past week, grouped by weekday?\nCREATE TABLE articles (id INT, media_outlet VARCHAR(20), date DATE); CREATE VIEW last_week AS SELECT CURDATE() - INTERVAL day day FROM (SELECT 0 day UNION ALL SELECT 1 UNION ALL SELECT 2 UNION ALL SELECT 3 UNION ALL SELECT 4 UNION ALL SELECT 5 UNION ALL SELECT 6) days; INSERT INTO articles VALUES (3, 'BBC', '2022-01-28'); \n[/INST]\nSELECT DATE_FORMAT(articles.date, '%W') as weekday, media_outlet, COUNT(*) as article_count FROM articles INNER JOIN last_week ON DATEDIFF(articles.date, last_week.day) BETWEEN 0 AND 6 GROUP BY weekday, media_outlet;\nThis query joins the articles table and the last_week view, filters for rows where the date of the article is within the past week, groups the results by weekday and media outlet, and returns the number of articles published in each outlet for each weekday.</s>"}
{"text": "<s>[INST] \nWhich departments have the highest and lowest number of open data initiatives?\nCREATE TABLE dept_open_data (dept_name TEXT, initiative_count INT); \n[/INST]\nSELECT dept_name, initiative_count FROM (SELECT dept_name, initiative_count, ROW_NUMBER() OVER (ORDER BY initiative_count DESC) AS high_dept, ROW_NUMBER() OVER (ORDER BY initiative_count ASC) AS low_dept FROM dept_open_data) subquery WHERE high_dept = 1 OR low_dept = 1;\nThis query uses window functions to calculate the row numbers for departments with the highest and lowest number of open data initiatives, and then filters the results to return only the departments with the highest and lowest initiative counts.</s>"}
{"text": "<s>[INST] \nWhich menu item in the 'Desserts' category has the highest price?\nCREATE TABLE menu (menu_id INT, menu_name VARCHAR(50), category VARCHAR(50), quantity_sold INT, price DECIMAL(5,2), month_sold INT); INSERT INTO menu (menu_id, menu_name, category, quantity_sold, price, month_sold) VALUES (3, 'New York Cheesecake', 'Desserts', 25, 7.99, 1), (4, 'Chocolate Lava Cake', 'Desserts', 30, 8.99, 1); \n[/INST]\nSELECT menu_name, MAX(price) FROM menu WHERE category = 'Desserts';\nThis query finds the menu item with the highest price in the 'Desserts' category by using the MAX() function on the price column and filtering for the 'Desserts' category.</s>"}
{"text": "<s>[INST] \nWhat is the total billing amount for attorney 'Charlie Brown'?\nCREATE TABLE attorneys (attorney_id INT, attorney_name TEXT, total_billing FLOAT); INSERT INTO attorneys (attorney_id, attorney_name, total_billing) VALUES (1, 'Alice Smith', 4000.00), (2, 'Bob Johnson', 5000.00), (3, 'Charlie Brown', 3500.00); \n[/INST]\nSELECT SUM(total_billing) FROM attorneys WHERE attorney_name = 'Charlie Brown';\nThis SQL query calculates the total billing amount for attorney 'Charlie Brown' from the 'attorneys' table.</s>"}
{"text": "<s>[INST] \nWhat is the total number of intelligence operations conducted by 'Intelligence Agency X', 'Intelligence Agency Y', and 'Intelligence Agency Z'?\nCREATE TABLE IntelligenceOperations (ID INT, Agency VARCHAR(50), Operation VARCHAR(50)); INSERT INTO IntelligenceOperations (ID, Agency, Operation) VALUES (1, 'Intelligence Agency X', 'Operation1'); INSERT INTO IntelligenceOperations (ID, Agency, Operation) VALUES (2, 'Intelligence Agency Y', 'Operation2'); INSERT INTO IntelligenceOperations (ID, Agency, Operation) VALUES (3, 'Intelligence Agency Z', 'Operation3'); \n[/INST]\nSELECT COUNT(*) FROM IntelligenceOperations WHERE Agency IN ('Intelligence Agency X', 'Intelligence Agency Y', 'Intelligence Agency Z');\nThe SQL query counts the number of intelligence operations conducted by 'Intelligence Agency X', 'Intelligence Agency Y', and 'Intelligence Agency Z' by using the COUNT(*) function and filtering the rows with the WHERE clause to only include records with an agency value of 'Intelligence Agency X', 'Intelligence Agency Y', or 'Intelligence Agency Z'.</s>"}
{"text": "<s>[INST] \nHow many water quality violations were there in each country in the year 2022?\nCREATE TABLE water_quality_violations(violation_id INT, violation_date DATE, country TEXT); INSERT INTO water_quality_violations(violation_id, violation_date, country) VALUES (1, '2022-01-01', 'United States'), (2, '2022-02-01', 'Canada'), (3, '2022-03-01', 'Mexico'), (4, '2022-04-01', 'Brazil'), (5, '2022-05-01', 'Argentina'); \n[/INST]\nSELECT country, COUNT(*) FROM water_quality_violations WHERE YEAR(violation_date) = 2022 GROUP BY country;\nThis query calculates the number of water quality violations for each country in the year 2022 by selecting the country column and using the COUNT function to count the number of rows for each country. The WHERE clause filters the results to only rows with a violation_date in the year 2022. The GROUP BY clause groups the results by country.</s>"}
{"text": "<s>[INST] \nHow many clients have a savings balance greater than $5,000 in Australia?\nCREATE TABLE clients (client_id INT, name VARCHAR(100), age INT, country VARCHAR(50), savings DECIMAL(10,2));  INSERT INTO clients (client_id, name, age, country, savings) VALUES (10, 'Sarah Johnson', 50, 'Australia', 7000); \n[/INST]\nSELECT COUNT(*) FROM clients WHERE country = 'Australia' AND savings > 5000;\nThis query counts the number of clients with a savings balance greater than $5,000 in Australia. It does this by selecting the COUNT function on all records and filtering the clients table where the country is 'Australia' and the savings are greater than 5000.</s>"}
{"text": "<s>[INST] \nUpdate the \"disease_prevalence\" view to show the top 3 most common diseases by region\nCREATE VIEW disease_prevalence AS SELECT region, disease, COUNT(*) as cases FROM health_data GROUP BY region, disease; \n[/INST]\nCREATE OR REPLACE VIEW disease_prevalence AS SELECT region, disease, COUNT(*) as cases FROM health_data GROUP BY region, disease ORDER BY region, cases DESC FETCH FIRST 3 ROWS PER GROUP;\nThis query creates a new view, replacing the old one, that selects the region, disease, and number of cases from the health_data table, groups them by region and disease, and orders them by region and number of cases in descending order, fetching only the top 3 rows per group (i.e., per region).</s>"}
{"text": "<s>[INST] \nList all employees with their corresponding job position and salary, sorted by salary in descending order\nCREATE TABLE employee (id INT, name VARCHAR(50), gender VARCHAR(50), department_id INT, position_id INT, salary INT); CREATE TABLE position (id INT, title VARCHAR(50)); \n[/INST]\nSELECT employee.name, position.title, employee.salary FROM employee INNER JOIN position ON employee.position_id = position.id ORDER BY employee.salary DESC;\nThe SQL query performs an inner join between the 'employee' and 'position' tables based on the 'position_id' column, returns the name of the employee, job title, and salary, and sorts the results by salary in descending order.</s>"}
{"text": "<s>[INST] \nShow the number of employees hired in each month of the year, broken down by department.\nCREATE TABLE employees (id INT, name VARCHAR(50), department VARCHAR(50), hire_date DATE); INSERT INTO employees (id, name, department, hire_date) VALUES (1, 'John Doe', 'IT', '2021-03-01'), (2, 'Jane Smith', 'Marketing', '2021-07-15'), (3, 'Mike Johnson', 'IT', '2021-02-12'), (4, 'Sara Connor', 'Marketing', '2021-10-04'); \n[/INST]\nSELECT department, DATE_TRUNC('month', hire_date) AS hire_month, COUNT(*) AS num_hires FROM employees GROUP BY department, hire_month;\nThis SQL query first uses the DATE_TRUNC function to extract the month of the year from the hire_date column and groups the records by department and hire_month. It then uses the COUNT aggregate function to count the number of records in each group.</s>"}
{"text": "<s>[INST] \nWhat is the total number of community development projects carried out in 'community_development' table?\nCREATE TABLE community_development (id INT, project_type VARCHAR(50), location VARCHAR(50), start_date DATE, end_date DATE); INSERT INTO community_development (id, project_type, location, start_date, end_date) VALUES (1, 'Education', 'Afghanistan', '2020-01-01', '2020-12-31'), (2, 'Health', 'Nigeria', '2020-01-01', '2020-12-31'); \n[/INST]\nSELECT COUNT(*) FROM community_development;\nThis query counts the total number of community development projects carried out in the community_development table.</s>"}
{"text": "<s>[INST] \nWhat is the total number of properties and the average price in the state of Washington?\nCREATE TABLE Properties (id INT, price INT, state TEXT); INSERT INTO Properties (id, price, state) VALUES (1, 600000, 'Washington'), (2, 500000, 'California'), (3, 800000, 'Washington'), (4, 700000, 'Colorado'); \n[/INST]\nSELECT COUNT(*) AS total_properties, AVG(price) AS avg_price FROM Properties WHERE state = 'Washington';\nThis SQL query calculates the total number of properties and the average price in the state of Washington. It achieves this by filtering the records where the state column is Washington, and then calculating the count and average price of the remaining records.</s>"}
{"text": "<s>[INST] \nWhat is the minimum wage for workers in the 'Education' sector?\nCREATE TABLE MinWageData (EmployeeID INT, Sector VARCHAR(20), HourlyWage DECIMAL(10, 2)); INSERT INTO MinWageData (EmployeeID, Sector, HourlyWage) VALUES (1, 'Education', 20.00), (2, 'Education', 22.00), (3, 'Healthcare', 25.00); \n[/INST]\nSELECT MIN(HourlyWage) FROM MinWageData WHERE Sector = 'Education';\nThis query calculates the minimum wage for workers in the Education sector. It does this by finding the minimum value of the HourlyWage column for rows where Sector is 'Education'.</s>"}
{"text": "<s>[INST] \nFind the total revenue generated from organic ingredients in the Southwest\nCREATE TABLE Menu (menu_id INT, dish_name VARCHAR(100), is_organic BOOLEAN); CREATE TABLE Revenue (revenue_id INT, menu_id INT, revenue_amount DECIMAL(10,2)); INSERT INTO Menu (menu_id, dish_name, is_organic) VALUES (1, 'Veggie Burger', TRUE); INSERT INTO Revenue (revenue_id, menu_id, revenue_amount) VALUES (1, 1, 12.99); INSERT INTO Revenue (revenue_id, menu_id, revenue_amount) VALUES (2, 1, 12.99); \n[/INST]\nSELECT SUM(Revenue.revenue_amount) AS organic_revenue FROM Revenue JOIN Menu ON Revenue.menu_id = Menu.menu_id WHERE Menu.is_organic = TRUE AND region = 'Southwest';\nThe query calculates the total revenue from organic dishes by summing revenue_amount for rows where is_organic is TRUE. It also filters records by region 'Southwest' using the join between Menu and Revenue tables.</s>"}
{"text": "<s>[INST] \nWhat are the average annual budgets for agricultural innovation initiatives in each country in the 'agricultural_innovation' table?\nCREATE TABLE agricultural_innovation (id INT, initiative_name VARCHAR(50), country VARCHAR(50), year INT, budget DECIMAL(10,2)); INSERT INTO agricultural_innovation (id, initiative_name, country, year, budget) VALUES (1, 'Precision Agriculture', 'Canada', 2018, 25000.00), (2, 'Drip Irrigation', 'Mexico', 2019, 30000.00), (3, 'Vertical Farming', 'US', 2020, 35000.00); \n[/INST]\nSELECT country, AVG(budget) as avg_annual_budget FROM agricultural_innovation GROUP BY country;\nThis SQL query calculates the average annual budget for agricultural innovation initiatives in each unique country in the 'agricultural_innovation' table using the AVG() function and the GROUP BY clause.</s>"}
{"text": "<s>[INST] \nWhat is the total cost of building permits issued per month?\nCREATE TABLE building_permits (permit_id SERIAL PRIMARY KEY, issue_date DATE, cost INTEGER); INSERT INTO building_permits (issue_date, cost) VALUES ('2021-01-01', 1500), ('2021-01-10', 2000), ('2022-02-01', 1800); \n[/INST]\nSELECT TO_CHAR(issue_date, 'Month') AS month, SUM(cost) AS total_cost FROM building_permits GROUP BY month ORDER BY TO_DATE(month, 'Month') ASC;\nThe SQL query selects the month from the issue_date column in the building_permits table, calculates the sum of the cost column for each month, filters the results to include only those records where the issue_date is within the last year, groups the results by month, and orders the results by month in ascending order. The query then returns the total cost of building permits issued per month.</s>"}
{"text": "<s>[INST] \nFind the policy type and number of policies, along with the average claim amount, for policyholders in California.\nCREATE TABLE Claim (ClaimId INT, PolicyId INT, ClaimAmount DECIMAL(10,2)); CREATE TABLE Policy (PolicyId INT, PolicyType VARCHAR(50), IssueDate DATE, Region VARCHAR(50), PolicyholderZip INT); \n[/INST]\nSELECT Policy.PolicyType, COUNT(Policy.PolicyId), AVG(Claim.ClaimAmount) FROM Policy INNER JOIN Claim ON Policy.PolicyId = Claim.PolicyId WHERE Policy.Region = 'California' GROUP BY Policy.PolicyType;\nThe SQL query performs a join between the Claim and Policy tables, filtering for policyholders in California. It then calculates the average claim amount for each policy type, providing the desired output.</s>"}
{"text": "<s>[INST] \nWhat is the total number of female and male founders for each country?\nCREATE TABLE company_founding (id INT, name VARCHAR(50), country VARCHAR(50), founding_year INT, gender VARCHAR(10)); INSERT INTO company_founding (id, name, country, founding_year, gender) VALUES (1, 'Acme Inc', 'USA', 2010, 'Male'), (2, 'Beta Corp', 'Canada', 2005, 'Female'), (3, 'Gamma Inc', 'India', 2012, 'Male'), (4, 'Delta Corp', 'Brazil', 2008, 'Female'); \n[/INST]\nSELECT country, gender, COUNT(*) as total FROM company_founding GROUP BY ROLLUP(country, gender);\nThis query calculates the total number of founders for each country and gender, including a grand total.</s>"}
{"text": "<s>[INST] \nList the number of circular supply chain partners for each product category.\nCREATE TABLE CircularSupplyChain (PartnerID int, ProductCategoryID int); INSERT INTO CircularSupplyChain (PartnerID, ProductCategoryID) VALUES (1, 1), (2, 1), (3, 2), (4, 3), (5, 1), (6, 4); CREATE TABLE ProductCategories (ProductCategoryID int, ProductCategoryName varchar(50)); INSERT INTO ProductCategories (ProductCategoryID, ProductCategoryName) VALUES (1, 'Fashion'), (2, 'Furniture'), (3, 'Electronics'), (4, 'Home Appliances'); \n[/INST]\nSELECT pc.ProductCategoryName, COUNT(csc.PartnerID) AS PartnerCount FROM CircularSupplyChain csc JOIN ProductCategories pc ON csc.ProductCategoryID = pc.ProductCategoryID GROUP BY pc.ProductCategoryName;\nThe query calculates the number of partners in the circular supply chain for each product category by grouping the CircularSupplyChain table by ProductCategoryID and counting the PartnerIDs.</s>"}
{"text": "<s>[INST] \nWho were the top 3 contributors to evidence-based policy making in Canada in 2018?\nCREATE TABLE ContributorsToPolicy (id INT, contributor_name VARCHAR(50), country VARCHAR(50), contributions INT, year INT); \n[/INST]\nSELECT contributor_name, ROW_NUMBER() OVER (ORDER BY contributions DESC) AS rank FROM ContributorsToPolicy WHERE country = 'Canada' AND year = 2018 AND rank <= 3;\nThe query calculates the top 3 contributors to evidence-based policy making in Canada in 2018 by selecting the contributor_name and ranking the rows based on their contributions.</s>"}
{"text": "<s>[INST] \nWhat is the maximum housing affordability score for each city?\nCREATE TABLE housing_affordability (id INT, city VARCHAR(20), score FLOAT); INSERT INTO housing_affordability (id, city, score) VALUES (1, 'SF', 45.2), (2, 'NYC', 38.6), (3, 'LA', 51.1), (4, 'SF', 47.9), (5, 'NYC', 39.8); \n[/INST]\nSELECT city, MAX(score) as max_score FROM housing_affordability GROUP BY city;\nThis query calculates the maximum housing affordability score for each city by selecting the city and MAX(score) columns from the housing_affordability table and then grouping the results by city.</s>"}
{"text": "<s>[INST] \nWhich dish had the lowest sales in branch 4, 5, and 6?\nCREATE TABLE Branches (branch_id INT, branch_name VARCHAR(255));CREATE TABLE Menu (dish_name VARCHAR(255), branch_id INT, price DECIMAL(5,2));CREATE TABLE Sales (sale_date DATE, dish_name VARCHAR(255), quantity INT); \n[/INST]\nSELECT dish_name, SUM(quantity * price) as total_revenue FROM Sales JOIN Menu ON Sales.dish_name = Menu.dish_name WHERE branch_id IN (4, 5, 6) GROUP BY dish_name ORDER BY total_revenue ASC LIMIT 1;\nThe SQL query joins the Sales and Menu tables on dish_name and filters for sales in branches 4, 5, and 6. It then groups the data by dish_name and calculates the total revenue for each dish. Finally, it orders the results by total revenue in ascending order and returns the dish with the lowest revenue.</s>"}
{"text": "<s>[INST] \nWhat is the minimum price of items in the 'Fair Trade' category?\nCREATE TABLE fair_trade_items (item_id INT, category VARCHAR(255), price DECIMAL(10,2)); INSERT INTO fair_trade_items (item_id, category, price) VALUES (1, 'Fair Trade', 50.00), (2, 'Fair Trade', 75.00), (3, 'Fair Trade', 100.00); \n[/INST]\nSELECT category, MIN(price) as min_price FROM fair_trade_items WHERE category = 'Fair Trade' GROUP BY category;\nThe SQL query filters the fair_trade_items table for the 'Fair Trade' category and calculates the minimum price using the MIN function. The results are then grouped by category.</s>"}
{"text": "<s>[INST] \nHow many patients in total have been diagnosed with anxiety disorders?\nCREATE TABLE patients (id INT, age INT, gender TEXT, state TEXT, condition TEXT); INSERT INTO patients (id, age, gender, state, condition) VALUES (1, 35, 'Female', 'California', 'Anxiety'); INSERT INTO patients (id, age, gender, state, condition) VALUES (2, 42, 'Male', 'Florida', 'Depression'); \n[/INST]\nSELECT COUNT(*) FROM patients WHERE patients.condition = 'Anxiety';\nThis query retrieves the number of patients who have been diagnosed with anxiety disorders by filtering the patients table for rows with the condition of anxiety disorders.</s>"}
{"text": "<s>[INST] \nWhat is the distribution of co-ownership properties by year in San Francisco?\nCREATE TABLE sf_coownership (id INT, year INT, co_ownership BOOLEAN); INSERT INTO sf_coownership (id, year, co_ownership) VALUES (1, 2018, TRUE), (2, 2019, FALSE), (3, 2018, TRUE), (4, 2019, TRUE), (5, 2020, FALSE); \n[/INST]\nSELECT year, co_ownership, COUNT(*) FROM sf_coownership GROUP BY year, co_ownership;\nDetermine the distribution of co-ownership properties by year in San Francisco by grouping properties by year and co-ownership status and counting the number of properties in each group.</s>"}
{"text": "<s>[INST] \nWhat is the percentage of teachers who attended professional development workshops in each region?\nCREATE TABLE teachers (teacher_id INT, region_id INT, workshop_attendance BOOLEAN); INSERT INTO teachers (teacher_id, region_id, workshop_attendance) VALUES (1, 5, TRUE), (2, 5, FALSE), (3, 6, TRUE), (4, 6, TRUE); CREATE TABLE regions (region_id INT, region_name VARCHAR(20)); INSERT INTO regions (region_id, region_name) VALUES (5, 'Northeast'), (6, 'Southeast'); \n[/INST]\nSELECT r.region_name, (COUNT(t.teacher_id) * 100.0 / (SELECT COUNT(*) FROM teachers)) as percentage_attended FROM teachers t JOIN regions r ON t.region_id = r.region_id WHERE workshop_attendance = TRUE GROUP BY r.region_name;\nCalculate the percentage of teachers who attended professional development workshops by partitioning the data by region_name, ordering by the same column, and calculating the percentage of teachers who attended workshops based on the total number of teachers in each region.</s>"}
{"text": "<s>[INST] \nWhat is the minimum number of containers handled in a single day by cranes in the Port of Rotterdam in April 2021?\nCREATE TABLE Port_Rotterdam_Crane_Stats (crane_name TEXT, handling_date DATE, containers_handled INTEGER); INSERT INTO Port_Rotterdam_Crane_Stats (crane_name, handling_date, containers_handled) VALUES ('CraneI', '2021-04-01', 70), ('CraneJ', '2021-04-02', 60), ('CraneK', '2021-04-03', 50), ('CraneL', '2021-04-04', 80); \n[/INST]\nSELECT MIN(containers_handled) FROM Port_Rotterdam_Crane_Stats WHERE handling_date >= '2021-04-01' AND handling_date <= '2021-04-30';\nThe query filters for crane statistics in the Port of Rotterdam in April 2021. It then calculates the minimum number of containers handled in a single day during this time period.</s>"}
{"text": "<s>[INST] \nWhat is the average donation per volunteer for 2021, ranked in descending order?\nCREATE TABLE Donors (DonorID INT, DonationDate DATE, Amount DECIMAL(10,2)); CREATE TABLE Volunteers (VolunteerID INT, VolunteerName VARCHAR(50)); INSERT INTO Donors (DonorID, DonationDate, Amount) VALUES (1, '2021-01-01', 50.00), (2, '2021-02-01', 100.00), (3, '2021-01-15', 75.00); INSERT INTO Volunteers (VolunteerID, VolunteerName) VALUES (1, 'John Doe'), (2, 'Jane Smith'), (3, 'Alice Johnson'); \n[/INST]\nSELECT v.VolunteerName, AVG(d.Amount) AS AvgDonation FROM Donors d JOIN Volunteers v ON d.DonorID = v.VolunteerID WHERE YEAR(d.DonationDate) = 2021 GROUP BY v.VolunteerName ORDER BY AvgDonation DESC;\nThe SQL query joins the Donors and Volunteers tables on DonorID and VolunteerID, filters the result for donations made in 2021, groups the result by VolunteerName, calculates the average donation per volunteer, and orders the result by average donation in descending order.</s>"}
{"text": "<s>[INST] \nUpdate the research_grants table with the new grant amounts\nCREATE TABLE research_grants (id INT, name TEXT, amount INT); INSERT INTO research_grants (id, name, amount) VALUES (1, 'Grant A', 50000), (2, 'Grant B', 75000), (3, 'Grant C', 100000); \n[/INST]\nUPDATE research_grants SET amount = 60000 WHERE name = 'Grant A'; UPDATE research_grants SET amount = 80000 WHERE name = 'Grant B'; UPDATE research_grants SET amount = 90000 WHERE name = 'Grant C';\nThese queries update the amount column for each record in the research_grants table based on the name of the grant.</s>"}
{"text": "<s>[INST] \nWhich members have not attended a workout since joining?\nCREATE TABLE member_data (member_id INT, join_date DATE); CREATE TABLE member_workouts (member_id INT, workout_date DATE); \n[/INST]\nSELECT mdata.member_id FROM member_data mdata LEFT JOIN member_workouts mworkouts ON mdata.member_id = mworkouts.member_id WHERE mworkouts.member_id IS NULL;\nThe query performs a left join between the member_data and member_workouts tables on the member_id column. The WHERE clause filters the results to members who have no workout records.</s>"}
{"text": "<s>[INST] \nWhich countries have launched the most satellites since 2010?\nCREATE TABLE satellites (satellite_id INT, satellite_name VARCHAR(100), country VARCHAR(50), launch_date DATE); INSERT INTO satellites (satellite_id, satellite_name, country, launch_date) VALUES (1, 'Sentinel-1A', 'France', '2012-04-03'); INSERT INTO satellites (satellite_id, satellite_name, country, launch_date) VALUES (2, 'Chandrayaan-1', 'India', '2008-10-22'); \n[/INST]\nSELECT country, COUNT(*) as total_launched FROM satellites WHERE launch_date >= '2010-01-01' GROUP BY country ORDER BY total_launched DESC;\nThis query uses the GROUP BY clause to group results by country and the COUNT(*) function to count records for each country. It then orders the results by the total number of satellites launched in descending order using the ORDER BY clause.</s>"}
{"text": "<s>[INST] \nCount the number of unique users from the \"users\" table who have posted content related to \"plant-based diets\" in the \"social_media\" schema.\nCREATE TABLE users (id INT, username TEXT, email TEXT, created_at DATETIME); CREATE TABLE posts (id INT, user_id INT, content TEXT, likes INT, shares INT, created_at DATETIME); INSERT INTO users (id, username, email, created_at) VALUES (1, 'jane123', '[jane@gmail.com](mailto:jane@gmail.com)', '2021-01-01 10:00:00'), (2, 'bob_the_builder', '[bob@yahoo.com](mailto:bob@yahoo.com)', '2021-02-01 11:00:00'); INSERT INTO posts (id, user_id, content, likes, shares, created_at) VALUES (1, 1, 'I love plant-based diets!', 500, 200, '2022-01-01 10:00:00'), (2, 1, 'Trying out a new plant-based recipe...', 800, 300, '2022-01-02 11:00:00'); \n[/INST]\nSELECT COUNT(DISTINCT users.id) FROM users JOIN posts ON users.id = posts.user_id WHERE posts.content LIKE '%plant-based%' AND schema='social_media';\nThis query counts the number of unique users from the \"users\" table who have posted content related to \"plant-based diets\" in the \"social_media\" schema. The query uses a JOIN clause to combine rows from the \"users\" and \"posts\" tables based on the user_id column. The WHERE clause filters the rows based on the content column's value and schema name. The COUNT function then computes the number of unique user IDs for the filtered rows.</s>"}
{"text": "<s>[INST] \nWhat is the maximum, minimum, and average playtime for each game genre?\nCREATE TABLE game_playtime (game_id INT, genre VARCHAR(255), playtime FLOAT); INSERT INTO game_playtime (game_id, genre, playtime) VALUES (1, 'RPG', 50), (2, 'FPS', 30), (3, 'Simulation', 70), (4, 'RPG', 60), (5, 'FPS', 40); \n[/INST]\nSELECT genre, MAX(playtime) as max_playtime, MIN(playtime) as min_playtime, AVG(playtime) as avg_playtime FROM game_playtime GROUP BY genre;\nThis SQL query calculates the maximum, minimum, and average playtime for each game genre. It does so by using the MAX, MIN, and AVG aggregate functions on the playtime column, grouped by the genre column.</s>"}
{"text": "<s>[INST] \nWhat is the average mass of spacecraft manufactured by SpaceCorp in 2022?\nCREATE TABLE SpacecraftManufacturing (ID INT, Manufacturer VARCHAR(255), Mass INT, Year INT); INSERT INTO SpacecraftManufacturing (ID, Manufacturer, Mass, Year) VALUES (1, 'SpaceCorp', 3000, 2022), (2, 'SpaceCorp', 4000, 2022), (3, 'Galactic', 5000, 2022); \n[/INST]\nSELECT AVG(Mass) FROM SpacecraftManufacturing WHERE Manufacturer = 'SpaceCorp' AND Year = 2022;\nThe SQL query calculates the average mass of spacecraft manufactured by SpaceCorp in 2022 by filtering the SpacecraftManufacturing table for SpaceCorp records from 2022 and calculating the average mass.</s>"}
{"text": "<s>[INST] \nWhat is the total quantity of 'Wool Sweaters' sold and returned between '2022-01-16' and '2022-01-31'?\nCREATE TABLE sales (id INT, product VARCHAR(50), quantity INT, price DECIMAL(5,2), date DATE); INSERT INTO sales (id, product, quantity, price, date) VALUES (1, 'Wool Sweaters', 75, 60.00, '2022-01-18'), (2, 'Wool Sweaters', 30, 60.00, '2022-01-25'); CREATE TABLE returns (id INT, product VARCHAR(50), quantity INT, reason VARCHAR(50), date DATE); INSERT INTO returns (id, product, quantity, reason, date) VALUES (1, 'Wool Sweaters', 10, 'Size too large', '2022-01-20'), (2, 'Wool Sweaters', 5, 'Did not like color', '2022-01-30'); \n[/INST]\nSELECT SUM(s.quantity) FROM sales s WHERE s.product = 'Wool Sweaters' AND s.date BETWEEN '2022-01-16' AND '2022-01-31' UNION SELECT SUM(r.quantity) FROM returns r WHERE r.product = 'Wool Sweaters' AND r.date BETWEEN '2022-01-16' AND '2022-01-31';\nThis query calculates the total quantity of 'Wool Sweaters' sold and returned between '2022-01-16' and '2022-01-31' by summing the quantity of sales and returns separately, and then combining the results into a single table.</s>"}
{"text": "<s>[INST] \nHow many volunteers from historically underrepresented communities participated in projects in Q4 2023?\nCREATE TABLE underrepresented_groups (group_id INT, group_name TEXT); INSERT INTO underrepresented_groups (group_id, group_name) VALUES (1, 'Indigenous peoples'), (2, 'People with disabilities'), (3, 'Racialized communities'), (4, 'LGBTQIA+ communities'); CREATE TABLE volunteers (volunteer_id INT, group_id INT, project_id INT, volunteer_date DATE); INSERT INTO volunteers (volunteer_id, group_id, project_id, volunteer_date) VALUES (1, 1, 1, '2023-10-05'), (2, 2, 2, '2023-10-10'), (3, 3, 3, '2023-10-15'), (4, 4, 1, '2023-10-12'), (5, 1, 2, '2023-10-20'), (6, 2, 3, '2023-10-01'); \n[/INST]\nSELECT COUNT(DISTINCT volunteer_id) as num_volunteers FROM volunteers v JOIN underrepresented_groups grp ON v.group_id = grp.group_id WHERE v.volunteer_date BETWEEN '2023-10-01' AND '2023-12-31';\nThe SQL query joins the underrepresented_groups and volunteers tables based on the group_id foreign key. It then filters volunteers who participated in Q4 2023 and calculates the number of unique volunteers from historically underrepresented communities during that period.</s>"}
{"text": "<s>[INST] \nInsert new records for a cargo ship named 'Atlantic Explorer' with an ID of 4, owned by the Global Shipping company, and a capacity of 180,000.\nCREATE TABLE cargo_ships (id INT, name VARCHAR(50), capacity INT, owner_id INT); INSERT INTO cargo_ships (id, name, capacity, owner_id) VALUES (1, 'Sea Titan', 150000, 1), (2, 'Ocean Marvel', 200000, 1), (3, 'Cargo Master', 120000, 2); CREATE TABLE owners (id INT, name VARCHAR(50)); INSERT INTO owners (id, name) VALUES (1, 'ACME Corporation'), (2, 'Global Shipping'); \n[/INST]\nINSERT INTO cargo_ships (id, name, capacity, owner_id) VALUES (4, 'Atlantic Explorer', 180000, (SELECT id FROM owners WHERE name = 'Global Shipping'));\nInserts a new record into the cargo_ships table with the specified details. Uses a subquery to determine the owner_id value based on the Global Shipping company name.</s>"}
{"text": "<s>[INST] \nWhat is the number of charging stations in each city in California?\nCREATE TABLE ChargingStation(id INT, city VARCHAR(20), state VARCHAR(20), quantity INT); \n[/INST]\nSELECT city, COUNT(*) as quantity FROM ChargingStation WHERE state = 'California' GROUP BY city ORDER BY quantity DESC;\nThe SQL query calculates the number of charging stations in each city in California by using a GROUP BY clause to group the data by city and a COUNT() function to count the number of charging stations in each group.</s>"}
{"text": "<s>[INST] \nWhat is the total number of autonomous taxi rides in Singapore?\nCREATE TABLE taxi_rides (id INT, trips INT, type VARCHAR(20), city VARCHAR(20)); INSERT INTO taxi_rides (id, trips, type, city) VALUES (1, 2000, 'Autonomous', 'Singapore'); \n[/INST]\nSELECT SUM(trips) FROM taxi_rides WHERE type = 'Autonomous' AND city = 'Singapore';\nThis query calculates the total number of autonomous taxi rides in Singapore. It does this by selecting the trips column from the taxi_rides table where the type is 'Autonomous' and city is 'Singapore', then summing those values.</s>"}
{"text": "<s>[INST] \nList the titles and amounts of all research grants in the \"major_grants\" view.\nCREATE TABLE students (student_id INT, name VARCHAR(255), major VARCHAR(255), gpa DECIMAL(3,2)); CREATE TABLE research_grants (grant_id INT, title VARCHAR(255), amount DECIMAL(10,2), department VARCHAR(255)); CREATE VIEW major_grants AS SELECT * FROM research_grants WHERE amount > 40000; \n[/INST]\nSELECT title, amount FROM major_grants;\nThe SQL query selects the \"title\" and \"amount\" columns from the \"major_grants\" view, which displays only research grants with an amount greater than $40,000.</s>"}
{"text": "<s>[INST] \nDelete all records from the 'safety_record' table that have a 'report_date' before 2020-01-01\nCREATE TABLE safety_record (product_id INT, report_date DATE, report_status TEXT); \n[/INST]\nDELETE FROM safety_record WHERE report_date < '2020-01-01';\nThis query deletes all records from the 'safety_record' table where the 'report_date' is before 2020-01-01.</s>"}
{"text": "<s>[INST] \nWhat is the percentage of co-owned properties in Berlin?\nCREATE TABLE properties (id INT, co_owned BOOLEAN, city VARCHAR(20)); INSERT INTO properties (id, co_owned, city) VALUES (1, TRUE, 'Berlin'), (2, FALSE, 'Berlin'), (3, TRUE, 'Berlin'); \n[/INST]\nSELECT 100.0 * COUNT(*) FILTER (WHERE co_owned = TRUE) / COUNT(*) FROM properties WHERE city = 'Berlin';\nWe are calculating the percentage of co-owned properties in Berlin by using the COUNT function with the FILTER clause to only count rows where co_owned is TRUE, and dividing by the total number of properties in Berlin. The result is multiplied by 100.0 to convert to a percentage.</s>"}
{"text": "<s>[INST] \nList all RPG games that have been played by female players, along with the players' age.\nCREATE TABLE Players (PlayerID INT, Name VARCHAR(100), Age INT, Gender VARCHAR(10)); INSERT INTO Players VALUES (1, 'Jessica Davis', 23, 'Female'); INSERT INTO Players VALUES (2, 'Daniel Kim', 30, 'Male'); CREATE TABLE GameDesign (GameID INT, GameName VARCHAR(100), Genre VARCHAR(50)); INSERT INTO GameDesign VALUES (1, 'GameZ', 'RPG'); INSERT INTO GameDesign VALUES (2, 'GameW', 'Simulation'); \n[/INST]\nSELECT GD.GameName, P.Age FROM Players P JOIN (SELECT GameID, GameName FROM GameDesign WHERE Genre = 'RPG') GD ON P.PlayerID = GD.GameID WHERE P.Gender = 'Female';\n1. Subquery filters RPG games from GameDesign. 2. Joins Players and subquery on PlayerID. 3. Filters records where Gender is 'Female'. 4. Selects GameName and Age.</s>"}
{"text": "<s>[INST] \nWhat is the total capacity of factories in Spain and France?\nCREATE TABLE factories (factory_id INT, location VARCHAR(50), capacity INT); INSERT INTO factories (factory_id, location, capacity) VALUES (1, 'Madrid, Spain', 5000), (2, 'Paris, France', 7000), (3, 'London, UK', 6000); \n[/INST]\nSELECT SUM(capacity) FROM factories WHERE location LIKE '%Spain%' OR location LIKE '%France%';\nThis query calculates the total capacity of factories located in Spain and France by selecting the sum of capacity records with location containing 'Spain' or 'France'.</s>"}
{"text": "<s>[INST] \nAdd a new virtual tourism attraction to 'attractions' table\nCREATE TABLE attractions (id INT PRIMARY KEY, name VARCHAR(255), type VARCHAR(255), country VARCHAR(255)); \n[/INST]\nINSERT INTO attractions (id, name, type, country) VALUES (1, 'Amazon Rainforest Virtual Tour', 'Virtual', 'Brazil');\nA new record is inserted into the 'attractions' table for the Amazon Rainforest Virtual Tour in Brazil.</s>"}
{"text": "<s>[INST] \nWhich sites have more pottery than tools?\nCREATE TABLE Artifacts (ArtifactID INT, ArtifactType VARCHAR(50), Quantity INT, SiteID INT); INSERT INTO Artifacts (ArtifactID, ArtifactType, Quantity, SiteID) VALUES (1, 'Pottery', 25, 1), (2, 'Tools', 12, 1), (3, 'Pottery', 30, 2), (4, 'Tools', 18, 2), (5, 'Pottery', 22, 3), (6, 'Tools', 15, 3); \n[/INST]\nSELECT SiteID FROM (SELECT ArtifactType, SiteID, Quantity, SUM(Quantity) OVER (PARTITION BY ArtifactType) AS TotalQuantity FROM Artifacts) AS Subquery WHERE ArtifactType = 'Pottery' AND TotalQuantity > (SELECT SUM(Quantity) FROM Artifacts WHERE ArtifactType = 'Tools' AND SiteID = Subquery.SiteID);\nThis SQL query uses the SUM window function to calculate the total quantity of pottery and tools for each site. It then creates a subquery to compare the total quantity of pottery to the total quantity of tools for each site. The final SELECT statement returns the SiteID for sites where the total quantity of pottery is greater than the total quantity of tools.</s>"}
{"text": "<s>[INST] \nIdentify mining sites with high carbon emissions and their average emission rate\nCREATE TABLE MiningSites (SiteID INT, SiteName VARCHAR(50), Location VARCHAR(50), CarbonEmissions INT); INSERT INTO MiningSites (SiteID, SiteName, Location, CarbonEmissions) VALUES (1, 'Site C', 'California', 1500), (2, 'Site D', 'Texas', 2000), (3, 'Site E', 'Alberta', 2500); \n[/INST]\nSELECT SiteName, Location, AVG(CarbonEmissions) as AverageEmissionRate FROM MiningSites WHERE CarbonEmissions > 1500 GROUP BY SiteID;\nThis SQL query filters mining sites with carbon emissions greater than 1500, groups the results by SiteID, and calculates the average emission rate using the AVG function.</s>"}
{"text": "<s>[INST] \nWhat are the names and total cargo weights for all shipments that share a warehouse with shipment ID 12345?\nCREATE TABLE Warehouses (WarehouseID int, WarehouseName varchar(50)); CREATE TABLE Shipments (ShipmentID int, WarehouseID int, CargoWeight int); INSERT INTO Warehouses VALUES (1, 'WarehouseA'), (2, 'WarehouseB'), (3, 'WarehouseC'); INSERT INTO Shipments VALUES (12345, 1, 5000), (67890, 1, 7000), (11121, 2, 6000), (22232, 3, 8000) \n[/INST]\nSELECT Warehouses.WarehouseName, SUM(Shipments.CargoWeight) as TotalCargoWeight FROM Warehouses INNER JOIN Shipments ON Warehouses.WarehouseID = Shipments.WarehouseID WHERE Shipments.ShipmentID <> 12345 AND Warehouses.WarehouseID = (SELECT WarehouseID FROM Shipments WHERE ShipmentID = 12345) GROUP BY Warehouses.WarehouseName;\nThe SQL query first performs an inner join between the Warehouses and Shipments tables, based on the WarehouseID. It then filters out the records with ShipmentID 12345 and selects the WarehouseName and CargoWeight. Finally, it groups the result by WarehouseName and calculates the sum of CargoWeight for each group.</s>"}
{"text": "<s>[INST] \nWhat is the maximum capacity of any energy efficiency project?\nCREATE TABLE energy_efficiency_projects (name TEXT, capacity INTEGER); INSERT INTO energy_efficiency_projects (name, capacity) VALUES ('Project A', 200), ('Project B', 900); \n[/INST]\nSELECT MAX(capacity) FROM energy_efficiency_projects;\nThis query calculates the maximum capacity of any energy efficiency project. It does this by selecting the maximum value of the 'capacity' column in the 'energy_efficiency_projects' table.</s>"}
{"text": "<s>[INST] \nList the total pro-bono hours for each attorney in the 'probono_billing' table?\nCREATE TABLE probono_billing (attorney_id INT, client_id INT, hours FLOAT); INSERT INTO probono_billing (attorney_id, client_id, hours) VALUES (4, 104, 15), (5, 105, 20), (6, 106, 18); \n[/INST]\nSELECT attorney_id, SUM(hours) FROM probono_billing GROUP BY attorney_id;\nThe SQL query calculates the total pro-bono hours for each attorney by using the SUM function to calculate total hours for each attorney and the GROUP BY clause to group the results by attorney.</s>"}
{"text": "<s>[INST] \nWhat was the daily average number of posts about vegan recipes between January 1, 2022 and December 31, 2022?\nCREATE TABLE posts (id INT, user_id INT, datetime DATETIME, content VARCHAR(255)); INSERT INTO posts (id, user_id, datetime, content) VALUES (1, 123, '2022-01-01 12:00:00', 'Tried a new vegan recipe today!'), (2, 456, '2022-12-31 23:59:59', 'Sharing my favorite vegan recipe of the year.'); \n[/INST]\nSELECT AVG(count) as avg_daily_posts FROM (SELECT DATE(datetime) as date, COUNT(*) as count FROM posts WHERE content LIKE '%vegan recipe%' AND datetime BETWEEN '2022-01-01' AND '2022-12-31' GROUP BY date) as daily_posts;\nThis query calculates the average number of daily posts about vegan recipes between January 1, 2022 and December 31, 2022.</s>"}
{"text": "<s>[INST] \nDisplay the number of shared bikes and public transportation trips for each city out of total transportation\nCREATE TABLE city_transportation (city VARCHAR(50), shared_bikes INT, public_transportation INT, total_transportation INT); INSERT INTO city_transportation (city, shared_bikes, public_transportation, total_transportation) VALUES ('New York', 900, 550000, 559000), ('Los Angeles', 700, 320000, 327000), ('Chicago', 800, 410000, 418000), ('San Francisco', 1000, 450000, 451000); \n[/INST]\nSELECT city, (shared_bikes / total_transportation) * 100 as percentage_shared_bikes, (public_transportation / total_transportation) * 100 as percentage_public_transportation FROM city_transportation;\nThe SQL query calculates the percentage of shared bikes and public transportation trips for each city out of total transportation.</s>"}
{"text": "<s>[INST] \nWhat is the total revenue of museums in South Asia in 2023?\nCREATE TABLE MuseumRevenue (id INT, region VARCHAR(20), year INT, revenue FLOAT); INSERT INTO MuseumRevenue (id, region, year, revenue) VALUES (21, 'South Asia', 2023, 100000); INSERT INTO MuseumRevenue (id, region, year, revenue) VALUES (22, 'South Asia', 2023, 150000); \n[/INST]\nSELECT SUM(revenue) FROM MuseumRevenue WHERE region = 'South Asia' AND year = 2023;\nThis query calculates the sum of the 'revenue' column for records where the 'region' is 'South Asia' and the 'year' is 2023.</s>"}
{"text": "<s>[INST] \nWho are the top 3 brands using organic cotton?\nCREATE TABLE Brands (brand_id INT, brand_name VARCHAR(50)); CREATE TABLE Brand_Materials (brand_id INT, material_id INT, quantity INT); CREATE TABLE Materials (material_id INT, material_name VARCHAR(50)); INSERT INTO Brands (brand_id, brand_name) VALUES (1, 'EcoFabric'), (2, 'GreenThreads'), (3, 'SustainableStyle'); INSERT INTO Materials (material_id, material_name) VALUES (1, 'Organic Cotton'), (2, 'Recycled Polyester'); INSERT INTO Brand_Materials (brand_id, material_id, quantity) VALUES (1, 1, 600), (1, 2, 300), (2, 1, 800), (2, 2, 700), (3, 1, 400), (3, 2, 500); \n[/INST]\nSELECT brand_name, SUM(quantity) as total_quantity FROM Brands b INNER JOIN Brand_Materials bm ON b.brand_id = bm.brand_id INNER JOIN Materials m ON bm.material_id = m.material_id WHERE m.material_name = 'Organic Cotton' GROUP BY brand_name ORDER BY total_quantity DESC LIMIT 3;\nThis SQL query lists the top 3 brands using organic cotton by performing INNER JOINs on Brands, Brand_Materials, and Materials tables, filtering material_name as 'Organic Cotton', then grouping by brand_name and ordering in descending order based on the SUM of quantity and limiting the result to 3.</s>"}
{"text": "<s>[INST] \nAdd a new record to the forestry_practices table for 'Reduced Impact Logging' in 'North America'\nCREATE TABLE forestry_practices (id INT PRIMARY KEY, practice TEXT, region TEXT); \n[/INST]\nINSERT INTO forestry_practices (id, practice, region) VALUES (1, 'Reduced Impact Logging', 'North America');\n* The SQL query creates a new record in the forestry_practices table for 'Reduced Impact Logging' in 'North America'. The INSERT INTO statement is used to add the new data to the table.* The id field is automatically generated by the database.</s>"}
{"text": "<s>[INST] \nWhat was the average revenue per attendee for events with a ticket price above $75?\nCREATE TABLE Events (EventID int, EventName varchar(50), Attendance int, TicketPrice numeric); INSERT INTO Events VALUES (1, 'Art Symposium', 300, 100), (2, 'Music Festival', 500, 100), (3, 'Theater Performance', 150, 100); \n[/INST]\nSELECT AVG(TicketPrice) FROM Events WHERE TicketPrice > 75;\nCalculate the average revenue per attendee for events with a ticket price above $75.</s>"}
{"text": "<s>[INST] \nWhat is the minimum number of pharmacotherapy sessions attended by patients with depression in France?\nCREATE TABLE pharmacotherapy (pharmacotherapy_id INT, patient_id INT, condition VARCHAR(50), country VARCHAR(50), num_sessions INT); INSERT INTO pharmacotherapy (pharmacotherapy_id, patient_id, condition, country, num_sessions) VALUES (1, 15, 'Depression', 'France', 4), (2, 16, 'Depression', 'France', 6), (3, 17, 'Depression', 'France', 5); \n[/INST]\nSELECT MIN(num_sessions) FROM pharmacotherapy WHERE country = 'France' AND condition = 'Depression';\nThis query finds the minimum number of pharmacotherapy sessions attended by patients with depression in France by using MIN (minimum) to find the lowest value in the 'num_sessions' column, filtered by 'France' and 'Depression' values in the 'country' and 'condition' columns.</s>"}
{"text": "<s>[INST] \nWhat are the most popular mobile devices used by prepaid customers in the state of New York?\nCREATE TABLE mobile_devices (device_id INT, device_name VARCHAR(50), mobile_services INT, state VARCHAR(20)); \n[/INST]\nSELECT device_name FROM mobile_devices WHERE mobile_services = (SELECT mobile_services FROM mobile_customers WHERE plan_type = 'prepaid' AND state = 'New York' LIMIT 1) AND state = 'New York' GROUP BY device_name ORDER BY COUNT(*) DESC;\nWe first identify the most popular mobile service among prepaid customers in New York by selecting the mobile_services column from the mobile_customers table, filtering for rows with plan_type 'prepaid' and state 'New York', and limiting the result to 1 row. We then use this value to filter the mobile_devices table for rows with the matching mobile_services value and the state 'New York'. Finally, we group by device_name, count the number of occurrences for each device, and order by this count in descending order to find the most popular mobile devices.</s>"}
{"text": "<s>[INST] \nWhat is the total number of OTA bookings in 'Europe' in the last year?\nCREATE TABLE ota_bookings (id INT, hotel_id INT, country TEXT, booking_date DATE); INSERT INTO ota_bookings (id, hotel_id, country, booking_date) VALUES (1, 1, 'France', '2021-01-02'), (2, 2, 'Germany', '2021-01-05'), (3, 3, 'Italy', '2021-01-07'), (4, 4, 'Spain', '2022-01-01'), (5, 5, 'France', '2022-01-03'); \n[/INST]\nSELECT COUNT(*) FROM ota_bookings WHERE country LIKE 'Europe%' AND booking_date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR);\nThis query calculates the total number of OTA bookings in Europe in the last year. It does so by filtering the ota_bookings table for rows where the country starts with 'Europe' and the booking_date is within the last year, then counting the number of rows.</s>"}
{"text": "<s>[INST] \nWhat is the total donation amount by cause in H1 2023?\nCREATE TABLE donations (id INT, donor VARCHAR(50), cause VARCHAR(50), amount DECIMAL(10, 2), donation_date DATE); INSERT INTO donations (id, donor, cause, amount, donation_date) VALUES (1, 'Sophia Garcia', 'Arts & Culture', 250, '2023-02-14'), (2, 'Ali Hussein', 'Education', 500, '2023-03-20'), (3, 'Leila Kim', 'Health', 300, '2023-01-05'); \n[/INST]\nSELECT cause, SUM(amount) as total_donation FROM donations WHERE donation_date BETWEEN '2023-01-01' AND '2023-06-30' GROUP BY cause;\nThe SQL query calculates the total donation amount by cause in H1 2023. It first filters the donations table for records within the specified date range using the WHERE clause. Then, it groups the records by cause and calculates the sum of the donation amounts for each group using the SUM function and GROUP BY clause.</s>"}
{"text": "<s>[INST] \nDetermine the average population size of mammals in wildlife preserves.\nCREATE TABLE wildlife_preserves (id INT, name VARCHAR(255), country VARCHAR(255), area_size FLOAT); \n[/INST]\nSELECT AVG(population_size) as avg_mammal_population FROM animal_population WHERE animal_type = 'Mammal' AND habitat IN (SELECT name FROM wildlife_preserves);\nCalculate the average population size of mammals in wildlife preserves by filtering the animal_population table for mammal type and habitat names present in the wildlife_preserves table. Then, find the average population size.</s>"}
{"text": "<s>[INST] \nWhat are the top 2 destinations with the highest number of sustainable tourism practices?\nCREATE TABLE sustainability_practices (destination VARCHAR(50), sustainable_practice INT); INSERT INTO sustainability_practices (destination, sustainable_practice) VALUES ('New Zealand', 12), ('Norway', 15), ('New Zealand', 13), ('Norway', 14); \n[/INST]\nSELECT destination, SUM(sustainable_practice) as total_sustainable_practices FROM sustainability_practices GROUP BY destination ORDER BY total_sustainable_practices DESC LIMIT 2;\nThe SQL query calculates the sum of sustainable practices for each destination, groups the results by destination, and orders by the total number of sustainable practices in descending order, limiting the results to 2.</s>"}
{"text": "<s>[INST] \nHow many donors from each country donated in 2022?\nCREATE TABLE donors (donor_id INT, donation_date DATE, donation_amount DECIMAL(10, 2), country VARCHAR(50)); INSERT INTO donors VALUES (1, '2022-01-01', 50.00, 'USA'), (2, '2022-01-15', 100.00, 'Canada'), (3, '2022-03-05', 200.00, 'Mexico'); \n[/INST]\nSELECT country, COUNT(DISTINCT donor_id) FROM donors WHERE donation_date BETWEEN '2022-01-01' AND '2022-12-31' GROUP BY country;\nThis query returns the number of unique donors from each country who donated in 2022. It filters the donors table by donation_date and groups the results by country, counting the number of distinct donor_ids for each country.</s>"}
{"text": "<s>[INST] \nIdentify the project with the highest cost in 'Transportation' category that was completed in or before 2019.\nCREATE TABLE Projects (id INT, name VARCHAR(50), category VARCHAR(50), cost FLOAT, year_started INT, year_completed INT, status VARCHAR(20)); INSERT INTO Projects (id, name, category, cost, year_started, year_completed, status) VALUES (1, 'Dam Reconstruction', 'Water Supply', 500000, 2018, 2020, 'Completed'), (2, 'Wastewater Treatment', 'Waste Management', 600000, 2019, 2020, 'Completed'), (3, 'Road Pavement', 'Transportation', 700000, 2018, 2019, 'Completed'), (4, 'Bridge Construction', 'Transportation', 800000, 2019, 2020, 'Completed'), (5, 'Tunnel Construction', 'Transportation', 900000, 2020, 2022, 'In Progress'); \n[/INST]\nSELECT * FROM (SELECT *, ROW_NUMBER() OVER (PARTITION BY category ORDER BY cost DESC) rn FROM Projects WHERE category = 'Transportation' AND (year_completed IS NULL OR year_completed <= 2019)) t WHERE rn = 1;\nThe SQL query identifies the project with the highest cost in the 'Transportation' category that was completed in or before 2019 by using a window function (ROW_NUMBER) to rank projects within the 'Transportation' category by 'cost' in descending order, then filtering the results to only show the top project where 'year_completed' is either null or less than or equal to 2019.</s>"}
{"text": "<s>[INST] \nWhat is the total production cost of sustainable materials in Africa in the last quarter?\nCREATE TABLE material_production (material_id INT, material_name VARCHAR(50), production_date DATE, production_cost DECIMAL(10,2)); INSERT INTO material_production (material_id, material_name, production_date, production_cost) VALUES (1, 'Organic Cotton', '2021-08-05', 500.00), (2, 'Recycled Polyester', '2021-07-10', 700.00), (3, 'Hemp', '2021-06-20', 600.00); \n[/INST]\nSELECT SUM(production_cost) FROM material_production WHERE material_name IN ('Organic Cotton', 'Recycled Polyester', 'Hemp') AND production_date BETWEEN DATE_SUB(CURDATE(), INTERVAL 3 MONTH) AND CURDATE();\nThe SQL query calculates the total production cost of sustainable materials 'Organic Cotton', 'Recycled Polyester', and 'Hemp' in Africa in the last quarter by using the SUM function, the BETWEEN operator, and the DATE_SUB function.</s>"}
{"text": "<s>[INST] \nWhat is the total number of units in green-certified buildings?\nCREATE TABLE green_buildings (building_id INT, num_units INT, is_green_certified BOOLEAN); INSERT INTO green_buildings (building_id, num_units, is_green_certified) VALUES (1, 20, true), (2, 30, false), (3, 40, true), (4, 50, true), (5, 60, false); \n[/INST]\nSELECT SUM(num_units) FROM green_buildings WHERE is_green_certified = true;\nThis query calculates the total number of units in green-certified buildings. It uses the SUM function to find the sum of the num_units column for rows where the is_green_certified column is true.</s>"}
{"text": "<s>[INST] \nAdd a column to 'species'\nCREATE TABLE species (id INT PRIMARY KEY, name VARCHAR(255), population INT, conservation_status VARCHAR(255)); \n[/INST]\nALTER TABLE species ADD COLUMN last_sighting DATE;\n1. This statement adds a new column called 'last_sighting' with a data type of 'DATE' to the 'species' table. 2. The new column is added after the existing columns.</s>"}
{"text": "<s>[INST] \nWhat is the total number of orders for the 'Lunch' meal period?\nCREATE TABLE orders (id INT, meal_period VARCHAR(255), order_date DATETIME); INSERT INTO orders (id, meal_period, order_date) VALUES (1, 'Breakfast', '2022-01-01 08:00:00'), (2, 'Lunch', '2022-01-01 12:00:00'), (3, 'Dinner', '2022-01-01 18:00:00'); \n[/INST]\nSELECT COUNT(*) FROM orders WHERE meal_period = 'Lunch';\nThis query retrieves the total number of orders for the 'Lunch' meal period by counting the number of rows in the orders table where the meal_period is 'Lunch'.</s>"}
{"text": "<s>[INST] \nWhat was the average donation amount for recurring donors to human rights nonprofits in Latin America in 2020?\nCREATE TABLE donors (id INT, donor_type VARCHAR(255), gender VARCHAR(10), recurring BOOLEAN); INSERT INTO donors (id, donor_type, gender, recurring) VALUES (1, 'Individual', 'Female', true), (2, 'Corporation', 'N/A', false); CREATE TABLE donations (id INT, donation_amount DECIMAL(10, 2), donation_date DATE, donor_id INT, nonprofit_focus VARCHAR(255), nonprofit_region VARCHAR(255)); INSERT INTO donations (id, donation_amount, donation_date, donor_id, nonprofit_focus, nonprofit_region) VALUES (1, 100, '2020-01-01', 1, 'Human Rights', 'Latin America'), (2, 200, '2020-02-01', 1, 'Human Rights', 'Latin America'); \n[/INST]\nSELECT AVG(donation_amount) FROM donations d JOIN donors don ON d.donor_id = don.id WHERE don.recurring = true AND don.donor_type = 'Individual' AND d.nonprofit_focus = 'Human Rights' AND d.nonprofit_region = 'Latin America' AND EXTRACT(YEAR FROM donation_date) = 2020;\nThis query calculates the average donation amount for recurring individual donors to human rights nonprofits in Latin America during 2020 by joining the donors and donations tables, filtering the required data, and then calculating the average donation_amount.</s>"}
{"text": "<s>[INST] \nShow the total revenue for each sport from ticket sales and merchandise for the last financial year.\nCREATE TABLE TicketSales (TicketID INT, EventType VARCHAR(10), Revenue DECIMAL(10,2)); CREATE TABLE MerchandiseSales (MerchandiseID INT, ProductType VARCHAR(10), Revenue DECIMAL(10,2)); \n[/INST]\nSELECT EventType, SUM(Revenue) FROM TicketSales WHERE EventDate >= DATEADD(YEAR, -1, GETDATE()) GROUP BY EventType UNION ALL SELECT ProductType, SUM(Revenue) FROM MerchandiseSales WHERE SaleDate >= DATEADD(YEAR, -1, GETDATE()) GROUP BY ProductType;\nThis query uses the UNION ALL operator to combine the results of two separate queries that calculate the total revenue for ticket sales and merchandise sales for the last financial year. The queries use the WHERE clause to filter the data based on the date of the sales.</s>"}
{"text": "<s>[INST] \nWhat was the average funding amount for companies founded by women in the US?\nCREATE TABLE company (id INT, name TEXT, country TEXT, founding_date DATE, founder_gender TEXT); INSERT INTO company (id, name, country, founding_date, founder_gender) VALUES (1, 'Acme Inc', 'USA', '2010-01-01', 'Female'); INSERT INTO company (id, name, country, founding_date, founder_gender) VALUES (2, 'Beta Corp', 'USA', '2015-01-01', 'Male'); \n[/INST]\nSELECT AVG(funding_amount) FROM (SELECT funding_amount FROM funding WHERE company_id IN (SELECT id FROM company WHERE founder_gender = 'Female' AND country = 'USA')) AS subquery;\nFirst, we create a subquery to select the funding_amount for companies founded by women in the USA. Then, we calculate the average of the funding_amount from the subquery.</s>"}
{"text": "<s>[INST] \nWhat is the sequence of case events for each case, ordered by their timestamp?\nCREATE TABLE case_events (id INT, case_id INT, event_type VARCHAR(255), timestamp TIMESTAMP); INSERT INTO case_events (id, case_id, event_type, timestamp) VALUES (1, 1, 'Filing', '2022-01-01 10:00:00'); INSERT INTO case_events (id, case_id, event_type, timestamp) VALUES (2, 1, 'Hearing', '2022-01-02 14:00:00'); \n[/INST]\nSELECT case_id, event_type, timestamp, ROW_NUMBER() OVER(PARTITION BY case_id ORDER BY timestamp) as sequence FROM case_events;\nThis query partitions the data by case ID and orders it by timestamp. For each partition, it assigns a sequence number starting from 1.</s>"}
{"text": "<s>[INST] \nWhat was the total revenue for the state of New York in the third quarter of 2022?\nCREATE TABLE sales (id INT, state VARCHAR(50), month VARCHAR(50), revenue FLOAT); INSERT INTO sales (id, state, month, revenue) VALUES (1, 'New York', 'July', 50000.0), (2, 'New York', 'August', 60000.0), (3, 'New York', 'September', 70000.0); \n[/INST]\nSELECT SUM(revenue) FROM sales WHERE state = 'New York' AND (month = 'July' OR month = 'August' OR month = 'September');\nThis query calculates the total revenue for the state of New York in the third quarter of 2022 by summing the revenue column where the state is New York and the month is July, August, or September.</s>"}
{"text": "<s>[INST] \nWhich hotels have the highest virtual tour engagement in Asia?\nCREATE TABLE virtual_tours (hotel_id INT, hotel_name VARCHAR(255), region VARCHAR(255), views INT); \n[/INST]\nSELECT hotel_id, hotel_name, MAX(views) FROM virtual_tours WHERE region = 'Asia' GROUP BY hotel_id, hotel_name;\nThe SQL query finds the hotels with the highest virtual tour engagement in Asia by filtering the 'virtual_tours' table for the 'Asia' region and finding the MAX 'views'.</s>"}
{"text": "<s>[INST] \nList the names and Shariah-compliant loan amounts for customers who have received Shariah-compliant loans in February 2021.\nCREATE TABLE shariah_compliant_loans (loan_id INT, customer_id INT, amount DECIMAL(10, 2), issue_date DATE); INSERT INTO shariah_compliant_loans (loan_id, customer_id, amount, issue_date) VALUES (3, 106, 5500.00, '2021-02-15'), (4, 107, 6500.00, '2021-02-28'); \n[/INST]\nSELECT name, amount FROM customers c INNER JOIN shariah_compliant_loans s ON c.customer_id = s.customer_id WHERE MONTH(issue_date) = 2 AND YEAR(issue_date) = 2021;\nThis SQL query lists the names and Shariah-compliant loan amounts for customers who have received Shariah-compliant loans in February 2021 by joining the 'customers' table with the 'shariah_compliant_loans' table on 'customer_id' and filtering for loans issued in February 2021.</s>"}
{"text": "<s>[INST] \nUpdate the environmental impact of 'Methyl Ethyl Ketone' to 2.8 in the environmental_impact_table\nCREATE TABLE environmental_impact_table (record_id INT, chemical_id INT, environmental_impact_float); \n[/INST]\nUPDATE environmental_impact_table SET environmental_impact_float = 2.8 WHERE chemical_id = 2;\nThis query updates the environmental_impact_float of 'Methyl Ethyl Ketone' (with chemical_id of 2) to 2.8 in the environmental_impact_table.</s>"}
{"text": "<s>[INST] \nList the countries that had more than 5000 visitors in 2021.\nCREATE TABLE CountryData (Country VARCHAR(20), Year INT, Visitors INT); INSERT INTO CountryData (Country, Year, Visitors) VALUES ('France', 2021, 6000), ('Spain', 2021, 4000), ('Germany', 2021, 7000), ('France', 2020, 5000); \n[/INST]\nSELECT Country FROM CountryData WHERE Year = 2021 AND Visitors > 5000;\nThis query lists the countries that had more than 5000 visitors in 2021 by filtering the CountryData table by year and visitors.</s>"}
{"text": "<s>[INST] \nIdentify the number of 'Organic Farms' and 'Conventional Farms' in 'Amazon Rainforest'?\nCREATE TABLE FarmTypes (FarmTypeID INT, FarmType TEXT); INSERT INTO FarmTypes (FarmTypeID, FarmType) VALUES (1, 'Organic Farm'); INSERT INTO FarmTypes (FarmTypeID, FarmType) VALUES (2, 'Conventional Farm'); CREATE TABLE Farms (FarmID INT, FarmTypeID INT, Location TEXT); INSERT INTO Farms (FarmID, FarmTypeID, Location) VALUES (1, 1, 'Amazon Rainforest'); \n[/INST]\nSELECT FarmTypes.FarmType, COUNT(*) as Count FROM Farms INNER JOIN FarmTypes ON Farms.FarmTypeID = FarmTypes.FarmTypeID WHERE Farms.Location = 'Amazon Rainforest' GROUP BY FarmTypes.FarmType;\nThe SQL query performs an inner join on Farms and FarmTypes tables, filters for 'Amazon Rainforest' location, then calculates the number of organic and conventional farms using the COUNT function and groups by farm type.</s>"}
{"text": "<s>[INST] \nWhat is the minimum cost of projects in the water division?\nCREATE TABLE Projects (id INT, division VARCHAR(10)); INSERT INTO Projects (id, division) VALUES (1, 'water'), (2, 'transport'), (3, 'energy'); CREATE TABLE WaterProjects (id INT, project_id INT, cost DECIMAL(10,2)); INSERT INTO WaterProjects (id, project_id, cost) VALUES (1, 1, 500000), (2, 1, 550000), (3, 2, 600000); \n[/INST]\nSELECT MIN(w.cost) FROM WaterProjects w JOIN Projects p ON w.project_id = p.id WHERE p.division = 'water';\nThis query calculates the minimum cost of projects in the water division. It first joins the WaterProjects table with the Projects table based on the project_id. Then, it filters the records where the division is 'water'. Finally, it calculates the minimum cost of the projects.</s>"}
{"text": "<s>[INST] \nHow many bridges are made of concrete and steel?\nCREATE TABLE bridges (id INT PRIMARY KEY, name VARCHAR(255), length FLOAT, material VARCHAR(255), built_year INT); INSERT INTO bridges (id, name, length, material, built_year) VALUES (1, 'BridgeX', 300.5, 'steel', 2000), (2, 'BridgeY', 450.7, 'concrete', 1965), (3, 'BridgeZ', 120.3, 'steel', 1990); \n[/INST]\nSELECT COUNT(*) as bridge_count FROM bridges WHERE material IN ('concrete', 'steel');\nThe SQL query counts the number of bridges grouped by material, and filters the results to only show groups with 'concrete' and 'steel' materials. It uses the IN clause to apply the filter on the material column.</s>"}
{"text": "<s>[INST] \nWhich countries have launched satellites that are still active, and what is the total quantity of materials used in manufacturing those satellites?\nCREATE TABLE Manufacturing (ManufacturingID INT PRIMARY KEY, SatelliteID INT, MaterialName VARCHAR(50), Quantity INT); INSERT INTO Manufacturing (ManufacturingID, SatelliteID, MaterialName, Quantity) VALUES (1, 1, 'Titanium', 500); INSERT INTO Manufacturing (ManufacturingID, SatelliteID, MaterialName, Quantity) VALUES (2, 2, 'Aluminum', 300); \n[/INST]\nSELECT C.Country, SUM(M.Quantity) FROM Satellites S INNER JOIN Countries C ON S.Country = C.CountryCode INNER JOIN Manufacturing M ON S.SatelliteID = M.SatelliteID WHERE S.Status = 'Active' GROUP BY C.Country;\nJoining the Satellites table with the Countries table on the Country field and the Manufacturing table on the SatelliteID field, and filtering satellites that are still active and summing the quantity of materials used in manufacturing those satellites.</s>"}
{"text": "<s>[INST] \nUpdate the climate_finance table to reflect a new climate finance commitment of $10 million for a project in Fiji.\nCREATE TABLE climate_finance (id INT, country VARCHAR(50), amount FLOAT); \n[/INST]\nUPDATE climate_finance SET amount = amount + 10000000.00 WHERE country = 'Fiji';\nThe SQL query increases the amount column in the climate_finance table by $10 million for the row where the country is Fiji.</s>"}
{"text": "<s>[INST] \nCreate a view to display average response time by response type\nCREATE TABLE emergency_response (response_type VARCHAR(255), response_time TIME, location VARCHAR(255)); \n[/INST]\nCREATE VIEW avg_response_time AS SELECT response_type, AVG(TIME_TO_SEC(response_time))/60 as avg_response_time FROM emergency_response GROUP BY response_type;\nThis query creates a view named 'avg_response_time' that displays the average response time by response type in the 'emergency_response' table.</s>"}
{"text": "<s>[INST] \nWhat is the total revenue generated from online sales in the year 2022?\nCREATE TABLE sales (sale_id INT, sale_date DATE, sale_channel VARCHAR(10), revenue DECIMAL(10,2)); \n[/INST]\nSELECT SUM(revenue) FROM sales WHERE sale_channel = 'online' AND YEAR(sale_date) = 2022;\nThis query calculates the total revenue from online sales in the year 2022 by summing the revenue column in the sales table where the sale channel is 'online' and the sale date is in 2022.</s>"}
{"text": "<s>[INST] \nWhat is the average donation amount?\nCREATE TABLE Donors (DonorID INT, Name TEXT, DonationAmount DECIMAL); \n[/INST]\nSELECT AVG(DonationAmount) FROM Donors;\nThis SQL query calculates the average donation amount by finding the mean of the DonationAmount column in the Donors table.</s>"}
{"text": "<s>[INST] \nList countries and their corresponding populations for companies in the 'finance' sector.\nCREATE TABLE companies (id INT, sector VARCHAR(20), country VARCHAR(30)); INSERT INTO companies (id, sector, country) VALUES (1, 'technology', 'USA'), (2, 'finance', 'UK'), (3, 'technology', 'Canada'), (4, 'healthcare', 'Germany'); \n[/INST]\nSELECT DISTINCT country FROM companies WHERE sector = 'finance';\nObtain a distinct list of countries for companies in the 'finance' sector by selecting unique country values where the sector is 'finance'.</s>"}
{"text": "<s>[INST] \nWhat was the total revenue for 'Dance' concerts in Q2 2021?\nCREATE TABLE events (event_id INT, genre VARCHAR(20), revenue FLOAT, event_date DATE); INSERT INTO events (event_id, genre, revenue, event_date) VALUES (1, 'Dance', 2000, '2021-04-10'); INSERT INTO events (event_id, genre, revenue, event_date) VALUES (2, 'Dance', 3000, '2021-06-15'); \n[/INST]\nSELECT SUM(revenue) FROM events WHERE genre = 'Dance' AND event_date BETWEEN '2021-04-01' AND '2021-06-30';\nThis query calculates the total revenue for 'Dance' concerts in Q2 2021 by summing the revenue from all events with a genre of 'Dance' and event dates between '2021-04-01' and '2021-06-30'.</s>"}
{"text": "<s>[INST] \nWhat is the total revenue for mobile and broadband plans combined in each region?\nCREATE TABLE mobile_plans (id INT, name VARCHAR(255), type VARCHAR(255), price DECIMAL(10,2)); CREATE TABLE broadband_plans (id INT, name VARCHAR(255), type VARCHAR(255), price DECIMAL(10,2)); CREATE TABLE subscribers (id INT, name VARCHAR(255), plan_id INT, region VARCHAR(255)); CREATE TABLE regions (id INT, name VARCHAR(255)); \n[/INST]\nSELECT regions.name AS region, SUM(mobile_plans.price + broadband_plans.price) FROM subscribers JOIN mobile_plans ON subscribers.plan_id = mobile_plans.id JOIN broadband_plans ON subscribers.plan_id = broadband_plans.id JOIN regions ON subscribers.region = regions.id GROUP BY regions.name;\nThis query retrieves the total revenue for mobile and broadband plans combined in each region by performing a join on the \"subscribers\" table, \"mobile_plans\" table, and \"broadband_plans\" table. It then groups the results by the \"region\" column and calculates the total revenue by summing the \"price\" columns for both mobile and broadband plans.</s>"}
{"text": "<s>[INST] \nWhat is the total data usage for all customers?\nCREATE TABLE total_usage (id INT, name VARCHAR(50), data_usage FLOAT); INSERT INTO total_usage (id, name, data_usage) VALUES (1, 'John Doe', 15.0); \n[/INST]\nSELECT SUM(data_usage) FROM total_usage;\nThis SQL query calculates the total data usage for all customers by selecting all data_usage values and then finding the sum of those values.</s>"}
{"text": "<s>[INST] \nWhat is the name of the heritage site added in 2003, and the name of the one added in 2008, in North America?\nCREATE TABLE HeritageSites (SiteName VARCHAR(255), Country VARCHAR(255), YearAdded INT); INSERT INTO HeritageSites (SiteName, Country, YearAdded) VALUES ('Statue of Liberty', 'United States', 1984), ('Yellowstone National Park', 'United States', 1978), ('Independence Hall', 'United States', 1979), ('Grand Canyon National Park', 'United States', 1979), ('Everglades National Park', 'United States', 1979); \n[/INST]\nSELECT SiteName FROM HeritageSites WHERE Country = 'North America' AND YearAdded IN (2003, 2008);\nFirst, filter the records by country and year added. Then, retrieve the SiteName.</s>"}
{"text": "<s>[INST] \nWhat is the sales ratio of ethical material types in the UK to those in Australia?\nCREATE TABLE materials (id INT, country VARCHAR(255), type VARCHAR(255), sales FLOAT, profits FLOAT); INSERT INTO materials (id, country, type, sales, profits) VALUES (1, 'UK', 'Organic Cotton', 500, 250), (2, 'Australia', 'Hemp', 600, 360), (3, 'UK', 'Recycled Polyester', 700, 350), (4, 'Australia', 'Organic Cotton', 800, 400); \n[/INST]\nSELECT a.type, a.sales / b.sales as sales_ratio FROM materials a JOIN materials b ON a.type = b.type WHERE a.country = 'UK' AND b.country = 'Australia';\nThis SQL query calculates the sales ratio of ethical material types in the UK to those in Australia by joining the materials table to itself on the type column, filtering for rows where the country column is equal to 'UK' and 'Australia', and calculating the sales ratio using the sales columns and dividing the sales for the UK by Australia.</s>"}
{"text": "<s>[INST] \nWhat is the total production figure for all wells located in the Caspian Sea?\nCREATE TABLE wells (well_id varchar(10), region varchar(20), production_figures int); INSERT INTO wells (well_id, region, production_figures) VALUES ('W005', 'Caspian Sea', 2500), ('W006', 'Caspian Sea', 1500); \n[/INST]\nSELECT SUM(production_figures) FROM wells WHERE region = 'Caspian Sea';\nThis SQL query calculates the total production figure for all wells located in the Caspian Sea by summing up the production_figures of those wells.</s>"}
{"text": "<s>[INST] \nViews by age group for TV Show \"Stranger Things\"?\nCREATE TABLE TV_Views (viewer_id INT, age INT, tv_show VARCHAR(255), view_date DATE); \n[/INST]\nSELECT age, COUNT(*) as views FROM TV_Views WHERE tv_show = 'Stranger Things' GROUP BY age;\nThis query calculates the number of views for the TV show \"Stranger Things\" by age group. It does this by selecting the COUNT function on the viewer_id column, filtering for the tv_show \"Stranger Things\" and grouping the result by age.</s>"}
{"text": "<s>[INST] \nUpdate the mobile_subscribers table to add a new subscriber with name \"Leila Alvarez\" from Sao Paulo, Brazil, mobile_number +551123456789 and subscription_date 2023-03-03\nCREATE TABLE mobile_subscribers (subscriber_id INT, subscriber_name VARCHAR(50), mobile_number VARCHAR(15), subscription_date DATE); \n[/INST]\nUPDATE mobile_subscribers SET subscriber_name = 'Leila Alvarez', mobile_number = '+551123456789', subscription_date = '2023-03-03' WHERE subscriber_id = (SELECT MAX(subscriber_id) FROM mobile_subscribers) + 1;\nThis SQL query updates the mobile_subscribers table to add a new subscriber with name \"Leila Alvarez\" from Sao Paulo, Brazil, mobile_number +551123456789 and subscription_date 2023-03-03. It uses the UPDATE statement along with a subquery to find the maximum subscriber_id and increments it by 1 to insert the new subscriber as the last record in the table.</s>"}
{"text": "<s>[INST] \nWhat is the total quantity of product A produced by the 'Ethical Manufacturing' plant in January 2021?\nCREATE TABLE Plants (id INT, name VARCHAR(255)); INSERT INTO Plants (id, name) VALUES (1, 'Ethical Manufacturing'); CREATE TABLE Products (id INT, name VARCHAR(255), plant_id INT); INSERT INTO Products (id, name, plant_id) VALUES (1, 'Product A', 1); CREATE TABLE Production (product_id INT, quantity INT, production_date DATE); INSERT INTO Production (product_id, quantity, production_date) VALUES (1, 500, '2021-01-01'); \n[/INST]\nSELECT SUM(quantity) FROM Production WHERE product_id = 1 AND production_date BETWEEN '2021-01-01' AND '2021-01-31';\nThis SQL query calculates the total quantity of product A produced by summing up the quantity field in the Production table where the product_id is 1 and the production_date is within January 2021.</s>"}
{"text": "<s>[INST] \nShow vehicle safety testing results for vehicles manufactured in Germany\nCREATE TABLE safety_testing (id INT, vehicle VARCHAR(50), make VARCHAR(50), country VARCHAR(50), score INT); INSERT INTO safety_testing VALUES (1, 'Model X', 'Tesla', 'USA', 90); INSERT INTO safety_testing VALUES (2, 'Model 3', 'Tesla', 'USA', 95); INSERT INTO safety_testing VALUES (3, 'e-Tron', 'Audi', 'Germany', 88); \n[/INST]\nSELECT * FROM safety_testing WHERE country = 'Germany';\nThis SQL query retrieves vehicle safety testing results for vehicles manufactured in Germany by filtering the 'safety_testing' table by the 'Germany' country.</s>"}
{"text": "<s>[INST] \nAnalyze veteran employment by occupation\nCREATE TABLE veteran_occupations (state VARCHAR(2), occupation VARCHAR(50), employed_veterans INT, total_veterans INT); INSERT INTO veteran_occupations (state, occupation, employed_veterans, total_veterans) VALUES ('CA', 'Software Engineer', 1000, 2000); INSERT INTO veteran_occupations (state, occupation, employed_veterans, total_veterans) VALUES ('TX', 'Mechanic', 1500, 3000); \n[/INST]\nSELECT occupation, (employed_veterans/total_veterans) as employment_rate FROM veteran_occupations;\nThis SQL query calculates the employment rate for veterans in each occupation by dividing the employed_veterans by the total_veterans for each row in the veteran_occupations table, grouped by the occupation column.</s>"}
{"text": "<s>[INST] \nWhat is the average price of cotton textiles sourced from Brazil?\nCREATE TABLE TextileSourcing (id INT, material VARCHAR(10), country VARCHAR(10), price DECIMAL(5,2)); INSERT INTO TextileSourcing (id, material, country, price) VALUES (1, 'cotton', 'Brazil', 5.50), (2, 'silk', 'China', 12.00); \n[/INST]\nSELECT AVG(price) FROM TextileSourcing WHERE material = 'cotton' AND country = 'Brazil';\nThis query calculates the average price of cotton textiles sourced from Brazil by filtering the TextileSourcing table with the conditions 'material' equals 'cotton' and 'country' equals 'Brazil', then computing the average of the 'price' column.</s>"}
{"text": "<s>[INST] \nWhat is the total waste generation in grams for the top 2 countries in 2020, ordered by the greatest total amount?\nCREATE TABLE waste_generation (country VARCHAR(50), year INT, waste_generation_grams INT); INSERT INTO waste_generation (country, year, waste_generation_grams) VALUES ('Canada', 2020, 5000000), ('Mexico', 2020, 6000000), ('Brazil', 2020, 7000000); \n[/INST]\nSELECT country, SUM(waste_generation_grams) as total_waste_generation_2020 FROM waste_generation WHERE year = 2020 GROUP BY country ORDER BY total_waste_generation_2020 DESC LIMIT 2;\nThe SQL query calculates the total waste generation for the top 2 countries in 2020 by summing the waste_generation_grams for each country and then groups the results by country. The ORDER BY clause sorts the results by the greatest total amount of waste generated in descending order and the LIMIT clause returns the top 2 results.</s>"}
{"text": "<s>[INST] \nWhat is the maximum salary for male members in the 'Manufacturing_Union'?\nCREATE TABLE Manufacturing_Union (union_member_id INT, gender TEXT, salary FLOAT); INSERT INTO Manufacturing_Union (union_member_id, gender, salary) VALUES (1, 'Male', 45000.00), (2, 'Female', 42000.00), (3, 'Male', 48000.00); \n[/INST]\nSELECT MAX(salary) FROM Manufacturing_Union WHERE gender = 'Male';\nThis query calculates the maximum salary for male members in the 'Manufacturing_Union' by using the MAX function on the 'salary' column, filtered by the 'gender' column with the value 'Male'.</s>"}
{"text": "<s>[INST] \nShow the names of startups that have 'diverse' teams.\nCREATE TABLE diversity (id INT, startup_name VARCHAR(50), team_diversity VARCHAR(10)); \n[/INST]\nSELECT startup_name FROM diversity WHERE team_diversity = 'diverse';\nThis query selects the startup_name column from the diversity table for the rows where the team_diversity is 'diverse'.</s>"}
{"text": "<s>[INST] \nList the financial wellbeing programs in Africa with the lowest average monthly cost.\nCREATE TABLE programs (id INT PRIMARY KEY, program_name VARCHAR(255), region_id INT, is_financial_wellbeing BOOLEAN, monthly_cost DECIMAL(5,2)); CREATE TABLE regions (id INT PRIMARY KEY, name VARCHAR(255), country VARCHAR(255)); CREATE VIEW program_views AS SELECT programs.id, programs.program_name, programs.region_id, programs.is_financial_wellbeing, programs.monthly_cost, regions.country FROM programs INNER JOIN regions ON TRUE; \n[/INST]\nSELECT program_views.program_name, program_views.monthly_cost FROM program_views WHERE program_views.is_financial_wellbeing = TRUE AND regions.country = 'Africa' ORDER BY program_views.monthly_cost ASC LIMIT 1;\nThe query lists the financial wellbeing programs in Africa with the lowest average monthly cost.</s>"}
{"text": "<s>[INST] \nList the temperate forests with more than 1000 square kilometers and timber volume\nCREATE TABLE forests_volume (id INT, type VARCHAR(20), area FLOAT, volume FLOAT); INSERT INTO forests_volume (id, type, area, volume) VALUES (1, 'Temperate', 1500, 1500000); \n[/INST]\nSELECT type FROM forests_volume WHERE area > 1000 AND volume > 1000000;\nThis query lists the temperate forests with more than 1000 square kilometers and timber volume. It does this by selecting the type column from the forests_volume table where the area is greater than 1000 and the volume is greater than 1000000.</s>"}
{"text": "<s>[INST] \nList all the travel advisories issued for Asian countries in the past 6 months.\nCREATE TABLE TravelAdvisories (id INT, country TEXT, issued_date DATE); \n[/INST]\nSELECT * FROM TravelAdvisories WHERE country IN ('Asia', 'Central Asia', 'Southeast Asia', 'East Asia') AND issued_date >= DATE_SUB(CURDATE(), INTERVAL 6 MONTH);\nThis query lists all the travel advisories issued for Asian countries in the past 6 months by filtering the TravelAdvisories table for records with a country in Asia and an issued_date within the past 6 months.</s>"}
{"text": "<s>[INST] \nWhat is the distribution of AI research papers by gender and region?\nCREATE TABLE ResearchPapers (paper_id INT, author_gender VARCHAR(255), research_region VARCHAR(255)); INSERT INTO ResearchPapers (paper_id, author_gender, research_region) VALUES (1, 'Female', 'North America'), (2, 'Male', 'Europe'), (3, 'Non-binary', 'Asia'); \n[/INST]\nSELECT author_gender, research_region, COUNT(*) as paper_count FROM ResearchPapers GROUP BY author_gender, research_region;\nThe query calculates the distribution of AI research papers by gender and region by grouping the records based on the author_gender and research_region columns and computing the count of records for each group.</s>"}
{"text": "<s>[INST] \nWhat is the total number of graduate students enrolled in the 'Computer Science' program?\nCREATE TABLE graduate_enrollment (id INT, student_id INT, program_name VARCHAR(50)); INSERT INTO graduate_enrollment (id, student_id, program_name) VALUES (1, 123, 'Computer Science'), (2, 456, 'Physics'), (3, 789, 'Mathematics'), (4, 111, 'Computer Science'), (5, 222, 'Physics'); \n[/INST]\nSELECT COUNT(*) FROM graduate_enrollment WHERE program_name = 'Computer Science';\nThis query counts the total number of graduate students enrolled in the 'Computer Science' program by filtering the program_name column for 'Computer Science' and then calculating the count of records.</s>"}
{"text": "<s>[INST] \nWhat is the daily sales revenue of recycled products in Italy?\nCREATE TABLE sales (sale_id int, product_id int, sale_date date, revenue decimal(5,2)); CREATE TABLE products (product_id int, product_name varchar(255), is_recycled boolean, country varchar(50)); INSERT INTO sales (sale_id, product_id, sale_date, revenue) VALUES (1, 1, '2022-01-01', 50.00); INSERT INTO products (product_id, product_name, is_recycled, country) VALUES (1, 'Recycled Tote Bag', true, 'Italy'); \n[/INST]\nSELECT sale_date, SUM(revenue) AS daily_revenue FROM sales JOIN products ON sales.product_id = products.product_id WHERE is_recycled = true AND country = 'Italy' GROUP BY sale_date;\nCalculates the daily sales revenue of recycled products in Italy by joining the sales and products table on product_id, filtering for recycled products sold in Italy, and then grouping the results by sale_date.</s>"}
{"text": "<s>[INST] \nHow many machines of type 'CNC' are there in the 'inventory' schema?\nCREATE TABLE inventory.machines (machine_id INT, machine_type VARCHAR(50), quantity INT); INSERT INTO inventory.machines (machine_id, machine_type, quantity) VALUES (1, 'CNC', 10), (2, 'Manual Mill', 5), (3, 'Robot Arm', 8); \n[/INST]\nSELECT SUM(quantity) as total_cnc_machines FROM inventory.machines WHERE machine_type = 'CNC';\nThis query calculates the total number of 'CNC' machines in the 'machines' table by filtering the table to only include records with 'machine_type' equal to 'CNC' and computing the sum of the 'quantity' column.</s>"}
{"text": "<s>[INST] \nFind the total production volume for wells in the Asia-Pacific region in the first quarter of 2022\nCREATE TABLE wells (id INT, region VARCHAR(20), volume INT, date DATE); INSERT INTO wells (id, region, volume, date) VALUES (1, 'Asia-Pacific', 1000, '2022-01-01'); INSERT INTO wells (id, region, volume, date) VALUES (2, 'Asia-Pacific', 2000, '2022-02-01'); INSERT INTO wells (id, region, volume, date) VALUES (3, 'Asia-Pacific', 3000, '2022-03-01'); \n[/INST]\nSELECT SUM(volume) FROM wells WHERE region = 'Asia-Pacific' AND QUARTER(date) = 1 AND YEAR(date) = 2022;\nThis SQL query finds the total production volume for wells in the Asia-Pacific region in the first quarter of 2022 by selecting all rows with a region of 'Asia-Pacific' and a date in the first quarter of 2022, and then summing the volume of those rows.</s>"}
{"text": "<s>[INST] \nWhat is the total number of thefts in San Francisco in 2022?\nCREATE TABLE sf_crime_stats (id INT, crime_type TEXT, crime_date DATE); INSERT INTO sf_crime_stats (id, crime_type, crime_date) VALUES  (1, 'Theft', '2022-01-01'), (2, 'Vandalism', '2022-02-01'), (3, 'Assault', '2022-03-01'); \n[/INST]\nSELECT COUNT(*) FROM sf_crime_stats WHERE crime_type = 'Theft' AND YEAR(crime_date) = 2022;\nThe SQL query counts the total number of thefts in San Francisco in 2022 by selecting rows with a crime_type value of 'Theft' and a crime_date value in 2022, then applying the COUNT function.</s>"}
{"text": "<s>[INST] \nHow many hotels in Sydney, Australia have adopted any form of AI technology?\nCREATE TABLE hotel_tech_adoptions (id INT, hotel_id INT, tech_type TEXT, installed_date DATE); CREATE TABLE hotels (id INT, name TEXT, city TEXT, country TEXT); \n[/INST]\nSELECT COUNT(DISTINCT hta.hotel_id) FROM hotel_tech_adoptions hta INNER JOIN hotels h ON hta.hotel_id = h.id WHERE h.city = 'Sydney' AND h.country = 'Australia';\nThis SQL query calculates the number of hotels in Sydney, Australia that have adopted any form of AI technology. It does this by using the COUNT function on the hotel_id column, filtering the rows by the city and country, and joining the hotel_tech_adoptions table with the hotels table. It then uses the DISTINCT keyword to ensure that each hotel is only counted once.</s>"}
{"text": "<s>[INST] \nList all auto shows with a focus on electric vehicles\nCREATE TABLE auto_shows (id INT, name VARCHAR(50), location VARCHAR(50), focus VARCHAR(50)); INSERT INTO auto_shows (id, name, location, focus) VALUES (1, 'LA Auto Show', 'Los Angeles', 'Electric'), (2, 'Detroit Auto Show', 'Detroit', 'Hybrid'), (3, 'Geneva Motor Show', 'Geneva', 'Luxury'), (4, 'Tokyo Motor Show', 'Tokyo', 'Innovation'); \n[/INST]\nSELECT name, location FROM auto_shows WHERE focus = 'Electric';\nThis query lists all auto shows with a focus on electric vehicles by selecting the name and location columns where the focus is 'Electric'.</s>"}
{"text": "<s>[INST] \nWhat is the adoption rate of electric vehicles by income group?\nCREATE TABLE ev_sales (id INT, make VARCHAR, model VARCHAR, year INT, income_group VARCHAR, sold INT); \n[/INST]\nSELECT income_group, AVG(sold) as adoption_rate FROM ev_sales GROUP BY income_group;\nThis query groups the records in the ev_sales table by the income_group column and calculates the average number of electric vehicles sold for each group, effectively providing the adoption rate of electric vehicles by income group.</s>"}
{"text": "<s>[INST] \nWhat is the revenue difference between 'Expedia' and 'Agoda' in 'Q2 2022'?\nCREATE TABLE otas_q2_2022 (ota TEXT, revenue FLOAT); INSERT INTO otas_q2_2022 (ota, revenue) VALUES ('Expedia', 400000), ('Booking.com', 500000), ('Agoda', 350000); \n[/INST]\nSELECT (e.revenue - a.revenue) AS revenue_diff FROM otas_q2_2022 e, otas_q2_2022 a WHERE e.ota = 'Expedia' AND a.ota = 'Agoda';\nTwo instances of the 'otas_q2_2022' table are created as 'e' (Expedia) and 'a' (Agoda). The revenue difference between 'Expedia' and 'Agoda' is calculated and returned as 'revenue_diff'.</s>"}
{"text": "<s>[INST] \nIncrease the 'funding' for a specific project by 10% in the 'Funding_Allocation' table.\nCREATE TABLE Funding_Allocation (id INT, project VARCHAR(30), funding FLOAT); \n[/INST]\nUPDATE Funding_Allocation SET funding = funding * 1.10 WHERE project = 'Arctic Biodiversity Monitoring';\nThe query increases the 'funding' for the 'Arctic Biodiversity Monitoring' project by 10% in the 'Funding_Allocation' table.</s>"}
{"text": "<s>[INST] \nHow many clients have a financial wellbeing score below 70 and a savings account balance below 5000?\nCREATE TABLE clients (client_id INT, financial_wellbeing_score INT, savings DECIMAL(10, 2)); INSERT INTO clients (client_id, financial_wellbeing_score, savings) VALUES (1, 60, 4000.00), (2, 80, 7000.00), (3, 75, 6000.00), (4, 65, 3000.00); \n[/INST]\nSELECT COUNT(*) FROM clients WHERE financial_wellbeing_score < 70 AND savings < 5000;\nThe SQL query counts the number of clients who have a financial wellbeing score below 70 and a savings account balance below 5000. It filters the clients table by financial wellbeing score and savings balance, returning a count of all rows that meet both criteria.</s>"}
{"text": "<s>[INST] \nHow many broadband subscribers are there in each state?\nCREATE TABLE broadband_subscribers (subscriber_id INT, state VARCHAR(255)); INSERT INTO broadband_subscribers (subscriber_id, state) VALUES (1, 'Texas'), (2, 'California'), (3, 'Texas'), (4, 'Florida'), (5, 'New York'); \n[/INST]\nSELECT state, COUNT(*) FROM broadband_subscribers GROUP BY state;\nThis query lists the number of broadband subscribers in each state. It does so by using the COUNT function to count the number of rows for each unique value in the state column.</s>"}
{"text": "<s>[INST] \nWhat is the average water consumption (in gallons) for each district in New York in the month of May 2021?\nCREATE TABLE districts (id INT, name VARCHAR(255)); INSERT INTO districts (id, name) VALUES (1, 'District1'), (2, 'District2'), (3, 'District3'); CREATE TABLE water_consumption (district_id INT, consumption INT, date DATE); INSERT INTO water_consumption (district_id, consumption, date) VALUES (1, 1000, '2021-05-01'), (1, 1100, '2021-05-02'), (2, 800, '2021-05-01'), (2, 900, '2021-05-02'), (3, 1200, '2021-05-01'), (3, 1300, '2021-05-02'); \n[/INST]\nSELECT district_id, AVG(consumption) as avg_consumption FROM water_consumption WHERE date BETWEEN '2021-05-01' AND '2021-05-31' GROUP BY district_id;\nWe are filtering the water_consumption table for records from May 1 to May 31, 2021 and grouping by district_id, calculating the average consumption for each group.</s>"}
{"text": "<s>[INST] \nWhat is the average mental health score of students in each district, grouped by grade level?\nCREATE TABLE student_mental_health (student_id INT, district_id INT, grade_level INT, mental_health_score INT); \n[/INST]\nSELECT s.grade_level, d.district_name, AVG(s.mental_health_score) FROM student_mental_health s INNER JOIN districts d ON s.district_id = d.district_id GROUP BY s.grade_level, d.district_name;\nThis query joins the student_mental_health table with the districts table on the district_id column. It then groups the results by grade_level and district_name and calculates the average mental_health_score for each group.</s>"}
{"text": "<s>[INST] \nWhat is the total number of digital assets launched by companies based in the United States and Canada?\nCREATE TABLE digital_assets (id INT, name VARCHAR(255), company VARCHAR(255), launch_date DATE, country VARCHAR(255)); INSERT INTO digital_assets (id, name, company, launch_date, country) VALUES (1, 'Asset 1', 'Company A', '2021-01-01', 'USA'), (2, 'Asset 2', 'Company B', '2021-02-15', 'Canada'); \n[/INST]\nSELECT COUNT(*) FROM digital_assets WHERE country IN ('USA', 'Canada');\nCount the number of records in the digital_assets table where the country is either 'USA' or 'Canada'.</s>"}
{"text": "<s>[INST] \nWhat is the average age of musicians from the African continent?\nCREATE TABLE artists (id INT PRIMARY KEY, name VARCHAR(50), ethnicity VARCHAR(20), age INT, genre VARCHAR(30)); INSERT INTO artists (id, name, ethnicity, age, genre) VALUES (1, 'Saraa', 'Mongolian', 35, 'Throat Singing'), (2, 'Kasumu', 'Nigerian', 40, 'Afrobeat'); \n[/INST]\nSELECT AVG(age) FROM artists WHERE ethnicity LIKE 'African%';\nThis query calculates the average age from the 'artists' table for ethnicities starting with 'African'.</s>"}
{"text": "<s>[INST] \nWhat are the total sales for each menu category, broken down by restaurant location?\nCREATE TABLE menu_sales_by_location(location VARCHAR(255), menu_category VARCHAR(255), total_sales DECIMAL(10,2)); INSERT INTO menu_sales_by_location(location, menu_category, total_sales) VALUES('Location 1', 'Appetizers', 2000.00), ('Location 1', 'Entrees', 5000.00), ('Location 1', 'Desserts', 2500.00), ('Location 2', 'Appetizers', 3000.00), ('Location 2', 'Entrees', 7000.00), ('Location 2', 'Desserts', 3500.00); \n[/INST]\nSELECT menu_category, location, SUM(total_sales) FROM menu_sales_by_location GROUP BY menu_category, location;\nThis query sums the total sales for each menu category by location by grouping on the menu_category and location columns and calculating the sum of total_sales.</s>"}
{"text": "<s>[INST] \nDelete the Amur Leopard record from the 'animals' table\nCREATE TABLE animals (id INT PRIMARY KEY, name VARCHAR(255), species VARCHAR(255), population INT); \n[/INST]\nDELETE FROM animals WHERE name = 'Amur Leopard';\nThe record for the Amur Leopard is deleted from the 'animals' table.</s>"}
{"text": "<s>[INST] \nWhat is the total number of defense diplomacy events and their budgets for each year since 2016?\nCREATE TABLE defense_diplomacy (id INT, event_name VARCHAR(50), region VARCHAR(50), year INT, budget INT); \n[/INST]\nSELECT year, COUNT(*), SUM(budget) FROM defense_diplomacy WHERE year >= 2016 GROUP BY year;\nThis query calculates the total number of defense diplomacy events and their budgets for each year since 2016. It does this by selecting the year, COUNT and SUM of the budget column, filtering for events that took place since 2016 and grouping by year.</s>"}
{"text": "<s>[INST] \nWhat is the distribution of weights lifted by age group?\nCREATE TABLE weights (id INT, member_id INT, weight FLOAT); INSERT INTO weights (id, member_id, weight) VALUES (1, 101, 120.5), (2, 102, 150.3), (3, 103, 90.7); CREATE TABLE members (id INT, age INT); INSERT INTO members (id, age) VALUES (101, 28), (102, 35), (103, 45); CREATE TABLE age_groups (id INT, min_age INT, max_age INT); INSERT INTO age_groups (id, min_age, max_age) VALUES (1, 18, 30), (2, 31, 40), (3, 41, 50); \n[/INST]\nSELECT ag.min_age, AVG(weights.weight) as avg_weight, STDDEV(weights.weight) as stddev_weight FROM weights JOIN members ON weights.member_id = members.id JOIN age_groups ag ON members.age BETWEEN ag.min_age AND ag.max_age GROUP BY ag.id;\nThis query joins the weights, members, and age_groups tables, groups the rows by age group, and then calculates the average and standard deviation of the weight for each group.</s>"}
{"text": "<s>[INST] \nCount the number of incidents for each vessel type\nCREATE TABLE VesselTypes (id INT, vessel_type VARCHAR(50)); CREATE TABLE IncidentLog (id INT, vessel_id INT, incident_type VARCHAR(50), time TIMESTAMP); \n[/INST]\nSELECT vt.vessel_type, COUNT(il.id) FROM VesselTypes vt JOIN IncidentLog il ON vt.id = il.vessel_id GROUP BY vt.vessel_type;\nThis query counts the number of incidents for each vessel type. It uses a JOIN clause to combine data from VesselTypes and IncidentLog, then groups the results by vessel_type and calculates the count of incidents.</s>"}
{"text": "<s>[INST] \nWhich countries have the highest and lowest average mental health scores for students in rural areas?\nCREATE TABLE student_mental_health (student_id INT, country VARCHAR(50), location VARCHAR(50), score INT); INSERT INTO student_mental_health (student_id, country, location, score) VALUES (1, 'USA', 'Rural', 75), (2, 'Canada', 'Rural', 80), (3, 'Mexico', 'Rural', 70), (4, 'Brazil', 'Rural', 60); \n[/INST]\nSELECT country, AVG(score) as avg_score FROM student_mental_health WHERE location = 'Rural' GROUP BY country ORDER BY avg_score DESC LIMIT 1;\nThis query calculates the average mental health score for students in rural areas in each country, orders the results in descending order to find the country with the highest average score, and returns the top result. The query is then repeated with the ASC keyword to find the country with the lowest average score.</s>"}
{"text": "<s>[INST] \nWhat is the total capacity of all vessels owned by Blue Whale Shipping?\nCREATE TABLE vessels (id INT, name VARCHAR(50), company VARCHAR(50), capacity INT); INSERT INTO vessels (id, name, company, capacity) VALUES (1, 'MV Horizon', 'Blue Whale Shipping', 12000), (2, 'MV Oceanus', 'Blue Whale Shipping', 15000); \n[/INST]\nSELECT SUM(capacity) FROM vessels WHERE company = 'Blue Whale Shipping';\nThis SQL query calculates the total capacity of vessels owned by Blue Whale Shipping by summing the capacity column, where the company is 'Blue Whale Shipping'.</s>"}
{"text": "<s>[INST] \nWhat is the average price of sustainable products from local suppliers?\nCREATE TABLE suppliers (id INT, name VARCHAR(255), location VARCHAR(255), sustainability_rating FLOAT); INSERT INTO suppliers (id, name, location, sustainability_rating) VALUES (1, 'Supplier C', 'City C, Country C', 4.9); INSERT INTO suppliers (id, name, location, sustainability_rating) VALUES (2, 'Supplier D', 'City D, Country D', 3.5); CREATE TABLE products (id INT, name VARCHAR(255), supplier_id INT, price FLOAT, sustainability_score INT); INSERT INTO products (id, name, supplier_id, price, sustainability_score) VALUES (1, 'Product E', 1, 10.00, 90); INSERT INTO products (id, name, supplier_id, price, sustainability_score) VALUES (2, 'Product F', 2, 12.00, 60); INSERT INTO products (id, name, supplier_id, price, sustainability_score) VALUES (3, 'Product G', 1, 15.00, 85); \n[/INST]\nSELECT AVG(p.price) AS avg_price FROM products p JOIN suppliers s ON p.supplier_id = s.id WHERE s.sustainability_rating > 4.0 AND p.price > 0 AND s.location LIKE 'City%';\nThis query calculates the average price of sustainable products from local suppliers by joining the products and suppliers tables, filtering for sustainable suppliers located in cities, and calculating the average price.</s>"}
{"text": "<s>[INST] \nWhich spacecraft manufacturers have launched missions to Mars?\nCREATE TABLE spacecraft_manufacturers (manufacturer_id INT, name VARCHAR(100)); INSERT INTO spacecraft_manufacturers (manufacturer_id, name) VALUES (1, 'SpaceX'), (2, 'NASA'), (3, 'Blue Origin'); CREATE TABLE space_missions (mission_id INT, spacecraft_manufacturer_id INT, destination VARCHAR(100)); INSERT INTO space_missions (mission_id, spacecraft_manufacturer_id, destination) VALUES (1, 1, 'Mars'), (2, 2, 'Moon'), (3, 3, 'Mars'); \n[/INST]\nSELECT sm.name FROM spacecraft_manufacturers sm INNER JOIN space_missions smm ON sm.manufacturer_id = smm.spacecraft_manufacturer_id WHERE smm.destination = 'Mars';\nThis SQL query joins the spacecraft_manufacturers and space_missions tables on their common column spacecraft_manufacturer_id. It then filters the results to only include missions that have 'Mars' as their destination, and finally returns the names of the manufacturers.</s>"}
{"text": "<s>[INST] \nWhich regions have the least number of digital divide issues?\nCREATE TABLE digital_divide (id INT, region VARCHAR(20), issues INT); INSERT INTO digital_divide (id, region, issues) VALUES (1, 'Africa', 30), (2, 'Asia', 40), (3, 'Europe', 10), (4, 'Americas', 20); \n[/INST]\nSELECT region FROM digital_divide ORDER BY issues LIMIT 1;\nThis SQL query finds the region with the least number of digital divide issues by ordering the regions by issues in ascending order and selecting the first row using the LIMIT 1 clause.</s>"}
{"text": "<s>[INST] \nWhat is the total population of orangutans in all habitats?\nCREATE TABLE habitats (name VARCHAR(255), animal_type VARCHAR(255), population INT); INSERT INTO habitats (name, animal_type, population) VALUES ('borneo', 'orangutan', 200); INSERT INTO habitats (name, animal_type, population) VALUES ('sumatra', 'orangutan', 150); \n[/INST]\nSELECT SUM(population) FROM habitats WHERE animal_type = 'orangutan';\nThis query calculates the total population of orangutans in all habitats by selecting the sum of the population column from the habitats table where the animal_type is 'orangutan'.</s>"}
{"text": "<s>[INST] \nWhat is the total number of inclusion efforts by each disability support program in Canada?\nCREATE TABLE DisabilitySupportPrograms (ProgramID INT, ProgramName VARCHAR(100), CountryID INT); INSERT INTO DisabilitySupportPrograms(ProgramID, ProgramName, CountryID) VALUES (1, 'Autism Speaks', 1), (2, 'Canadian National Institute for the Blind', 2), (3, 'Programa Pro Discapacidad', 3); CREATE TABLE InclusionEfforts (EffortID INT, ProgramID INT, EffortType VARCHAR(100)); INSERT INTO InclusionEfforts(EffortID, ProgramID, EffortType) VALUES (1, 1, 'Awareness Campaign'), (2, 2, 'Accessibility Improvement'), (3, 3, 'Education Program'); \n[/INST]\nSELECT DSP.ProgramName, COUNT(IE.EffortType) as TotalEfforts FROM DisabilitySupportPrograms DSP INNER JOIN InclusionEfforts IE ON DSP.ProgramID = IE.ProgramID WHERE DSP.CountryID = 2 GROUP BY DSP.ProgramName;\nThis query performs an inner join between the DisabilitySupportPrograms and InclusionEfforts tables, using the ProgramID as the common field. It then filters the results to only include efforts for Canada by checking if the CountryID is 2. The query then groups the results by ProgramName and calculates the count of EffortType for each group, which represents the total number of inclusion efforts by each disability support program in Canada.</s>"}
{"text": "<s>[INST] \nWhat is the minimum duration of 'Pilates' workouts in the 'workout_data' table?\nCREATE TABLE workout_data (user_id INT, workout_type VARCHAR(20), duration INT); INSERT INTO workout_data (user_id, workout_type, duration) VALUES (1, 'Running', 30), (1, 'Cycling', 60), (2, 'Yoga', 45), (3, 'Pilates', 50), (1, 'Running', 45), (2, 'Yoga', 60), (3, 'Pilates', 75), (1, 'Running', 75), (2, 'Yoga', 90), (3, 'Pilates', 105); \n[/INST]\nSELECT MIN(duration) as min_duration FROM workout_data WHERE workout_type = 'Pilates';\nThis SQL query calculates the minimum duration of 'Pilates' workouts from the 'workout_data' table, providing the minimum duration of Pilates workouts.</s>"}
{"text": "<s>[INST] \nFind the top 3 wells with the highest oil production in the Permian Basin\nCREATE TABLE if not exists well (well_id INT, well_name TEXT, location TEXT, oil_production FLOAT); INSERT INTO well (well_id, well_name, location, oil_production) VALUES (1, 'Well A', 'Permian Basin', 12345.67), (2, 'Well B', 'Permian Basin', 23456.78), (3, 'Well C', 'Eagle Ford', 34567.89); \n[/INST]\nSELECT well_name, oil_production FROM well WHERE location = 'Permian Basin' ORDER BY oil_production DESC LIMIT 3;\nThis SQL query finds the top 3 wells with the highest oil production in the Permian Basin. It does this by selecting the well_name and oil_production for the wells located in the Permian Basin, ordering the data by oil_production in descending order, and limiting the results to the top 3 records.</s>"}
{"text": "<s>[INST] \nList all drugs that were approved in 2018 and have market access in Canada?\nCREATE TABLE drug_approval_2018 (drug VARCHAR(50), year INT, status VARCHAR(50)); INSERT INTO drug_approval_2018 (drug, year, status) VALUES ('DrugM', 2018, 'Approved'), ('DrugN', 2018, 'Approved'); CREATE TABLE market_access (drug VARCHAR(50), country VARCHAR(50)); INSERT INTO market_access (drug, country) VALUES ('DrugM', 'Canada'), ('DrugO', 'Canada'); \n[/INST]\nSELECT market_access.drug FROM market_access INNER JOIN drug_approval_2018 ON market_access.drug = drug_approval_2018.drug WHERE drug_approval_2018.year = 2018 AND drug_approval_2018.status = 'Approved' AND market_access.country = 'Canada';\nThe SQL query performs an inner join between the market_access and drug_approval_2018 tables on the drug column. It then filters the results based on the year, status, and country for the respective tables. Finally, it selects the drug column from the filtered results.</s>"}
{"text": "<s>[INST] \nHow many broadband customers does each regional office support?\nCREATE TABLE broadband_customers (customer_id INT, region VARCHAR(50)); CREATE TABLE regional_offices (office_id INT, region VARCHAR(50), num_customers INT); INSERT INTO broadband_customers (customer_id, region) VALUES (1, 'Northeast'); INSERT INTO broadband_customers (customer_id, region) VALUES (2, 'Southeast'); INSERT INTO regional_offices (office_id, region, num_customers) VALUES (1, 'Northeast', 0); INSERT INTO regional_offices (office_id, region, num_customers) VALUES (2, 'Southeast', 0); \n[/INST]\nSELECT r.region, COUNT(b.customer_id) FROM broadband_customers b INNER JOIN regional_offices r ON b.region = r.region GROUP BY r.region;\nThe SQL query calculates the number of broadband customers supported by each regional office by performing an inner join on the 'broadband_customers' and 'regional_offices' tables based on the 'region' column, then grouping the results by 'region' and using the COUNT function to count the number of customer IDs in each group.</s>"}
{"text": "<s>[INST] \nWhat is the average price of dishes in each menu category, excluding the cheapest and most expensive dishes?\nCREATE TABLE menu (category VARCHAR(255), price FLOAT); INSERT INTO menu (category, price) VALUES ('Appetizers', 7.99), ('Entrees', 14.99), ('Desserts', 5.99), ('Drinks', 2.99), ('Sides', 1.99); \n[/INST]\nSELECT category, AVG(price) FROM (SELECT category, price FROM menu WHERE price NOT IN (SELECT MIN(price) FROM menu WHERE category = menu.category) AND price NOT IN (SELECT MAX(price) FROM menu WHERE category = menu.category)) AS filtered_menu GROUP BY category;\nThe SQL query uses a subquery to exclude the cheapest and most expensive dishes in each category and then calculates the average price for the remaining dishes in each category.</s>"}
{"text": "<s>[INST] \nWhat's the total number of vegetarian and vegan entrees in the menu?\nCREATE TABLE menu (item_id INT, item_name VARCHAR(50), category VARCHAR(50), cuisine VARCHAR(50), price DECIMAL(5,2)); \n[/INST]\nSELECT COUNT(*) FROM menu WHERE category IN ('vegetarian', 'vegan');\nThis SQL query uses the COUNT function to get the number of rows (or items) in the menu table that have a category of either 'vegetarian' or 'vegan'.</s>"}
{"text": "<s>[INST] \nWhat is the total waste generation in kg for each city in the 'New York' state in 2021?\nCREATE TABLE waste_generation_cities (city VARCHAR(255), state VARCHAR(255), year INT, amount FLOAT); INSERT INTO waste_generation_cities (city, state, year, amount) VALUES ('New York', 'New York', 2021, 2500.5), ('Buffalo', 'New York', 2021, 1500.3), ('Albany', 'New York', 2021, 1000.2); \n[/INST]\nSELECT wgc.city, SUM(wgc.amount) as total_waste FROM waste_generation_cities wgc WHERE wgc.state = 'New York' AND wgc.year = 2021 GROUP BY wgc.city;\nThis query calculates the total waste generation in kg for each city in the 'New York' state in 2021. It filters the waste_generation_cities table for the state 'New York' and year 2021, groups the results by city, and sums the amount of waste generated for each city.</s>"}
{"text": "<s>[INST] \nUpdate the 'battery_range' column in the 'electric_vehicle_stats' table to 300 for the record with id 2\nCREATE TABLE electric_vehicle_stats (id INT, make TEXT, model TEXT, battery_range INT); INSERT INTO electric_vehicle_stats (id, make, model, battery_range) VALUES (1, 'Tesla', 'Model 3', 263), (2, 'Chevrolet', 'Bolt', 259), (3, 'Nissan', 'Leaf', 226); \n[/INST]\nWITH cte AS (UPDATE electric_vehicle_stats SET battery_range = 300 WHERE id = 2) SELECT * FROM cte;\nThis query creates a CTE that updates the 'battery_range' column in the 'electric_vehicle_stats' table to 300 for the record with id 2. It then selects all columns from the CTE, which returns the updated record.</s>"}
{"text": "<s>[INST] \nCalculate the total number of items in each product category that are made from recycled materials.\nCREATE TABLE Products_By_Category (product_category VARCHAR(255), product_id INT); INSERT INTO Products_By_Category (product_category, product_id) VALUES ('Clothing', 100), ('Electronics', 101), ('Food', 102), ('Clothing', 103), ('Furniture', 104); CREATE TABLE Supplier_Products (product_id INT, is_recycled BOOLEAN); INSERT INTO Supplier_Products (product_id, is_recycled) VALUES (100, true), (101, false), (102, false), (103, true), (104, true); \n[/INST]\nSELECT product_category, COUNT(*) as recycled_count FROM Products_By_Category INNER JOIN Supplier_Products ON Products_By_Category.product_id = Supplier_Products.product_id WHERE Supplier_Products.is_recycled = true GROUP BY product_category;\nThis query joins the Products_By_Category and Supplier_Products tables on the product_id column and filters for products that are made from recycled materials. It then groups the results by product_category and counts the number of recycled products in each category.</s>"}
{"text": "<s>[INST] \nDelete records of humanitarian aid with a specific aid_name in the humanitarian_aid table.\nCREATE TABLE humanitarian_aid (id INT PRIMARY KEY, aid_name VARCHAR(50), recipient_country VARCHAR(50), amount_donated DECIMAL(10,2)); INSERT INTO humanitarian_aid (id, aid_name, recipient_country, amount_donated) VALUES (5, 'Medical Aid', 'Afghanistan', 250000.00), (6, 'Food Aid', 'Afghanistan', 300000.00); \n[/INST]\nWITH del_data AS (DELETE FROM humanitarian_aid WHERE aid_name = 'Medical Aid' RETURNING *) DELETE FROM humanitarian_aid WHERE id IN (SELECT id FROM del_data);\nThis example follows the same pattern as the first example, using a CTE and DELETE statement to delete records with a specific aid_name from the humanitarian_aid table.</s>"}
{"text": "<s>[INST] \nList the number of employees who received a promotion in each quarter, ranked by the number of promotions in descending order.\nCREATE TABLE Employees (EmployeeID INT, PromotionDate DATE); \n[/INST]\nSELECT DATEPART(QUARTER, PromotionDate) AS Quarter, COUNT(*) AS Promotions FROM Employees WHERE PromotionDate IS NOT NULL GROUP BY DATEPART(QUARTER, PromotionDate) ORDER BY Promotions DESC;\nThis query groups employees by promotion quarter and calculates the number of promotions for each quarter. The results are then ordered by the number of promotions in descending order.</s>"}
{"text": "<s>[INST] \nWhat is the total CO2 emission of each manufacturing process?\nCREATE TABLE ManufacturingProcesses (ProcessID INT, ProcessName VARCHAR(50)); INSERT INTO ManufacturingProcesses (ProcessID, ProcessName) VALUES (1, 'ProcessA'), (2, 'ProcessB'), (3, 'ProcessC'); CREATE TABLE CO2Emissions (EmissionID INT, CO2Emission DECIMAL(5,2), ProcessID INT); INSERT INTO CO2Emissions (EmissionID, CO2Emission, ProcessID) VALUES (1, 50.50, 1), (2, 60.60, 1), (3, 70.70, 2), (4, 80.80, 2), (5, 90.90, 3), (6, 100.00, 3); \n[/INST]\nSELECT ProcessName, SUM(CO2Emission) as TotalCO2Emission FROM ManufacturingProcesses mp JOIN CO2Emissions ce ON mp.ProcessID = ce.ProcessID GROUP BY ProcessName;\nFirst, we join the ManufacturingProcesses table with the CO2Emissions table using the ProcessID. Then, we use the GROUP BY clause to group the results by ProcessName, and the SUM function to calculate the total CO2 emission for each manufacturing process.</s>"}
{"text": "<s>[INST] \nWho are the top 2 manufacturers of satellites by number of satellites deployed?\nCREATE TABLE Manufacturers (name VARCHAR(50), satellites INT); INSERT INTO Manufacturers (name, satellites) VALUES ('SpaceX', 200), ('Boeing', 100), ('Lockheed Martin', 75); \n[/INST]\nSELECT name FROM Manufacturers WHERE satellites IN (SELECT MAX(satellites) FROM Manufacturers) LIMIT 2;\nThis query uses a subquery to first find the maximum number of satellites deployed by a manufacturer, and then selects the names of the top 2 manufacturers from the Manufacturers table.</s>"}
{"text": "<s>[INST] \nWhat is the total capacity of hospitals and clinics in each state?\nCREATE TABLE hospitals (id INT, name TEXT, state TEXT, capacity INT); INSERT INTO hospitals (id, name, state, capacity) VALUES (1, 'Hospital A', 'NY', 200), (2, 'Hospital B', 'NY', 300), (3, 'Clinic C', 'NY', 50), (4, 'Hospital D', 'CA', 250), (5, 'Clinic E', 'CA', 40); \n[/INST]\nSELECT state, SUM(capacity) FROM hospitals GROUP BY state;\nThis query selects the state column and the sum of the capacity column for each state in the hospitals table. The results are grouped by state.</s>"}
